
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800100  000015f6  0000168a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ab  0080029a  0080029a  00001824  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d7f  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b71  00000000  00000000  00003777  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cec  00000000  00000000  000042e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00004fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006aa  00000000  00000000  00005334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b8f  00000000  00000000  000059de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000656d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__ctors_end>
       4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
       8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
       c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      10:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      14:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      18:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      20:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      24:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      28:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      2c:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_11>
      30:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      34:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      38:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      3c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      40:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      44:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      48:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_18>
      4c:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_19>
      50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      54:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      58:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      5c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      60:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      68:	c5 01       	movw	r24, r10
      6a:	32 02       	muls	r19, r18
      6c:	ea 01       	movw	r28, r20
      6e:	32 02       	muls	r19, r18
      70:	32 02       	muls	r19, r18
      72:	32 02       	muls	r19, r18
      74:	32 02       	muls	r19, r18
      76:	32 02       	muls	r19, r18
      78:	32 02       	muls	r19, r18
      7a:	32 02       	muls	r19, r18
      7c:	32 02       	muls	r19, r18
      7e:	32 02       	muls	r19, r18
      80:	32 02       	muls	r19, r18
      82:	32 02       	muls	r19, r18
      84:	32 02       	muls	r19, r18
      86:	32 02       	muls	r19, r18
      88:	32 02       	muls	r19, r18
      8a:	32 02       	muls	r19, r18
      8c:	32 02       	muls	r19, r18
      8e:	32 02       	muls	r19, r18
      90:	32 02       	muls	r19, r18
      92:	32 02       	muls	r19, r18
      94:	32 02       	muls	r19, r18
      96:	32 02       	muls	r19, r18
      98:	32 02       	muls	r19, r18
      9a:	32 02       	muls	r19, r18
      9c:	32 02       	muls	r19, r18
      9e:	32 02       	muls	r19, r18
      a0:	32 02       	muls	r19, r18
      a2:	32 02       	muls	r19, r18
      a4:	32 02       	muls	r19, r18
      a6:	32 02       	muls	r19, r18
      a8:	32 02       	muls	r19, r18
      aa:	32 02       	muls	r19, r18
      ac:	32 02       	muls	r19, r18
      ae:	32 02       	muls	r19, r18
      b0:	32 02       	muls	r19, r18
      b2:	a7 01       	movw	r20, r14
      b4:	32 02       	muls	r19, r18
      b6:	0c 02       	muls	r16, r28
      b8:	14 02       	muls	r17, r20
      ba:	32 02       	muls	r19, r18
      bc:	32 02       	muls	r19, r18
      be:	71 01       	movw	r14, r2
      c0:	32 02       	muls	r19, r18
      c2:	1b 02       	muls	r17, r27
      c4:	32 02       	muls	r19, r18
      c6:	32 02       	muls	r19, r18
      c8:	32 02       	muls	r19, r18
      ca:	32 02       	muls	r19, r18
      cc:	32 02       	muls	r19, r18
      ce:	32 02       	muls	r19, r18
      d0:	32 02       	muls	r19, r18
      d2:	32 02       	muls	r19, r18
      d4:	32 02       	muls	r19, r18
      d6:	32 02       	muls	r19, r18
      d8:	32 02       	muls	r19, r18
      da:	32 02       	muls	r19, r18
      dc:	90 01       	movw	r18, r0

000000de <__trampolines_end>:
      de:	6e 61       	ori	r22, 0x1E	; 30
      e0:	6e 00       	.word	0x006e	; ????

000000e2 <__c.2332>:
      e2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f2:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     102:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     112:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     122:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     132:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     142:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     152:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     162:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     172:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     182:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     192:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e0 <__ctors_end>:
     1e0:	11 24       	eor	r1, r1
     1e2:	1f be       	out	0x3f, r1	; 63
     1e4:	cf ef       	ldi	r28, 0xFF	; 255
     1e6:	d8 e0       	ldi	r29, 0x08	; 8
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	cd bf       	out	0x3d, r28	; 61

000001ec <__do_copy_data>:
     1ec:	12 e0       	ldi	r17, 0x02	; 2
     1ee:	a0 e0       	ldi	r26, 0x00	; 0
     1f0:	b1 e0       	ldi	r27, 0x01	; 1
     1f2:	e6 ef       	ldi	r30, 0xF6	; 246
     1f4:	f5 e1       	ldi	r31, 0x15	; 21
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <__do_copy_data+0x10>
     1f8:	05 90       	lpm	r0, Z+
     1fa:	0d 92       	st	X+, r0
     1fc:	aa 39       	cpi	r26, 0x9A	; 154
     1fe:	b1 07       	cpc	r27, r17
     200:	d9 f7       	brne	.-10     	; 0x1f8 <__do_copy_data+0xc>

00000202 <__do_clear_bss>:
     202:	24 e0       	ldi	r18, 0x04	; 4
     204:	aa e9       	ldi	r26, 0x9A	; 154
     206:	b2 e0       	ldi	r27, 0x02	; 2
     208:	01 c0       	rjmp	.+2      	; 0x20c <.do_clear_bss_start>

0000020a <.do_clear_bss_loop>:
     20a:	1d 92       	st	X+, r1

0000020c <.do_clear_bss_start>:
     20c:	a5 34       	cpi	r26, 0x45	; 69
     20e:	b2 07       	cpc	r27, r18
     210:	e1 f7       	brne	.-8      	; 0x20a <.do_clear_bss_loop>
     212:	0e 94 51 04 	call	0x8a2	; 0x8a2 <main>
     216:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <_exit>

0000021a <__bad_interrupt>:
     21a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021e <print_int>:
	itoa(value, buffer, 10);
	uart_putc(id);
	uart_putc('=');
	uart_puts(buffer);
	uart_putc('\n');
}
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	28 97       	sbiw	r28, 0x08	; 8
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	de bf       	out	0x3e, r29	; 62
     230:	0f be       	out	0x3f, r0	; 63
     232:	cd bf       	out	0x3d, r28	; 61
     234:	16 2f       	mov	r17, r22
     236:	4a e0       	ldi	r20, 0x0A	; 10
     238:	be 01       	movw	r22, r28
     23a:	6f 5f       	subi	r22, 0xFF	; 255
     23c:	7f 4f       	sbci	r23, 0xFF	; 255
     23e:	0e 94 22 0a 	call	0x1444	; 0x1444 <__itoa_ncheck>
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     24a:	11 23       	and	r17, r17
     24c:	21 f0       	breq	.+8      	; 0x256 <print_int+0x38>
     24e:	82 ef       	ldi	r24, 0xF2	; 242
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     256:	28 96       	adiw	r28, 0x08	; 8
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	08 95       	ret

0000026a <read_int_value>:
		}
	}	
}

unsigned long read_int_value ()
{
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	60 97       	sbiw	r28, 0x10	; 16
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
	char *pch;
	char cmdValue[16];
	// Find the position the equals sign is
	// in the string, keep a pointer to it
	pch = strchr(command_in, '=');
     27e:	6d e3       	ldi	r22, 0x3D	; 61
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	89 e0       	ldi	r24, 0x09	; 9
     284:	93 e0       	ldi	r25, 0x03	; 3
     286:	0e 94 05 0a 	call	0x140a	; 0x140a <strchr>
	// Copy everything after that point into
	// the buffer variable
	strcpy(cmdValue, pch+1);
     28a:	bc 01       	movw	r22, r24
     28c:	6f 5f       	subi	r22, 0xFF	; 255
     28e:	7f 4f       	sbci	r23, 0xFF	; 255
     290:	ce 01       	movw	r24, r28
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	0e 94 10 0a 	call	0x1420	; 0x1420 <strcpy>
	// Now turn this value into an integer and
	// return it to the caller.
	return atoi(cmdValue);
     298:	ce 01       	movw	r24, r28
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	0e 94 04 09 	call	0x1208	; 0x1208 <atoi>
     2a0:	bc 01       	movw	r22, r24
     2a2:	99 0f       	add	r25, r25
     2a4:	88 0b       	sbc	r24, r24
     2a6:	99 0b       	sbc	r25, r25
}
     2a8:	60 96       	adiw	r28, 0x10	; 16
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <process_command>:

void process_command()
{
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
	uint16_t val = 0;
	switch (command_in[0]) {
     2c6:	e0 91 09 03 	lds	r30, 0x0309	; 0x800309 <command_in>
     2ca:	8e 2f       	mov	r24, r30
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	fc 01       	movw	r30, r24
     2d0:	bb 97       	sbiw	r30, 0x2b	; 43
     2d2:	eb 33       	cpi	r30, 0x3B	; 59
     2d4:	f1 05       	cpc	r31, r1
     2d6:	08 f0       	brcs	.+2      	; 0x2da <process_command+0x20>
     2d8:	c5 c0       	rjmp	.+394    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     2da:	ec 5c       	subi	r30, 0xCC	; 204
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__tablejump2__>
			
		case 'V':	/* duty cycle */
		if (command_in[1] == '=') {
     2e2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <command_in+0x1>
     2e6:	8d 33       	cpi	r24, 0x3D	; 61
     2e8:	41 f4       	brne	.+16     	; 0x2fa <process_command+0x40>
			val = read_int_value();}
     2ea:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
     2ee:	eb 01       	movw	r28, r22

		if (val>=0 && val<=255)
     2f0:	6f 3f       	cpi	r22, 0xFF	; 255
     2f2:	71 05       	cpc	r23, r1
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <process_command+0x3e>
     2f6:	78 f4       	brcc	.+30     	; 0x316 <process_command+0x5c>
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <process_command+0x44>
	return atoi(cmdValue);
}

void process_command()
{
	uint16_t val = 0;
     2fa:	c0 e0       	ldi	r28, 0x00	; 0
     2fc:	d0 e0       	ldi	r29, 0x00	; 0
		if (command_in[1] == '=') {
			val = read_int_value();}

		if (val>=0 && val<=255)
		{
			set_motor_speed(val);
     2fe:	8c 2f       	mov	r24, r28
     300:	0e 94 89 03 	call	0x712	; 0x712 <set_motor_speed>
			uart_puts("Speed = ");
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
			print_int(val, TRUE);
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	ce 01       	movw	r24, r28
     310:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     314:	bd c0       	rjmp	.+378    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		}
		else
		{
			uart_puts("Speed not in range of 0-255\n");
     316:	89 e0       	ldi	r24, 0x09	; 9
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     31e:	b8 c0       	rjmp	.+368    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		}
		break;	
		
		case 'e':	/* direction test */
		if (command_in[1] == '=') {
     320:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <command_in+0x1>
     324:	8d 33       	cpi	r24, 0x3D	; 61
     326:	41 f4       	brne	.+16     	; 0x338 <process_command+0x7e>
		val = read_int_value();}
     328:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
     32c:	eb 01       	movw	r28, r22

		if (val>=0 && val<=100)
     32e:	65 36       	cpi	r22, 0x65	; 101
     330:	71 05       	cpc	r23, r1
     332:	08 f0       	brcs	.+2      	; 0x336 <process_command+0x7c>
     334:	ad c0       	rjmp	.+346    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     336:	02 c0       	rjmp	.+4      	; 0x33c <process_command+0x82>
	return atoi(cmdValue);
}

void process_command()
{
	uint16_t val = 0;
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	d0 e0       	ldi	r29, 0x00	; 0
		if (command_in[1] == '=') {
		val = read_int_value();}

		if (val>=0 && val<=100)
		{
			uart_puts("e value = ");
     33c:	86 e2       	ldi	r24, 0x26	; 38
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
			print_int(val, TRUE);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	ce 01       	movw	r24, r28
     348:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     34c:	a1 c0       	rjmp	.+322    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		}
		break;
		
		case 'P':	/* Setpoint Angle */
		if (command_in[1] == '=') 
     34e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <command_in+0x1>
     352:	8d 33       	cpi	r24, 0x3D	; 61
     354:	09 f0       	breq	.+2      	; 0x358 <process_command+0x9e>
     356:	9c c0       	rjmp	.+312    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		{
			val = read_int_value();
     358:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
     35c:	6b 01       	movw	r12, r22
     35e:	7c 01       	movw	r14, r24
			if (val>=0 && val<=255)
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	c8 16       	cp	r12, r24
     364:	d1 04       	cpc	r13, r1
     366:	09 f0       	breq	.+2      	; 0x36a <process_command+0xb0>
     368:	58 f4       	brcc	.+22     	; 0x380 <process_command+0xc6>
			{
				device.setpoint_angle = val;
     36a:	c0 92 38 04 	sts	0x0438, r12	; 0x800438 <device+0x2>
				uart_puts("Setpoint = ");
     36e:	81 e3       	ldi	r24, 0x31	; 49
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
				print_int(val, TRUE);
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	c6 01       	movw	r24, r12
     37a:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     37e:	88 c0       	rjmp	.+272    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			}
			else
			{
				uart_puts("Setpoint not in range 0-255\n");
     380:	8d e3       	ldi	r24, 0x3D	; 61
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     388:	83 c0       	rjmp	.+262    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		}

		break;
		
		case '+':	/* Setpoint Angle + */
			if (command_in[1] == '=')
     38a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <command_in+0x1>
     38e:	8d 33       	cpi	r24, 0x3D	; 61
     390:	09 f0       	breq	.+2      	; 0x394 <process_command+0xda>
     392:	7e c0       	rjmp	.+252    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			{
				val = read_int_value();
     394:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
				if (val>0 && val<=MAX_DEGREES)
     398:	9b 01       	movw	r18, r22
     39a:	21 50       	subi	r18, 0x01	; 1
     39c:	31 09       	sbc	r19, r1
     39e:	29 36       	cpi	r18, 0x69	; 105
     3a0:	31 05       	cpc	r19, r1
     3a2:	98 f4       	brcc	.+38     	; 0x3ca <process_command+0x110>
				{
					device.setpoint_angle += val;
					device.setpoint_angle = (device.setpoint_angle >= MAX_DEGREES) ? MAX_DEGREES : device.setpoint_angle;
     3a4:	e6 e3       	ldi	r30, 0x36	; 54
     3a6:	f4 e0       	ldi	r31, 0x04	; 4
     3a8:	22 81       	ldd	r18, Z+2	; 0x02
     3aa:	62 0f       	add	r22, r18
     3ac:	6a 36       	cpi	r22, 0x6A	; 106
     3ae:	08 f0       	brcs	.+2      	; 0x3b2 <process_command+0xf8>
     3b0:	69 e6       	ldi	r22, 0x69	; 105
     3b2:	62 83       	std	Z+2, r22	; 0x02
					uart_puts("Setpoint = ");
     3b4:	81 e3       	ldi	r24, 0x31	; 49
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
					print_int(device.setpoint_angle, TRUE);
     3bc:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <device+0x2>
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     3c8:	63 c0       	rjmp	.+198    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
				}
				else
				{
					uart_puts("Setpoint not in range too big\n");
     3ca:	8a e5       	ldi	r24, 0x5A	; 90
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     3d2:	5e c0       	rjmp	.+188    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
				}
			}
		break;
		
		case '-':	/* Setpoint Angle - */
			if (command_in[1] == '=')
     3d4:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <command_in+0x1>
     3d8:	8d 33       	cpi	r24, 0x3D	; 61
     3da:	09 f0       	breq	.+2      	; 0x3de <process_command+0x124>
     3dc:	59 c0       	rjmp	.+178    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
			{
				val = read_int_value();
     3de:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
				if (device.setpoint_angle >= val)
     3e2:	40 91 38 04 	lds	r20, 0x0438	; 0x800438 <device+0x2>
     3e6:	24 2f       	mov	r18, r20
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	26 17       	cp	r18, r22
     3ec:	37 07       	cpc	r19, r23
     3ee:	78 f0       	brcs	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				{
					device.setpoint_angle -= val;
     3f0:	c6 e3       	ldi	r28, 0x36	; 54
     3f2:	d4 e0       	ldi	r29, 0x04	; 4
     3f4:	84 2f       	mov	r24, r20
     3f6:	86 1b       	sub	r24, r22
     3f8:	8a 83       	std	Y+2, r24	; 0x02
					uart_puts("Setpoint = ");
     3fa:	81 e3       	ldi	r24, 0x31	; 49
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
					print_int(device.setpoint_angle, TRUE);
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     40c:	41 c0       	rjmp	.+130    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
				}
				else
				{
					uart_puts("Setpoint not in range, too small\n");
     40e:	89 e7       	ldi	r24, 0x79	; 121
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     416:	3c c0       	rjmp	.+120    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
				}
			}
		break;
		
		case 'R':	/* Reset */
			device.movementEnabled = TRUE;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <device+0xc>
			uart_puts("Reset");
     41e:	8b e9       	ldi	r24, 0x9B	; 155
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
		break;
     426:	34 c0       	rjmp	.+104    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		
		case 'S':	/* STOP */
			device.movementEnabled = FALSE;
     428:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <device+0xc>
			uart_puts("STOP!");
     42c:	81 ea       	ldi	r24, 0xA1	; 161
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
		break;
     434:	2d c0       	rjmp	.+90     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		
		case 'X':	/* Action for X times */
		if (command_in[1] == '=')
     436:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <command_in+0x1>
     43a:	8d 33       	cpi	r24, 0x3D	; 61
     43c:	99 f4       	brne	.+38     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		{
			val = read_int_value();
     43e:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
			if (val>=0 && val<=100)
     442:	65 36       	cpi	r22, 0x65	; 101
     444:	71 05       	cpc	r23, r1
     446:	50 f4       	brcc	.+20     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			{
				device.setpoint_angle_previous = device.setpoint_angle;	// save current setpoint
     448:	e6 e3       	ldi	r30, 0x36	; 54
     44a:	f4 e0       	ldi	r31, 0x04	; 4
     44c:	22 81       	ldd	r18, Z+2	; 0x02
     44e:	23 83       	std	Z+3, r18	; 0x03
				device.multiply_movement = val;
     450:	65 87       	std	Z+13, r22	; 0x0d
				uart_puts("Doing auto movement\n");
     452:	87 ea       	ldi	r24, 0xA7	; 167
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     45a:	04 c0       	rjmp	.+8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
			}
			else
			{
				uart_puts("Multiply movement not in range\n");
     45c:	8c eb       	ldi	r24, 0xBC	; 188
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
			}
		}
		
					
		default:
		uart_puts("No valid command:");
     464:	8c ed       	ldi	r24, 0xDC	; 220
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
		uart_putc(command_in[0]);
     46c:	c9 e0       	ldi	r28, 0x09	; 9
     46e:	d3 e0       	ldi	r29, 0x03	; 3
     470:	88 81       	ld	r24, Y
     472:	0e 94 17 05 	call	0xa2e	; 0xa2e <uart_putc>
		uart_puts(" (");
     476:	8e ee       	ldi	r24, 0xEE	; 238
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
		print_int(command_in[0], 0);
     47e:	88 81       	ld	r24, Y
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
		uart_puts(")\n");
     488:	81 ef       	ldi	r24, 0xF1	; 241
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
		break;
		
	}
	command_ready = FALSE;
     490:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <command_ready>
}
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	08 95       	ret

000004a2 <get_serial>:
	uart_puts(buffer);
	uart_putc('\n');
}

void get_serial(void)
{
     4a2:	cf 93       	push	r28
	unsigned int c = uart_getc();
     4a4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <uart_getc>
	if (!(c & UART_NO_DATA)	// If data is correct
	&&	!(c & UART_FRAME_ERROR)
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
     4a8:	9c 01       	movw	r18, r24
     4aa:	22 27       	eor	r18, r18
     4ac:	3b 71       	andi	r19, 0x1B	; 27
     4ae:	23 2b       	or	r18, r19
     4b0:	09 f0       	breq	.+2      	; 0x4b4 <get_serial+0x12>
     4b2:	43 c0       	rjmp	.+134    	; 0x53a <get_serial+0x98>
	)
	{
		command_in[data_count] = c;
     4b4:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <data_count>
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	e7 5f       	subi	r30, 0xF7	; 247
     4bc:	fc 4f       	sbci	r31, 0xFC	; 252
     4be:	80 83       	st	Z, r24
		if ((command_in[data_count] == '\n') || (command_in[data_count] == '\r'))
     4c0:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <data_count>
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	e7 5f       	subi	r30, 0xF7	; 247
     4c8:	fc 4f       	sbci	r31, 0xFC	; 252
     4ca:	80 81       	ld	r24, Z
     4cc:	8a 30       	cpi	r24, 0x0A	; 10
     4ce:	41 f0       	breq	.+16     	; 0x4e0 <get_serial+0x3e>
     4d0:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <data_count>
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	e7 5f       	subi	r30, 0xF7	; 247
     4d8:	fc 4f       	sbci	r31, 0xFC	; 252
     4da:	80 81       	ld	r24, Z
     4dc:	8d 30       	cpi	r24, 0x0D	; 13
     4de:	41 f5       	brne	.+80     	; 0x530 <get_serial+0x8e>
		{
			uart_puts("Received =<");
     4e0:	84 ef       	ldi	r24, 0xF4	; 244
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
			for(uint8_t i=0; i<data_count; i++) {
     4e8:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <data_count>
     4ec:	88 23       	and	r24, r24
     4ee:	69 f0       	breq	.+26     	; 0x50a <get_serial+0x68>
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
				uart_putc(command_in[i]);
     4f2:	ec 2f       	mov	r30, r28
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	e7 5f       	subi	r30, 0xF7	; 247
     4f8:	fc 4f       	sbci	r31, 0xFC	; 252
     4fa:	80 81       	ld	r24, Z
     4fc:	0e 94 17 05 	call	0xa2e	; 0xa2e <uart_putc>
	{
		command_in[data_count] = c;
		if ((command_in[data_count] == '\n') || (command_in[data_count] == '\r'))
		{
			uart_puts("Received =<");
			for(uint8_t i=0; i<data_count; i++) {
     500:	cf 5f       	subi	r28, 0xFF	; 255
     502:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <data_count>
     506:	c8 17       	cp	r28, r24
     508:	a0 f3       	brcs	.-24     	; 0x4f2 <get_serial+0x50>
				uart_putc(command_in[i]);
			}
			uart_puts(">\n");
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
			
			command_ready = TRUE;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <command_ready>
			process_command();
     518:	0e 94 5d 01 	call	0x2ba	; 0x2ba <process_command>
			data_count = 0;	// reset
     51c:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <data_count>
			memset(command_in, 0, sizeof(command_in));	// set command to 0
     520:	84 e6       	ldi	r24, 0x64	; 100
     522:	e9 e0       	ldi	r30, 0x09	; 9
     524:	f3 e0       	ldi	r31, 0x03	; 3
     526:	df 01       	movw	r26, r30
     528:	1d 92       	st	X+, r1
     52a:	8a 95       	dec	r24
     52c:	e9 f7       	brne	.-6      	; 0x528 <get_serial+0x86>
     52e:	05 c0       	rjmp	.+10     	; 0x53a <get_serial+0x98>
		}
		else
		{
			data_count++;
     530:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <data_count>
     534:	8f 5f       	subi	r24, 0xFF	; 255
     536:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <data_count>
		}
	}	
}
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <init_io>:
}

uint16_t calculate_error(void)
{
	return 0;
}
     53e:	24 9a       	sbi	0x04, 4	; 4
     540:	53 9a       	sbi	0x0a, 3	; 10
     542:	21 9a       	sbi	0x04, 1	; 4
     544:	55 9a       	sbi	0x0a, 5	; 10
     546:	08 95       	ret

00000548 <init_int>:
     548:	e0 eb       	ldi	r30, 0xB0	; 176
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	80 62       	ori	r24, 0x20	; 32
     550:	80 83       	st	Z, r24
     552:	80 81       	ld	r24, Z
     554:	83 60       	ori	r24, 0x03	; 3
     556:	80 83       	st	Z, r24
     558:	e1 eb       	ldi	r30, 0xB1	; 177
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	80 81       	ld	r24, Z
     55e:	82 60       	ori	r24, 0x02	; 2
     560:	80 83       	st	Z, r24
     562:	e1 e8       	ldi	r30, 0x81	; 129
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	80 81       	ld	r24, Z
     568:	88 60       	ori	r24, 0x08	; 8
     56a:	80 83       	st	Z, r24
     56c:	80 81       	ld	r24, Z
     56e:	85 60       	ori	r24, 0x05	; 5
     570:	80 83       	st	Z, r24
     572:	ef e6       	ldi	r30, 0x6F	; 111
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	80 81       	ld	r24, Z
     578:	82 60       	ori	r24, 0x02	; 2
     57a:	80 83       	st	Z, r24
     57c:	8b e9       	ldi	r24, 0x9B	; 155
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     584:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     588:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     58c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     590:	78 94       	sei
     592:	08 95       	ret

00000594 <init_adc>:
     594:	ec e7       	ldi	r30, 0x7C	; 124
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	80 64       	ori	r24, 0x40	; 64
     59c:	80 83       	st	Z, r24
     59e:	ea e7       	ldi	r30, 0x7A	; 122
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	87 60       	ori	r24, 0x07	; 7
     5a6:	80 83       	st	Z, r24
     5a8:	80 81       	ld	r24, Z
     5aa:	80 68       	ori	r24, 0x80	; 128
     5ac:	80 83       	st	Z, r24
     5ae:	08 95       	ret

000005b0 <read_adc>:
     5b0:	ec e7       	ldi	r30, 0x7C	; 124
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	90 81       	ld	r25, Z
     5b6:	90 7f       	andi	r25, 0xF0	; 240
     5b8:	8f 70       	andi	r24, 0x0F	; 15
     5ba:	89 2b       	or	r24, r25
     5bc:	80 83       	st	Z, r24
     5be:	ea e7       	ldi	r30, 0x7A	; 122
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	80 64       	ori	r24, 0x40	; 64
     5c6:	80 83       	st	Z, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	86 fd       	sbrc	r24, 6
     5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <read_adc+0x18>
     5ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     5d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     5d6:	08 95       	ret

000005d8 <__vector_11>:
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	2f 93       	push	r18
     5e4:	3f 93       	push	r19
     5e6:	4f 93       	push	r20
     5e8:	5f 93       	push	r21
     5ea:	6f 93       	push	r22
     5ec:	7f 93       	push	r23
     5ee:	8f 93       	push	r24
     5f0:	9f 93       	push	r25
     5f2:	af 93       	push	r26
     5f4:	bf 93       	push	r27
     5f6:	ef 93       	push	r30
     5f8:	ff 93       	push	r31
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <read_adc>
     600:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <device+0x9>
     604:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <device+0x8>
     608:	83 e0       	ldi	r24, 0x03	; 3
     60a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <read_adc>
     60e:	9c 01       	movw	r18, r24
     610:	2c 55       	subi	r18, 0x5C	; 92
     612:	31 40       	sbci	r19, 0x01	; 1
     614:	ab ea       	ldi	r26, 0xAB	; 171
     616:	ba ea       	ldi	r27, 0xAA	; 170
     618:	0e 94 be 08 	call	0x117c	; 0x117c <__umulhisi3>
     61c:	96 95       	lsr	r25
     61e:	87 95       	ror	r24
     620:	89 3c       	cpi	r24, 0xC9	; 201
     622:	91 05       	cpc	r25, r1
     624:	28 f0       	brcs	.+10     	; 0x630 <__vector_11+0x58>
     626:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <device+0x5>
     62a:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <device+0x4>
     62e:	0e c0       	rjmp	.+28     	; 0x64c <__vector_11+0x74>
     630:	8a 36       	cpi	r24, 0x6A	; 106
     632:	91 05       	cpc	r25, r1
     634:	28 f4       	brcc	.+10     	; 0x640 <__vector_11+0x68>
     636:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <device+0x5>
     63a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <device+0x4>
     63e:	06 c0       	rjmp	.+12     	; 0x64c <__vector_11+0x74>
     640:	89 e6       	ldi	r24, 0x69	; 105
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <device+0x5>
     648:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <device+0x4>
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <check_movement>
     652:	ff 91       	pop	r31
     654:	ef 91       	pop	r30
     656:	bf 91       	pop	r27
     658:	af 91       	pop	r26
     65a:	9f 91       	pop	r25
     65c:	8f 91       	pop	r24
     65e:	7f 91       	pop	r23
     660:	6f 91       	pop	r22
     662:	5f 91       	pop	r21
     664:	4f 91       	pop	r20
     666:	3f 91       	pop	r19
     668:	2f 91       	pop	r18
     66a:	0f 90       	pop	r0
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	0f 90       	pop	r0
     670:	1f 90       	pop	r1
     672:	18 95       	reti

00000674 <print_values>:
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	83 e0       	ldi	r24, 0x03	; 3
     67a:	92 e0       	ldi	r25, 0x02	; 2
     67c:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     680:	c6 e3       	ldi	r28, 0x36	; 54
     682:	d4 e0       	ldi	r29, 0x04	; 4
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	88 85       	ldd	r24, Y+8	; 0x08
     688:	99 85       	ldd	r25, Y+9	; 0x09
     68a:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     68e:	89 e0       	ldi	r24, 0x09	; 9
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     696:	8a 81       	ldd	r24, Y+2	; 0x02
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     6a0:	80 e1       	ldi	r24, 0x10	; 16
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	8c 81       	ldd	r24, Y+4	; 0x04
     6ac:	9d 81       	ldd	r25, Y+5	; 0x05
     6ae:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     6b2:	87 e1       	ldi	r24, 0x17	; 23
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	8e 81       	ldd	r24, Y+6	; 0x06
     6be:	9f 81       	ldd	r25, Y+7	; 0x07
     6c0:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     6c4:	8d e1       	ldi	r24, 0x1D	; 29
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     6d6:	83 e2       	ldi	r24, 0x23	; 35
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     6de:	88 81       	ld	r24, Y
     6e0:	81 11       	cpse	r24, r1
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <print_values+0x7a>
     6e4:	89 e2       	ldi	r24, 0x29	; 41
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <print_values+0x82>
     6ee:	8f e2       	ldi	r24, 0x2F	; 47
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <set_motor_dir>:
     6fc:	81 11       	cpse	r24, r1
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <set_motor_dir+0xa>
     700:	90 e1       	ldi	r25, 0x10	; 16
     702:	95 b9       	out	0x05, r25	; 5
     704:	03 c0       	rjmp	.+6      	; 0x70c <set_motor_dir+0x10>
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	09 f4       	brne	.+2      	; 0x70c <set_motor_dir+0x10>
     70a:	2c 98       	cbi	0x05, 4	; 5
     70c:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <device>
     710:	08 95       	ret

00000712 <set_motor_speed>:
     712:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     716:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <device+0x1>
     71a:	08 95       	ret

0000071c <p_loop>:
	}
}
*/

void p_loop(void)
{
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
	uint16_t speed = 0;
	static uint16_t error_old = 0;
	static uint16_t timer = 0;
	static uint8_t init_move = FALSE;
	
	if (device.current>=device.current_limit)
     720:	e6 e3       	ldi	r30, 0x36	; 54
     722:	f4 e0       	ldi	r31, 0x04	; 4
     724:	20 85       	ldd	r18, Z+8	; 0x08
     726:	31 85       	ldd	r19, Z+9	; 0x09
     728:	82 85       	ldd	r24, Z+10	; 0x0a
     72a:	93 85       	ldd	r25, Z+11	; 0x0b
     72c:	28 17       	cp	r18, r24
     72e:	39 07       	cpc	r19, r25
     730:	30 f0       	brcs	.+12     	; 0x73e <p_loop+0x22>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     732:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     736:	11 82       	std	Z+1, r1	; 0x01
	
	if (device.current>=device.current_limit)
	{
		set_motor_speed(0);	// Turn motor off
		// TODO set brake pin
		device.movementEnabled = FALSE;
     738:	14 86       	std	Z+12, r1	; 0x0c
		device.status = STOP;
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	86 87       	std	Z+14, r24	; 0x0e
	}
	
	if (device.movementEnabled == TRUE)
     73e:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <device+0xc>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	09 f0       	breq	.+2      	; 0x748 <p_loop+0x2c>
     746:	7b c0       	rjmp	.+246    	; 0x83e <p_loop+0x122>
	{
		if ((device.current_angle + MIN_ACT_ON_ERROR) <= device.setpoint_angle)	// setpoint is further, pull
     748:	e6 e3       	ldi	r30, 0x36	; 54
     74a:	f4 e0       	ldi	r31, 0x04	; 4
     74c:	24 81       	ldd	r18, Z+4	; 0x04
     74e:	35 81       	ldd	r19, Z+5	; 0x05
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	a9 01       	movw	r20, r18
     756:	4e 5f       	subi	r20, 0xFE	; 254
     758:	5f 4f       	sbci	r21, 0xFF	; 255
     75a:	84 17       	cp	r24, r20
     75c:	95 07       	cpc	r25, r21
     75e:	78 f0       	brcs	.+30     	; 0x77e <p_loop+0x62>
		{
			device.error = (device.setpoint_angle - device.current_angle);	// Calc error
     760:	ef 01       	movw	r28, r30
     762:	82 1b       	sub	r24, r18
     764:	93 0b       	sbc	r25, r19
     766:	97 83       	std	Z+7, r25	; 0x07
     768:	86 83       	std	Z+6, r24	; 0x06
			set_motor_dir(FORWARD);
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <set_motor_dir>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     770:	8f ef       	ldi	r24, 0xFF	; 255
     772:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     776:	89 83       	std	Y+1, r24	; 0x01
			set_motor_dir(FORWARD);
			speed = (P_GAIN * device.error);								// calculate output pwm value
			speed = (speed > 255) ? 255 : speed;							// limit output
			//set_motor_speed(speed);	// do output
			set_motor_speed(255);	// do output
			device.status = WORKING;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	8e 87       	std	Y+14, r24	; 0x0e
     77c:	67 c0       	rjmp	.+206    	; 0x84c <p_loop+0x130>
		}
		else if ((device.current_angle > MIN_ACT_ON_ERROR) && ((device.current_angle - MIN_ACT_ON_ERROR) >= device.setpoint_angle))  // past the setpoint, release
     77e:	23 30       	cpi	r18, 0x03	; 3
     780:	31 05       	cpc	r19, r1
     782:	08 f4       	brcc	.+2      	; 0x786 <p_loop+0x6a>
     784:	52 c0       	rjmp	.+164    	; 0x82a <p_loop+0x10e>
     786:	a9 01       	movw	r20, r18
     788:	42 50       	subi	r20, 0x02	; 2
     78a:	51 09       	sbc	r21, r1
     78c:	48 17       	cp	r20, r24
     78e:	59 07       	cpc	r21, r25
     790:	08 f4       	brcc	.+2      	; 0x794 <p_loop+0x78>
     792:	4b c0       	rjmp	.+150    	; 0x82a <p_loop+0x10e>
		{
			device.error = (device.current_angle - device.setpoint_angle); // Calc error
     794:	28 1b       	sub	r18, r24
     796:	39 0b       	sbc	r19, r25
     798:	30 93 3d 04 	sts	0x043D, r19	; 0x80043d <device+0x7>
     79c:	20 93 3c 04 	sts	0x043C, r18	; 0x80043c <device+0x6>
			set_motor_dir(BACKWARD);
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <set_motor_dir>
			
			if (!init_move)	// do release a bit first
     7a6:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <init_move.2564>
     7aa:	81 11       	cpse	r24, r1
     7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <p_loop+0xa4>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     7b4:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <device+0x1>
			set_motor_dir(BACKWARD);
			
			if (!init_move)	// do release a bit first
			{
				set_motor_speed(255);
				init_move = TRUE;
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <init_move.2564>
     7be:	46 c0       	rjmp	.+140    	; 0x84c <p_loop+0x130>
				//uart_puts("INITSPEED\n");
			}
			else
			{
				if (timer == (FUNCTION_TIMER_MS/INTERRUPT_MS))
     7c0:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <timer.2563>
     7c4:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <timer.2563+0x1>
     7c8:	82 30       	cpi	r24, 0x02	; 2
     7ca:	91 05       	cpc	r25, r1
     7cc:	41 f5       	brne	.+80     	; 0x81e <p_loop+0x102>
				{
					LED_TOGGLE;	// every 200ms?
     7ce:	9b b1       	in	r25, 0x0b	; 11
     7d0:	80 e2       	ldi	r24, 0x20	; 32
     7d2:	89 27       	eor	r24, r25
     7d4:	8b b9       	out	0x0b, r24	; 11
					if (device.error < error_old)	// if moved a bit
     7d6:	20 91 3c 04 	lds	r18, 0x043C	; 0x80043c <device+0x6>
     7da:	30 91 3d 04 	lds	r19, 0x043D	; 0x80043d <device+0x7>
     7de:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <error_old.2562>
     7e2:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <error_old.2562+0x1>
     7e6:	28 17       	cp	r18, r24
     7e8:	39 07       	cpc	r19, r25
     7ea:	30 f4       	brcc	.+12     	; 0x7f8 <p_loop+0xdc>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     7f2:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <device+0x1>
     7f6:	04 c0       	rjmp	.+8      	; 0x800 <p_loop+0xe4>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     7f8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     7fc:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <device+0x1>
					{
						set_motor_speed(0);	// wait for the user to release a bit
						//uart_puts("OFF\n");
					}
					
					error_old = device.error;
     800:	e6 e3       	ldi	r30, 0x36	; 54
     802:	f4 e0       	ldi	r31, 0x04	; 4
     804:	86 81       	ldd	r24, Z+6	; 0x06
     806:	97 81       	ldd	r25, Z+7	; 0x07
     808:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <error_old.2562+0x1>
     80c:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <error_old.2562>
					timer = 0;
     810:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <timer.2563+0x1>
     814:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <timer.2563>
					device.status = WORKING;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	86 87       	std	Z+14, r24	; 0x0e
     81c:	17 c0       	rjmp	.+46     	; 0x84c <p_loop+0x130>
				}
				else
				{
					timer++;
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <timer.2563+0x1>
     824:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <timer.2563>
     828:	11 c0       	rjmp	.+34     	; 0x84c <p_loop+0x130>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     82a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     82e:	e6 e3       	ldi	r30, 0x36	; 54
     830:	f4 e0       	ldi	r31, 0x04	; 4
     832:	11 82       	std	Z+1, r1	; 0x01
			}
		}
		else
		{
			set_motor_speed(0);	// at position
			init_move = TRUE;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <init_move.2564>
			device.status = DONE;
     83a:	16 86       	std	Z+14, r1	; 0x0e
     83c:	07 c0       	rjmp	.+14     	; 0x84c <p_loop+0x130>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     83e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     842:	e6 e3       	ldi	r30, 0x36	; 54
     844:	f4 e0       	ldi	r31, 0x04	; 4
     846:	11 82       	std	Z+1, r1	; 0x01
		}
	}
	else
	{
		set_motor_speed(0);
		device.status = STOP;
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	86 87       	std	Z+14, r24	; 0x0e
	}	
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <check_auto_movement>:

void check_auto_movement(void)
{
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
	static uint8_t move_up = FALSE;	// begin to move to 0
	
	if (device.multiply_movement>0)
     856:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <device+0xd>
     85a:	88 23       	and	r24, r24
     85c:	f9 f0       	breq	.+62     	; 0x89c <check_auto_movement+0x4a>
	{
		if (device.status == DONE)
     85e:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <device+0xe>
     862:	81 11       	cpse	r24, r1
     864:	1b c0       	rjmp	.+54     	; 0x89c <check_auto_movement+0x4a>
		{
			if (move_up)
     866:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <__data_end>
     86a:	88 23       	and	r24, r24
     86c:	71 f0       	breq	.+28     	; 0x88a <check_auto_movement+0x38>
			{
				device.setpoint_angle = device.setpoint_angle_previous;
     86e:	c6 e3       	ldi	r28, 0x36	; 54
     870:	d4 e0       	ldi	r29, 0x04	; 4
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	8a 83       	std	Y+2, r24	; 0x02
				move_up = FALSE;
     876:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__data_end>
				uart_puts("Set to up\n");
     87a:	81 e8       	ldi	r24, 0x81	; 129
     87c:	92 e0       	ldi	r25, 0x02	; 2
     87e:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
				device.multiply_movement--;
     882:	8d 85       	ldd	r24, Y+13	; 0x0d
     884:	81 50       	subi	r24, 0x01	; 1
     886:	8d 87       	std	Y+13, r24	; 0x0d
     888:	09 c0       	rjmp	.+18     	; 0x89c <check_auto_movement+0x4a>
			}
			else
			{
				device.setpoint_angle = 0;
     88a:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <device+0x2>
				move_up = TRUE;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__data_end>
				uart_puts("Set to down\n");
     894:	8c e8       	ldi	r24, 0x8C	; 140
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	0e 94 2c 05 	call	0xa58	; 0xa58 <uart_puts>
			}
		}	
	}
}
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <main>:
	check_movement = TRUE;
}

int main(void)
{
	init_io();			/* Init IO*/
     8a2:	0e 94 9f 02 	call	0x53e	; 0x53e <init_io>
	init_int();			/* Init int for resfresh display every x ms	*/
     8a6:	0e 94 a4 02 	call	0x548	; 0x548 <init_int>
	init_adc();			/* Init ADC */	
     8aa:	0e 94 ca 02 	call	0x594	; 0x594 <init_adc>
	
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );	/* Init Uart */
     8ae:	87 e6       	ldi	r24, 0x67	; 103
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <uart_init>
	sei();						/* Enable global interrupts for uart*/
     8b6:	78 94       	sei
	//uart_puts("\n\rInit Uart OK\n");
	
	device.current_limit = DEFAULT_CURRENT_LIMIT;	// set current limit
     8b8:	e6 e3       	ldi	r30, 0x36	; 54
     8ba:	f4 e0       	ldi	r31, 0x04	; 4
     8bc:	84 ef       	ldi	r24, 0xF4	; 244
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	93 87       	std	Z+11, r25	; 0x0b
     8c2:	82 87       	std	Z+10, r24	; 0x0a
	device.movementEnabled = FALSE;
     8c4:	14 86       	std	Z+12, r1	; 0x0c
	//uart_puts("MoveItAll hand ready!");		/* Print version number	*/
	//print_float(VERSION,1);
	
	//set_motor_dir(FALSE);
	//set_motor_speed(127);//50%
	device.setpoint_angle = 50;
     8c6:	82 e3       	ldi	r24, 0x32	; 50
     8c8:	82 83       	std	Z+2, r24	; 0x02
	
	while(1)
	{	
		get_serial();
     8ca:	0e 94 51 02 	call	0x4a2	; 0x4a2 <get_serial>
		if (command_ready) {process_command();}
     8ce:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <command_ready>
     8d2:	81 11       	cpse	r24, r1
     8d4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <process_command>
		
		if (check_movement)
     8d8:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <check_movement>
     8dc:	88 23       	and	r24, r24
     8de:	21 f0       	breq	.+8      	; 0x8e8 <main+0x46>
		{
			p_loop();	// 	do p loop stuff
     8e0:	0e 94 8e 03 	call	0x71c	; 0x71c <p_loop>
			check_movement = FALSE;
     8e4:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <check_movement>
		}
		
		check_auto_movement();	// Check if it has to do auto movement
     8e8:	0e 94 29 04 	call	0x852	; 0x852 <check_auto_movement>
		
		if (print_counter == REFRESH_LOOP_MS)
     8ec:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <print_counter>
     8f0:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <print_counter+0x1>
     8f4:	84 3f       	cpi	r24, 0xF4	; 244
     8f6:	91 40       	sbci	r25, 0x01	; 1
     8f8:	31 f4       	brne	.+12     	; 0x906 <__stack+0x7>
		{
			print_values();
     8fa:	0e 94 3a 03 	call	0x674	; 0x674 <print_values>
			//print_HMI();
			print_counter = 0;
     8fe:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <print_counter+0x1>
     902:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <print_counter>
		}
		print_counter++;	
     906:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <print_counter>
     90a:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <print_counter+0x1>
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <print_counter+0x1>
     914:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <print_counter>
		
	}
     918:	d8 cf       	rjmp	.-80     	; 0x8ca <main+0x28>

0000091a <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     91a:	1f 92       	push	r1
     91c:	0f 92       	push	r0
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	0f 92       	push	r0
     922:	11 24       	eor	r1, r1
     924:	2f 93       	push	r18
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     92e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
     932:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     936:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     938:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <UART_RxHead>
     93c:	ef 5f       	subi	r30, 0xFF	; 255
     93e:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
     940:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <UART_RxTail>
     944:	e9 17       	cp	r30, r25
     946:	39 f0       	breq	.+14     	; 0x956 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     948:	e0 93 a5 02 	sts	0x02A5, r30	; 0x8002a5 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	e8 55       	subi	r30, 0x58	; 88
     950:	fd 4f       	sbci	r31, 0xFD	; 253
     952:	20 83       	st	Z, r18
     954:	01 c0       	rjmp	.+2      	; 0x958 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     956:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
     958:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <UART_LastRxError>
     95c:	89 2b       	or	r24, r25
     95e:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <UART_LastRxError>
}
     962:	ff 91       	pop	r31
     964:	ef 91       	pop	r30
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	2f 91       	pop	r18
     96c:	0f 90       	pop	r0
     96e:	0f be       	out	0x3f, r0	; 63
     970:	0f 90       	pop	r0
     972:	1f 90       	pop	r1
     974:	18 95       	reti

00000976 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     976:	1f 92       	push	r1
     978:	0f 92       	push	r0
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	0f 92       	push	r0
     97e:	11 24       	eor	r1, r1
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	ef 93       	push	r30
     986:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     988:	90 91 a7 02 	lds	r25, 0x02A7	; 0x8002a7 <UART_TxHead>
     98c:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <UART_TxTail>
     990:	98 17       	cp	r25, r24
     992:	69 f0       	breq	.+26     	; 0x9ae <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     994:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <UART_TxTail>
     998:	ef 5f       	subi	r30, 0xFF	; 255
     99a:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     99c:	e0 93 a6 02 	sts	0x02A6, r30	; 0x8002a6 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	e8 51       	subi	r30, 0x18	; 24
     9a4:	fd 4f       	sbci	r31, 0xFD	; 253
     9a6:	80 81       	ld	r24, Z
     9a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     9ae:	e1 ec       	ldi	r30, 0xC1	; 193
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	8f 7d       	andi	r24, 0xDF	; 223
     9b6:	80 83       	st	Z, r24
    }
}
     9b8:	ff 91       	pop	r31
     9ba:	ef 91       	pop	r30
     9bc:	9f 91       	pop	r25
     9be:	8f 91       	pop	r24
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti

000009ca <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     9ca:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <UART_TxHead>
    UART_TxTail = 0;
     9ce:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <UART_TxTail>
    UART_RxHead = 0;
     9d2:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <UART_RxHead>
    UART_RxTail = 0;
     9d6:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <UART_RxTail>
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     9da:	99 23       	and	r25, r25
     9dc:	24 f4       	brge	.+8      	; 0x9e6 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
     9de:	22 e0       	ldi	r18, 0x02	; 2
     9e0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   		baudrate &= ~0x8000;
     9e4:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
     9e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (unsigned char) baudrate;
     9ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     9ee:	88 e9       	ldi	r24, 0x98	; 152
     9f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
     9f4:	86 e0       	ldi	r24, 0x06	; 6
     9f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     9fa:	08 95       	ret

000009fc <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     9fc:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <UART_RxHead>
     a00:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <UART_RxTail>
     a04:	98 17       	cp	r25, r24
     a06:	81 f0       	breq	.+32     	; 0xa28 <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     a08:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <UART_RxTail>
     a0c:	ef 5f       	subi	r30, 0xFF	; 255
     a0e:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
     a10:	e0 93 a4 02 	sts	0x02A4, r30	; 0x8002a4 <UART_RxTail>
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	e8 55       	subi	r30, 0x58	; 88
     a18:	fd 4f       	sbci	r31, 0xFD	; 253
     a1a:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
     a1c:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <UART_LastRxError>
    UART_LastRxError = 0;
     a20:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <UART_LastRxError>
    return data;
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
     a2c:	08 95       	ret

00000a2e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     a2e:	20 91 a7 02 	lds	r18, 0x02A7	; 0x8002a7 <UART_TxHead>
     a32:	2f 5f       	subi	r18, 0xFF	; 255
     a34:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     a36:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <UART_TxTail>
     a3a:	29 17       	cp	r18, r25
     a3c:	e1 f3       	breq	.-8      	; 0xa36 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     a3e:	e2 2f       	mov	r30, r18
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	e8 51       	subi	r30, 0x18	; 24
     a44:	fd 4f       	sbci	r31, 0xFD	; 253
     a46:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     a48:	20 93 a7 02 	sts	0x02A7, r18	; 0x8002a7 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     a4c:	e1 ec       	ldi	r30, 0xC1	; 193
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	80 62       	ori	r24, 0x20	; 32
     a54:	80 83       	st	Z, r24
     a56:	08 95       	ret

00000a58 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
    while (*s) 
     a5e:	88 81       	ld	r24, Y
     a60:	88 23       	and	r24, r24
     a62:	31 f0       	breq	.+12     	; 0xa70 <uart_puts+0x18>
     a64:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
     a66:	0e 94 17 05 	call	0xa2e	; 0xa2e <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     a6a:	89 91       	ld	r24, Y+
     a6c:	81 11       	cpse	r24, r1
     a6e:	fb cf       	rjmp	.-10     	; 0xa66 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <vfprintf>:
     a76:	a0 e1       	ldi	r26, 0x10	; 16
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	e1 e4       	ldi	r30, 0x41	; 65
     a7c:	f5 e0       	ldi	r31, 0x05	; 5
     a7e:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__prologue_saves__>
     a82:	7c 01       	movw	r14, r24
     a84:	1b 01       	movw	r2, r22
     a86:	6a 01       	movw	r12, r20
     a88:	fc 01       	movw	r30, r24
     a8a:	17 82       	std	Z+7, r1	; 0x07
     a8c:	16 82       	std	Z+6, r1	; 0x06
     a8e:	83 81       	ldd	r24, Z+3	; 0x03
     a90:	81 ff       	sbrs	r24, 1
     a92:	44 c3       	rjmp	.+1672   	; 0x111c <vfprintf+0x6a6>
     a94:	9e 01       	movw	r18, r28
     a96:	2f 5f       	subi	r18, 0xFF	; 255
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	39 01       	movw	r6, r18
     a9c:	f7 01       	movw	r30, r14
     a9e:	93 81       	ldd	r25, Z+3	; 0x03
     aa0:	f1 01       	movw	r30, r2
     aa2:	93 fd       	sbrc	r25, 3
     aa4:	85 91       	lpm	r24, Z+
     aa6:	93 ff       	sbrs	r25, 3
     aa8:	81 91       	ld	r24, Z+
     aaa:	1f 01       	movw	r2, r30
     aac:	88 23       	and	r24, r24
     aae:	09 f4       	brne	.+2      	; 0xab2 <vfprintf+0x3c>
     ab0:	31 c3       	rjmp	.+1634   	; 0x1114 <vfprintf+0x69e>
     ab2:	85 32       	cpi	r24, 0x25	; 37
     ab4:	39 f4       	brne	.+14     	; 0xac4 <vfprintf+0x4e>
     ab6:	93 fd       	sbrc	r25, 3
     ab8:	85 91       	lpm	r24, Z+
     aba:	93 ff       	sbrs	r25, 3
     abc:	81 91       	ld	r24, Z+
     abe:	1f 01       	movw	r2, r30
     ac0:	85 32       	cpi	r24, 0x25	; 37
     ac2:	39 f4       	brne	.+14     	; 0xad2 <vfprintf+0x5c>
     ac4:	b7 01       	movw	r22, r14
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     acc:	56 01       	movw	r10, r12
     ace:	65 01       	movw	r12, r10
     ad0:	e5 cf       	rjmp	.-54     	; 0xa9c <vfprintf+0x26>
     ad2:	10 e0       	ldi	r17, 0x00	; 0
     ad4:	51 2c       	mov	r5, r1
     ad6:	91 2c       	mov	r9, r1
     ad8:	ff e1       	ldi	r31, 0x1F	; 31
     ada:	f9 15       	cp	r31, r9
     adc:	d8 f0       	brcs	.+54     	; 0xb14 <vfprintf+0x9e>
     ade:	8b 32       	cpi	r24, 0x2B	; 43
     ae0:	79 f0       	breq	.+30     	; 0xb00 <vfprintf+0x8a>
     ae2:	38 f4       	brcc	.+14     	; 0xaf2 <vfprintf+0x7c>
     ae4:	80 32       	cpi	r24, 0x20	; 32
     ae6:	79 f0       	breq	.+30     	; 0xb06 <vfprintf+0x90>
     ae8:	83 32       	cpi	r24, 0x23	; 35
     aea:	a1 f4       	brne	.+40     	; 0xb14 <vfprintf+0x9e>
     aec:	f9 2d       	mov	r31, r9
     aee:	f0 61       	ori	r31, 0x10	; 16
     af0:	2e c0       	rjmp	.+92     	; 0xb4e <vfprintf+0xd8>
     af2:	8d 32       	cpi	r24, 0x2D	; 45
     af4:	61 f0       	breq	.+24     	; 0xb0e <vfprintf+0x98>
     af6:	80 33       	cpi	r24, 0x30	; 48
     af8:	69 f4       	brne	.+26     	; 0xb14 <vfprintf+0x9e>
     afa:	29 2d       	mov	r18, r9
     afc:	21 60       	ori	r18, 0x01	; 1
     afe:	2d c0       	rjmp	.+90     	; 0xb5a <vfprintf+0xe4>
     b00:	39 2d       	mov	r19, r9
     b02:	32 60       	ori	r19, 0x02	; 2
     b04:	93 2e       	mov	r9, r19
     b06:	89 2d       	mov	r24, r9
     b08:	84 60       	ori	r24, 0x04	; 4
     b0a:	98 2e       	mov	r9, r24
     b0c:	2a c0       	rjmp	.+84     	; 0xb62 <vfprintf+0xec>
     b0e:	e9 2d       	mov	r30, r9
     b10:	e8 60       	ori	r30, 0x08	; 8
     b12:	15 c0       	rjmp	.+42     	; 0xb3e <vfprintf+0xc8>
     b14:	97 fc       	sbrc	r9, 7
     b16:	2d c0       	rjmp	.+90     	; 0xb72 <vfprintf+0xfc>
     b18:	20 ed       	ldi	r18, 0xD0	; 208
     b1a:	28 0f       	add	r18, r24
     b1c:	2a 30       	cpi	r18, 0x0A	; 10
     b1e:	88 f4       	brcc	.+34     	; 0xb42 <vfprintf+0xcc>
     b20:	96 fe       	sbrs	r9, 6
     b22:	06 c0       	rjmp	.+12     	; 0xb30 <vfprintf+0xba>
     b24:	3a e0       	ldi	r19, 0x0A	; 10
     b26:	13 9f       	mul	r17, r19
     b28:	20 0d       	add	r18, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	12 2f       	mov	r17, r18
     b2e:	19 c0       	rjmp	.+50     	; 0xb62 <vfprintf+0xec>
     b30:	8a e0       	ldi	r24, 0x0A	; 10
     b32:	58 9e       	mul	r5, r24
     b34:	20 0d       	add	r18, r0
     b36:	11 24       	eor	r1, r1
     b38:	52 2e       	mov	r5, r18
     b3a:	e9 2d       	mov	r30, r9
     b3c:	e0 62       	ori	r30, 0x20	; 32
     b3e:	9e 2e       	mov	r9, r30
     b40:	10 c0       	rjmp	.+32     	; 0xb62 <vfprintf+0xec>
     b42:	8e 32       	cpi	r24, 0x2E	; 46
     b44:	31 f4       	brne	.+12     	; 0xb52 <vfprintf+0xdc>
     b46:	96 fc       	sbrc	r9, 6
     b48:	e5 c2       	rjmp	.+1482   	; 0x1114 <vfprintf+0x69e>
     b4a:	f9 2d       	mov	r31, r9
     b4c:	f0 64       	ori	r31, 0x40	; 64
     b4e:	9f 2e       	mov	r9, r31
     b50:	08 c0       	rjmp	.+16     	; 0xb62 <vfprintf+0xec>
     b52:	8c 36       	cpi	r24, 0x6C	; 108
     b54:	21 f4       	brne	.+8      	; 0xb5e <vfprintf+0xe8>
     b56:	29 2d       	mov	r18, r9
     b58:	20 68       	ori	r18, 0x80	; 128
     b5a:	92 2e       	mov	r9, r18
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <vfprintf+0xec>
     b5e:	88 36       	cpi	r24, 0x68	; 104
     b60:	41 f4       	brne	.+16     	; 0xb72 <vfprintf+0xfc>
     b62:	f1 01       	movw	r30, r2
     b64:	93 fd       	sbrc	r25, 3
     b66:	85 91       	lpm	r24, Z+
     b68:	93 ff       	sbrs	r25, 3
     b6a:	81 91       	ld	r24, Z+
     b6c:	1f 01       	movw	r2, r30
     b6e:	81 11       	cpse	r24, r1
     b70:	b3 cf       	rjmp	.-154    	; 0xad8 <vfprintf+0x62>
     b72:	9b eb       	ldi	r25, 0xBB	; 187
     b74:	98 0f       	add	r25, r24
     b76:	93 30       	cpi	r25, 0x03	; 3
     b78:	20 f4       	brcc	.+8      	; 0xb82 <vfprintf+0x10c>
     b7a:	99 2d       	mov	r25, r9
     b7c:	90 61       	ori	r25, 0x10	; 16
     b7e:	80 5e       	subi	r24, 0xE0	; 224
     b80:	07 c0       	rjmp	.+14     	; 0xb90 <vfprintf+0x11a>
     b82:	9b e9       	ldi	r25, 0x9B	; 155
     b84:	98 0f       	add	r25, r24
     b86:	93 30       	cpi	r25, 0x03	; 3
     b88:	08 f0       	brcs	.+2      	; 0xb8c <vfprintf+0x116>
     b8a:	66 c1       	rjmp	.+716    	; 0xe58 <vfprintf+0x3e2>
     b8c:	99 2d       	mov	r25, r9
     b8e:	9f 7e       	andi	r25, 0xEF	; 239
     b90:	96 ff       	sbrs	r25, 6
     b92:	16 e0       	ldi	r17, 0x06	; 6
     b94:	9f 73       	andi	r25, 0x3F	; 63
     b96:	99 2e       	mov	r9, r25
     b98:	85 36       	cpi	r24, 0x65	; 101
     b9a:	19 f4       	brne	.+6      	; 0xba2 <vfprintf+0x12c>
     b9c:	90 64       	ori	r25, 0x40	; 64
     b9e:	99 2e       	mov	r9, r25
     ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <vfprintf+0x13c>
     ba2:	86 36       	cpi	r24, 0x66	; 102
     ba4:	21 f4       	brne	.+8      	; 0xbae <vfprintf+0x138>
     ba6:	39 2f       	mov	r19, r25
     ba8:	30 68       	ori	r19, 0x80	; 128
     baa:	93 2e       	mov	r9, r19
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <vfprintf+0x13c>
     bae:	11 11       	cpse	r17, r1
     bb0:	11 50       	subi	r17, 0x01	; 1
     bb2:	97 fe       	sbrs	r9, 7
     bb4:	07 c0       	rjmp	.+14     	; 0xbc4 <vfprintf+0x14e>
     bb6:	1c 33       	cpi	r17, 0x3C	; 60
     bb8:	50 f4       	brcc	.+20     	; 0xbce <vfprintf+0x158>
     bba:	44 24       	eor	r4, r4
     bbc:	43 94       	inc	r4
     bbe:	41 0e       	add	r4, r17
     bc0:	27 e0       	ldi	r18, 0x07	; 7
     bc2:	0b c0       	rjmp	.+22     	; 0xbda <vfprintf+0x164>
     bc4:	18 30       	cpi	r17, 0x08	; 8
     bc6:	38 f0       	brcs	.+14     	; 0xbd6 <vfprintf+0x160>
     bc8:	27 e0       	ldi	r18, 0x07	; 7
     bca:	17 e0       	ldi	r17, 0x07	; 7
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <vfprintf+0x162>
     bce:	27 e0       	ldi	r18, 0x07	; 7
     bd0:	9c e3       	ldi	r25, 0x3C	; 60
     bd2:	49 2e       	mov	r4, r25
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <vfprintf+0x164>
     bd6:	21 2f       	mov	r18, r17
     bd8:	41 2c       	mov	r4, r1
     bda:	56 01       	movw	r10, r12
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	a8 0e       	add	r10, r24
     be0:	b1 1c       	adc	r11, r1
     be2:	f6 01       	movw	r30, r12
     be4:	60 81       	ld	r22, Z
     be6:	71 81       	ldd	r23, Z+1	; 0x01
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	04 2d       	mov	r16, r4
     bee:	a3 01       	movw	r20, r6
     bf0:	0e 94 22 09 	call	0x1244	; 0x1244 <__ftoa_engine>
     bf4:	6c 01       	movw	r12, r24
     bf6:	f9 81       	ldd	r31, Y+1	; 0x01
     bf8:	fc 87       	std	Y+12, r31	; 0x0c
     bfa:	f0 ff       	sbrs	r31, 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <vfprintf+0x18c>
     bfe:	f3 ff       	sbrs	r31, 3
     c00:	06 c0       	rjmp	.+12     	; 0xc0e <vfprintf+0x198>
     c02:	91 fc       	sbrc	r9, 1
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <vfprintf+0x19c>
     c06:	92 fe       	sbrs	r9, 2
     c08:	06 c0       	rjmp	.+12     	; 0xc16 <vfprintf+0x1a0>
     c0a:	00 e2       	ldi	r16, 0x20	; 32
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <vfprintf+0x1a2>
     c0e:	0d e2       	ldi	r16, 0x2D	; 45
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <vfprintf+0x1a2>
     c12:	0b e2       	ldi	r16, 0x2B	; 43
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <vfprintf+0x1a2>
     c16:	00 e0       	ldi	r16, 0x00	; 0
     c18:	8c 85       	ldd	r24, Y+12	; 0x0c
     c1a:	8c 70       	andi	r24, 0x0C	; 12
     c1c:	19 f0       	breq	.+6      	; 0xc24 <vfprintf+0x1ae>
     c1e:	01 11       	cpse	r16, r1
     c20:	5a c2       	rjmp	.+1204   	; 0x10d6 <vfprintf+0x660>
     c22:	9b c2       	rjmp	.+1334   	; 0x115a <vfprintf+0x6e4>
     c24:	97 fe       	sbrs	r9, 7
     c26:	10 c0       	rjmp	.+32     	; 0xc48 <vfprintf+0x1d2>
     c28:	4c 0c       	add	r4, r12
     c2a:	fc 85       	ldd	r31, Y+12	; 0x0c
     c2c:	f4 ff       	sbrs	r31, 4
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <vfprintf+0x1c2>
     c30:	8a 81       	ldd	r24, Y+2	; 0x02
     c32:	81 33       	cpi	r24, 0x31	; 49
     c34:	09 f4       	brne	.+2      	; 0xc38 <vfprintf+0x1c2>
     c36:	4a 94       	dec	r4
     c38:	14 14       	cp	r1, r4
     c3a:	74 f5       	brge	.+92     	; 0xc98 <vfprintf+0x222>
     c3c:	28 e0       	ldi	r18, 0x08	; 8
     c3e:	24 15       	cp	r18, r4
     c40:	78 f5       	brcc	.+94     	; 0xca0 <vfprintf+0x22a>
     c42:	88 e0       	ldi	r24, 0x08	; 8
     c44:	48 2e       	mov	r4, r24
     c46:	2c c0       	rjmp	.+88     	; 0xca0 <vfprintf+0x22a>
     c48:	96 fc       	sbrc	r9, 6
     c4a:	2a c0       	rjmp	.+84     	; 0xca0 <vfprintf+0x22a>
     c4c:	81 2f       	mov	r24, r17
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	8c 15       	cp	r24, r12
     c52:	9d 05       	cpc	r25, r13
     c54:	9c f0       	brlt	.+38     	; 0xc7c <vfprintf+0x206>
     c56:	3c ef       	ldi	r19, 0xFC	; 252
     c58:	c3 16       	cp	r12, r19
     c5a:	3f ef       	ldi	r19, 0xFF	; 255
     c5c:	d3 06       	cpc	r13, r19
     c5e:	74 f0       	brlt	.+28     	; 0xc7c <vfprintf+0x206>
     c60:	89 2d       	mov	r24, r9
     c62:	80 68       	ori	r24, 0x80	; 128
     c64:	98 2e       	mov	r9, r24
     c66:	0a c0       	rjmp	.+20     	; 0xc7c <vfprintf+0x206>
     c68:	e2 e0       	ldi	r30, 0x02	; 2
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	ec 0f       	add	r30, r28
     c6e:	fd 1f       	adc	r31, r29
     c70:	e1 0f       	add	r30, r17
     c72:	f1 1d       	adc	r31, r1
     c74:	80 81       	ld	r24, Z
     c76:	80 33       	cpi	r24, 0x30	; 48
     c78:	19 f4       	brne	.+6      	; 0xc80 <vfprintf+0x20a>
     c7a:	11 50       	subi	r17, 0x01	; 1
     c7c:	11 11       	cpse	r17, r1
     c7e:	f4 cf       	rjmp	.-24     	; 0xc68 <vfprintf+0x1f2>
     c80:	97 fe       	sbrs	r9, 7
     c82:	0e c0       	rjmp	.+28     	; 0xca0 <vfprintf+0x22a>
     c84:	44 24       	eor	r4, r4
     c86:	43 94       	inc	r4
     c88:	41 0e       	add	r4, r17
     c8a:	81 2f       	mov	r24, r17
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	c8 16       	cp	r12, r24
     c90:	d9 06       	cpc	r13, r25
     c92:	2c f4       	brge	.+10     	; 0xc9e <vfprintf+0x228>
     c94:	1c 19       	sub	r17, r12
     c96:	04 c0       	rjmp	.+8      	; 0xca0 <vfprintf+0x22a>
     c98:	44 24       	eor	r4, r4
     c9a:	43 94       	inc	r4
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <vfprintf+0x22a>
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	97 fe       	sbrs	r9, 7
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <vfprintf+0x23a>
     ca4:	1c 14       	cp	r1, r12
     ca6:	1d 04       	cpc	r1, r13
     ca8:	34 f4       	brge	.+12     	; 0xcb6 <vfprintf+0x240>
     caa:	c6 01       	movw	r24, r12
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	05 c0       	rjmp	.+10     	; 0xcba <vfprintf+0x244>
     cb0:	85 e0       	ldi	r24, 0x05	; 5
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <vfprintf+0x244>
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	01 11       	cpse	r16, r1
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	11 23       	and	r17, r17
     cc0:	31 f0       	breq	.+12     	; 0xcce <vfprintf+0x258>
     cc2:	21 2f       	mov	r18, r17
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	2f 5f       	subi	r18, 0xFF	; 255
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	82 0f       	add	r24, r18
     ccc:	93 1f       	adc	r25, r19
     cce:	25 2d       	mov	r18, r5
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	82 17       	cp	r24, r18
     cd4:	93 07       	cpc	r25, r19
     cd6:	14 f4       	brge	.+4      	; 0xcdc <vfprintf+0x266>
     cd8:	58 1a       	sub	r5, r24
     cda:	01 c0       	rjmp	.+2      	; 0xcde <vfprintf+0x268>
     cdc:	51 2c       	mov	r5, r1
     cde:	89 2d       	mov	r24, r9
     ce0:	89 70       	andi	r24, 0x09	; 9
     ce2:	49 f4       	brne	.+18     	; 0xcf6 <vfprintf+0x280>
     ce4:	55 20       	and	r5, r5
     ce6:	39 f0       	breq	.+14     	; 0xcf6 <vfprintf+0x280>
     ce8:	b7 01       	movw	r22, r14
     cea:	80 e2       	ldi	r24, 0x20	; 32
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     cf2:	5a 94       	dec	r5
     cf4:	f7 cf       	rjmp	.-18     	; 0xce4 <vfprintf+0x26e>
     cf6:	00 23       	and	r16, r16
     cf8:	29 f0       	breq	.+10     	; 0xd04 <vfprintf+0x28e>
     cfa:	b7 01       	movw	r22, r14
     cfc:	80 2f       	mov	r24, r16
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     d04:	93 fc       	sbrc	r9, 3
     d06:	09 c0       	rjmp	.+18     	; 0xd1a <vfprintf+0x2a4>
     d08:	55 20       	and	r5, r5
     d0a:	39 f0       	breq	.+14     	; 0xd1a <vfprintf+0x2a4>
     d0c:	b7 01       	movw	r22, r14
     d0e:	80 e3       	ldi	r24, 0x30	; 48
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     d16:	5a 94       	dec	r5
     d18:	f7 cf       	rjmp	.-18     	; 0xd08 <vfprintf+0x292>
     d1a:	97 fe       	sbrs	r9, 7
     d1c:	4c c0       	rjmp	.+152    	; 0xdb6 <vfprintf+0x340>
     d1e:	46 01       	movw	r8, r12
     d20:	d7 fe       	sbrs	r13, 7
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <vfprintf+0x2b2>
     d24:	81 2c       	mov	r8, r1
     d26:	91 2c       	mov	r9, r1
     d28:	c6 01       	movw	r24, r12
     d2a:	88 19       	sub	r24, r8
     d2c:	99 09       	sbc	r25, r9
     d2e:	f3 01       	movw	r30, r6
     d30:	e8 0f       	add	r30, r24
     d32:	f9 1f       	adc	r31, r25
     d34:	fe 87       	std	Y+14, r31	; 0x0e
     d36:	ed 87       	std	Y+13, r30	; 0x0d
     d38:	96 01       	movw	r18, r12
     d3a:	24 19       	sub	r18, r4
     d3c:	31 09       	sbc	r19, r1
     d3e:	38 8b       	std	Y+16, r19	; 0x10
     d40:	2f 87       	std	Y+15, r18	; 0x0f
     d42:	01 2f       	mov	r16, r17
     d44:	10 e0       	ldi	r17, 0x00	; 0
     d46:	11 95       	neg	r17
     d48:	01 95       	neg	r16
     d4a:	11 09       	sbc	r17, r1
     d4c:	3f ef       	ldi	r19, 0xFF	; 255
     d4e:	83 16       	cp	r8, r19
     d50:	93 06       	cpc	r9, r19
     d52:	29 f4       	brne	.+10     	; 0xd5e <vfprintf+0x2e8>
     d54:	b7 01       	movw	r22, r14
     d56:	8e e2       	ldi	r24, 0x2E	; 46
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     d5e:	c8 14       	cp	r12, r8
     d60:	d9 04       	cpc	r13, r9
     d62:	4c f0       	brlt	.+18     	; 0xd76 <vfprintf+0x300>
     d64:	8f 85       	ldd	r24, Y+15	; 0x0f
     d66:	98 89       	ldd	r25, Y+16	; 0x10
     d68:	88 15       	cp	r24, r8
     d6a:	99 05       	cpc	r25, r9
     d6c:	24 f4       	brge	.+8      	; 0xd76 <vfprintf+0x300>
     d6e:	ed 85       	ldd	r30, Y+13	; 0x0d
     d70:	fe 85       	ldd	r31, Y+14	; 0x0e
     d72:	81 81       	ldd	r24, Z+1	; 0x01
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <vfprintf+0x302>
     d76:	80 e3       	ldi	r24, 0x30	; 48
     d78:	f1 e0       	ldi	r31, 0x01	; 1
     d7a:	8f 1a       	sub	r8, r31
     d7c:	91 08       	sbc	r9, r1
     d7e:	2d 85       	ldd	r18, Y+13	; 0x0d
     d80:	3e 85       	ldd	r19, Y+14	; 0x0e
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	3e 87       	std	Y+14, r19	; 0x0e
     d88:	2d 87       	std	Y+13, r18	; 0x0d
     d8a:	80 16       	cp	r8, r16
     d8c:	91 06       	cpc	r9, r17
     d8e:	2c f0       	brlt	.+10     	; 0xd9a <vfprintf+0x324>
     d90:	b7 01       	movw	r22, r14
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     d98:	d9 cf       	rjmp	.-78     	; 0xd4c <vfprintf+0x2d6>
     d9a:	c8 14       	cp	r12, r8
     d9c:	d9 04       	cpc	r13, r9
     d9e:	41 f4       	brne	.+16     	; 0xdb0 <vfprintf+0x33a>
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	96 33       	cpi	r25, 0x36	; 54
     da4:	20 f4       	brcc	.+8      	; 0xdae <vfprintf+0x338>
     da6:	95 33       	cpi	r25, 0x35	; 53
     da8:	19 f4       	brne	.+6      	; 0xdb0 <vfprintf+0x33a>
     daa:	3c 85       	ldd	r19, Y+12	; 0x0c
     dac:	34 ff       	sbrs	r19, 4
     dae:	81 e3       	ldi	r24, 0x31	; 49
     db0:	b7 01       	movw	r22, r14
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	4e c0       	rjmp	.+156    	; 0xe52 <vfprintf+0x3dc>
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	81 33       	cpi	r24, 0x31	; 49
     dba:	19 f0       	breq	.+6      	; 0xdc2 <vfprintf+0x34c>
     dbc:	9c 85       	ldd	r25, Y+12	; 0x0c
     dbe:	9f 7e       	andi	r25, 0xEF	; 239
     dc0:	9c 87       	std	Y+12, r25	; 0x0c
     dc2:	b7 01       	movw	r22, r14
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     dca:	11 11       	cpse	r17, r1
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <vfprintf+0x362>
     dce:	94 fc       	sbrc	r9, 4
     dd0:	18 c0       	rjmp	.+48     	; 0xe02 <vfprintf+0x38c>
     dd2:	85 e6       	ldi	r24, 0x65	; 101
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	17 c0       	rjmp	.+46     	; 0xe06 <vfprintf+0x390>
     dd8:	b7 01       	movw	r22, r14
     dda:	8e e2       	ldi	r24, 0x2E	; 46
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     de2:	1e 5f       	subi	r17, 0xFE	; 254
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	01 e0       	ldi	r16, 0x01	; 1
     de8:	08 0f       	add	r16, r24
     dea:	f3 01       	movw	r30, r6
     dec:	e8 0f       	add	r30, r24
     dee:	f1 1d       	adc	r31, r1
     df0:	80 81       	ld	r24, Z
     df2:	b7 01       	movw	r22, r14
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     dfa:	80 2f       	mov	r24, r16
     dfc:	01 13       	cpse	r16, r17
     dfe:	f3 cf       	rjmp	.-26     	; 0xde6 <vfprintf+0x370>
     e00:	e6 cf       	rjmp	.-52     	; 0xdce <vfprintf+0x358>
     e02:	85 e4       	ldi	r24, 0x45	; 69
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	b7 01       	movw	r22, r14
     e08:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     e0c:	d7 fc       	sbrc	r13, 7
     e0e:	06 c0       	rjmp	.+12     	; 0xe1c <vfprintf+0x3a6>
     e10:	c1 14       	cp	r12, r1
     e12:	d1 04       	cpc	r13, r1
     e14:	41 f4       	brne	.+16     	; 0xe26 <vfprintf+0x3b0>
     e16:	ec 85       	ldd	r30, Y+12	; 0x0c
     e18:	e4 ff       	sbrs	r30, 4
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <vfprintf+0x3b0>
     e1c:	d1 94       	neg	r13
     e1e:	c1 94       	neg	r12
     e20:	d1 08       	sbc	r13, r1
     e22:	8d e2       	ldi	r24, 0x2D	; 45
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <vfprintf+0x3b2>
     e26:	8b e2       	ldi	r24, 0x2B	; 43
     e28:	b7 01       	movw	r22, r14
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     e30:	80 e3       	ldi	r24, 0x30	; 48
     e32:	2a e0       	ldi	r18, 0x0A	; 10
     e34:	c2 16       	cp	r12, r18
     e36:	d1 04       	cpc	r13, r1
     e38:	2c f0       	brlt	.+10     	; 0xe44 <vfprintf+0x3ce>
     e3a:	8f 5f       	subi	r24, 0xFF	; 255
     e3c:	fa e0       	ldi	r31, 0x0A	; 10
     e3e:	cf 1a       	sub	r12, r31
     e40:	d1 08       	sbc	r13, r1
     e42:	f7 cf       	rjmp	.-18     	; 0xe32 <vfprintf+0x3bc>
     e44:	b7 01       	movw	r22, r14
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     e4c:	b7 01       	movw	r22, r14
     e4e:	c6 01       	movw	r24, r12
     e50:	c0 96       	adiw	r24, 0x30	; 48
     e52:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     e56:	54 c1       	rjmp	.+680    	; 0x1100 <vfprintf+0x68a>
     e58:	83 36       	cpi	r24, 0x63	; 99
     e5a:	31 f0       	breq	.+12     	; 0xe68 <vfprintf+0x3f2>
     e5c:	83 37       	cpi	r24, 0x73	; 115
     e5e:	79 f0       	breq	.+30     	; 0xe7e <vfprintf+0x408>
     e60:	83 35       	cpi	r24, 0x53	; 83
     e62:	09 f0       	breq	.+2      	; 0xe66 <vfprintf+0x3f0>
     e64:	56 c0       	rjmp	.+172    	; 0xf12 <vfprintf+0x49c>
     e66:	20 c0       	rjmp	.+64     	; 0xea8 <vfprintf+0x432>
     e68:	56 01       	movw	r10, r12
     e6a:	32 e0       	ldi	r19, 0x02	; 2
     e6c:	a3 0e       	add	r10, r19
     e6e:	b1 1c       	adc	r11, r1
     e70:	f6 01       	movw	r30, r12
     e72:	80 81       	ld	r24, Z
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	01 e0       	ldi	r16, 0x01	; 1
     e78:	10 e0       	ldi	r17, 0x00	; 0
     e7a:	63 01       	movw	r12, r6
     e7c:	12 c0       	rjmp	.+36     	; 0xea2 <vfprintf+0x42c>
     e7e:	56 01       	movw	r10, r12
     e80:	f2 e0       	ldi	r31, 0x02	; 2
     e82:	af 0e       	add	r10, r31
     e84:	b1 1c       	adc	r11, r1
     e86:	f6 01       	movw	r30, r12
     e88:	c0 80       	ld	r12, Z
     e8a:	d1 80       	ldd	r13, Z+1	; 0x01
     e8c:	96 fe       	sbrs	r9, 6
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <vfprintf+0x420>
     e90:	61 2f       	mov	r22, r17
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <vfprintf+0x424>
     e96:	6f ef       	ldi	r22, 0xFF	; 255
     e98:	7f ef       	ldi	r23, 0xFF	; 255
     e9a:	c6 01       	movw	r24, r12
     e9c:	0e 94 17 0a 	call	0x142e	; 0x142e <strnlen>
     ea0:	8c 01       	movw	r16, r24
     ea2:	f9 2d       	mov	r31, r9
     ea4:	ff 77       	andi	r31, 0x7F	; 127
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <vfprintf+0x45a>
     ea8:	56 01       	movw	r10, r12
     eaa:	22 e0       	ldi	r18, 0x02	; 2
     eac:	a2 0e       	add	r10, r18
     eae:	b1 1c       	adc	r11, r1
     eb0:	f6 01       	movw	r30, r12
     eb2:	c0 80       	ld	r12, Z
     eb4:	d1 80       	ldd	r13, Z+1	; 0x01
     eb6:	96 fe       	sbrs	r9, 6
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <vfprintf+0x44a>
     eba:	61 2f       	mov	r22, r17
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x44e>
     ec0:	6f ef       	ldi	r22, 0xFF	; 255
     ec2:	7f ef       	ldi	r23, 0xFF	; 255
     ec4:	c6 01       	movw	r24, r12
     ec6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <strnlen_P>
     eca:	8c 01       	movw	r16, r24
     ecc:	f9 2d       	mov	r31, r9
     ece:	f0 68       	ori	r31, 0x80	; 128
     ed0:	9f 2e       	mov	r9, r31
     ed2:	f3 fd       	sbrc	r31, 3
     ed4:	1a c0       	rjmp	.+52     	; 0xf0a <vfprintf+0x494>
     ed6:	85 2d       	mov	r24, r5
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	08 17       	cp	r16, r24
     edc:	19 07       	cpc	r17, r25
     ede:	a8 f4       	brcc	.+42     	; 0xf0a <vfprintf+0x494>
     ee0:	b7 01       	movw	r22, r14
     ee2:	80 e2       	ldi	r24, 0x20	; 32
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     eea:	5a 94       	dec	r5
     eec:	f4 cf       	rjmp	.-24     	; 0xed6 <vfprintf+0x460>
     eee:	f6 01       	movw	r30, r12
     ef0:	97 fc       	sbrc	r9, 7
     ef2:	85 91       	lpm	r24, Z+
     ef4:	97 fe       	sbrs	r9, 7
     ef6:	81 91       	ld	r24, Z+
     ef8:	6f 01       	movw	r12, r30
     efa:	b7 01       	movw	r22, r14
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
     f02:	51 10       	cpse	r5, r1
     f04:	5a 94       	dec	r5
     f06:	01 50       	subi	r16, 0x01	; 1
     f08:	11 09       	sbc	r17, r1
     f0a:	01 15       	cp	r16, r1
     f0c:	11 05       	cpc	r17, r1
     f0e:	79 f7       	brne	.-34     	; 0xeee <vfprintf+0x478>
     f10:	f7 c0       	rjmp	.+494    	; 0x1100 <vfprintf+0x68a>
     f12:	84 36       	cpi	r24, 0x64	; 100
     f14:	11 f0       	breq	.+4      	; 0xf1a <vfprintf+0x4a4>
     f16:	89 36       	cpi	r24, 0x69	; 105
     f18:	61 f5       	brne	.+88     	; 0xf72 <vfprintf+0x4fc>
     f1a:	56 01       	movw	r10, r12
     f1c:	97 fe       	sbrs	r9, 7
     f1e:	09 c0       	rjmp	.+18     	; 0xf32 <vfprintf+0x4bc>
     f20:	24 e0       	ldi	r18, 0x04	; 4
     f22:	a2 0e       	add	r10, r18
     f24:	b1 1c       	adc	r11, r1
     f26:	f6 01       	movw	r30, r12
     f28:	60 81       	ld	r22, Z
     f2a:	71 81       	ldd	r23, Z+1	; 0x01
     f2c:	82 81       	ldd	r24, Z+2	; 0x02
     f2e:	93 81       	ldd	r25, Z+3	; 0x03
     f30:	0a c0       	rjmp	.+20     	; 0xf46 <vfprintf+0x4d0>
     f32:	f2 e0       	ldi	r31, 0x02	; 2
     f34:	af 0e       	add	r10, r31
     f36:	b1 1c       	adc	r11, r1
     f38:	f6 01       	movw	r30, r12
     f3a:	60 81       	ld	r22, Z
     f3c:	71 81       	ldd	r23, Z+1	; 0x01
     f3e:	07 2e       	mov	r0, r23
     f40:	00 0c       	add	r0, r0
     f42:	88 0b       	sbc	r24, r24
     f44:	99 0b       	sbc	r25, r25
     f46:	f9 2d       	mov	r31, r9
     f48:	ff 76       	andi	r31, 0x6F	; 111
     f4a:	9f 2e       	mov	r9, r31
     f4c:	97 ff       	sbrs	r25, 7
     f4e:	09 c0       	rjmp	.+18     	; 0xf62 <vfprintf+0x4ec>
     f50:	90 95       	com	r25
     f52:	80 95       	com	r24
     f54:	70 95       	com	r23
     f56:	61 95       	neg	r22
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	8f 4f       	sbci	r24, 0xFF	; 255
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	f0 68       	ori	r31, 0x80	; 128
     f60:	9f 2e       	mov	r9, r31
     f62:	2a e0       	ldi	r18, 0x0A	; 10
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	a3 01       	movw	r20, r6
     f68:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__ultoa_invert>
     f6c:	c8 2e       	mov	r12, r24
     f6e:	c6 18       	sub	r12, r6
     f70:	3f c0       	rjmp	.+126    	; 0xff0 <vfprintf+0x57a>
     f72:	09 2d       	mov	r16, r9
     f74:	85 37       	cpi	r24, 0x75	; 117
     f76:	21 f4       	brne	.+8      	; 0xf80 <vfprintf+0x50a>
     f78:	0f 7e       	andi	r16, 0xEF	; 239
     f7a:	2a e0       	ldi	r18, 0x0A	; 10
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	1d c0       	rjmp	.+58     	; 0xfba <vfprintf+0x544>
     f80:	09 7f       	andi	r16, 0xF9	; 249
     f82:	8f 36       	cpi	r24, 0x6F	; 111
     f84:	91 f0       	breq	.+36     	; 0xfaa <vfprintf+0x534>
     f86:	18 f4       	brcc	.+6      	; 0xf8e <vfprintf+0x518>
     f88:	88 35       	cpi	r24, 0x58	; 88
     f8a:	59 f0       	breq	.+22     	; 0xfa2 <vfprintf+0x52c>
     f8c:	c3 c0       	rjmp	.+390    	; 0x1114 <vfprintf+0x69e>
     f8e:	80 37       	cpi	r24, 0x70	; 112
     f90:	19 f0       	breq	.+6      	; 0xf98 <vfprintf+0x522>
     f92:	88 37       	cpi	r24, 0x78	; 120
     f94:	11 f0       	breq	.+4      	; 0xf9a <vfprintf+0x524>
     f96:	be c0       	rjmp	.+380    	; 0x1114 <vfprintf+0x69e>
     f98:	00 61       	ori	r16, 0x10	; 16
     f9a:	04 ff       	sbrs	r16, 4
     f9c:	09 c0       	rjmp	.+18     	; 0xfb0 <vfprintf+0x53a>
     f9e:	04 60       	ori	r16, 0x04	; 4
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <vfprintf+0x53a>
     fa2:	94 fe       	sbrs	r9, 4
     fa4:	08 c0       	rjmp	.+16     	; 0xfb6 <vfprintf+0x540>
     fa6:	06 60       	ori	r16, 0x06	; 6
     fa8:	06 c0       	rjmp	.+12     	; 0xfb6 <vfprintf+0x540>
     faa:	28 e0       	ldi	r18, 0x08	; 8
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	05 c0       	rjmp	.+10     	; 0xfba <vfprintf+0x544>
     fb0:	20 e1       	ldi	r18, 0x10	; 16
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <vfprintf+0x544>
     fb6:	20 e1       	ldi	r18, 0x10	; 16
     fb8:	32 e0       	ldi	r19, 0x02	; 2
     fba:	56 01       	movw	r10, r12
     fbc:	07 ff       	sbrs	r16, 7
     fbe:	09 c0       	rjmp	.+18     	; 0xfd2 <vfprintf+0x55c>
     fc0:	84 e0       	ldi	r24, 0x04	; 4
     fc2:	a8 0e       	add	r10, r24
     fc4:	b1 1c       	adc	r11, r1
     fc6:	f6 01       	movw	r30, r12
     fc8:	60 81       	ld	r22, Z
     fca:	71 81       	ldd	r23, Z+1	; 0x01
     fcc:	82 81       	ldd	r24, Z+2	; 0x02
     fce:	93 81       	ldd	r25, Z+3	; 0x03
     fd0:	08 c0       	rjmp	.+16     	; 0xfe2 <vfprintf+0x56c>
     fd2:	f2 e0       	ldi	r31, 0x02	; 2
     fd4:	af 0e       	add	r10, r31
     fd6:	b1 1c       	adc	r11, r1
     fd8:	f6 01       	movw	r30, r12
     fda:	60 81       	ld	r22, Z
     fdc:	71 81       	ldd	r23, Z+1	; 0x01
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a3 01       	movw	r20, r6
     fe4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <__ultoa_invert>
     fe8:	c8 2e       	mov	r12, r24
     fea:	c6 18       	sub	r12, r6
     fec:	0f 77       	andi	r16, 0x7F	; 127
     fee:	90 2e       	mov	r9, r16
     ff0:	96 fe       	sbrs	r9, 6
     ff2:	0b c0       	rjmp	.+22     	; 0x100a <vfprintf+0x594>
     ff4:	09 2d       	mov	r16, r9
     ff6:	0e 7f       	andi	r16, 0xFE	; 254
     ff8:	c1 16       	cp	r12, r17
     ffa:	50 f4       	brcc	.+20     	; 0x1010 <vfprintf+0x59a>
     ffc:	94 fe       	sbrs	r9, 4
     ffe:	0a c0       	rjmp	.+20     	; 0x1014 <vfprintf+0x59e>
    1000:	92 fc       	sbrc	r9, 2
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <vfprintf+0x59e>
    1004:	09 2d       	mov	r16, r9
    1006:	0e 7e       	andi	r16, 0xEE	; 238
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <vfprintf+0x59e>
    100a:	dc 2c       	mov	r13, r12
    100c:	09 2d       	mov	r16, r9
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <vfprintf+0x5a0>
    1010:	dc 2c       	mov	r13, r12
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <vfprintf+0x5a0>
    1014:	d1 2e       	mov	r13, r17
    1016:	04 ff       	sbrs	r16, 4
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <vfprintf+0x5be>
    101a:	fe 01       	movw	r30, r28
    101c:	ec 0d       	add	r30, r12
    101e:	f1 1d       	adc	r31, r1
    1020:	80 81       	ld	r24, Z
    1022:	80 33       	cpi	r24, 0x30	; 48
    1024:	11 f4       	brne	.+4      	; 0x102a <vfprintf+0x5b4>
    1026:	09 7e       	andi	r16, 0xE9	; 233
    1028:	09 c0       	rjmp	.+18     	; 0x103c <vfprintf+0x5c6>
    102a:	02 ff       	sbrs	r16, 2
    102c:	06 c0       	rjmp	.+12     	; 0x103a <vfprintf+0x5c4>
    102e:	d3 94       	inc	r13
    1030:	d3 94       	inc	r13
    1032:	04 c0       	rjmp	.+8      	; 0x103c <vfprintf+0x5c6>
    1034:	80 2f       	mov	r24, r16
    1036:	86 78       	andi	r24, 0x86	; 134
    1038:	09 f0       	breq	.+2      	; 0x103c <vfprintf+0x5c6>
    103a:	d3 94       	inc	r13
    103c:	03 fd       	sbrc	r16, 3
    103e:	11 c0       	rjmp	.+34     	; 0x1062 <vfprintf+0x5ec>
    1040:	00 ff       	sbrs	r16, 0
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <vfprintf+0x5da>
    1044:	1c 2d       	mov	r17, r12
    1046:	d5 14       	cp	r13, r5
    1048:	80 f4       	brcc	.+32     	; 0x106a <vfprintf+0x5f4>
    104a:	15 0d       	add	r17, r5
    104c:	1d 19       	sub	r17, r13
    104e:	0d c0       	rjmp	.+26     	; 0x106a <vfprintf+0x5f4>
    1050:	d5 14       	cp	r13, r5
    1052:	58 f4       	brcc	.+22     	; 0x106a <vfprintf+0x5f4>
    1054:	b7 01       	movw	r22, r14
    1056:	80 e2       	ldi	r24, 0x20	; 32
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    105e:	d3 94       	inc	r13
    1060:	f7 cf       	rjmp	.-18     	; 0x1050 <vfprintf+0x5da>
    1062:	d5 14       	cp	r13, r5
    1064:	10 f4       	brcc	.+4      	; 0x106a <vfprintf+0x5f4>
    1066:	5d 18       	sub	r5, r13
    1068:	01 c0       	rjmp	.+2      	; 0x106c <vfprintf+0x5f6>
    106a:	51 2c       	mov	r5, r1
    106c:	04 ff       	sbrs	r16, 4
    106e:	10 c0       	rjmp	.+32     	; 0x1090 <vfprintf+0x61a>
    1070:	b7 01       	movw	r22, r14
    1072:	80 e3       	ldi	r24, 0x30	; 48
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    107a:	02 ff       	sbrs	r16, 2
    107c:	17 c0       	rjmp	.+46     	; 0x10ac <vfprintf+0x636>
    107e:	01 fd       	sbrc	r16, 1
    1080:	03 c0       	rjmp	.+6      	; 0x1088 <vfprintf+0x612>
    1082:	88 e7       	ldi	r24, 0x78	; 120
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <vfprintf+0x616>
    1088:	88 e5       	ldi	r24, 0x58	; 88
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	b7 01       	movw	r22, r14
    108e:	0c c0       	rjmp	.+24     	; 0x10a8 <vfprintf+0x632>
    1090:	80 2f       	mov	r24, r16
    1092:	86 78       	andi	r24, 0x86	; 134
    1094:	59 f0       	breq	.+22     	; 0x10ac <vfprintf+0x636>
    1096:	01 ff       	sbrs	r16, 1
    1098:	02 c0       	rjmp	.+4      	; 0x109e <vfprintf+0x628>
    109a:	8b e2       	ldi	r24, 0x2B	; 43
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <vfprintf+0x62a>
    109e:	80 e2       	ldi	r24, 0x20	; 32
    10a0:	07 fd       	sbrc	r16, 7
    10a2:	8d e2       	ldi	r24, 0x2D	; 45
    10a4:	b7 01       	movw	r22, r14
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    10ac:	c1 16       	cp	r12, r17
    10ae:	38 f4       	brcc	.+14     	; 0x10be <vfprintf+0x648>
    10b0:	b7 01       	movw	r22, r14
    10b2:	80 e3       	ldi	r24, 0x30	; 48
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    10ba:	11 50       	subi	r17, 0x01	; 1
    10bc:	f7 cf       	rjmp	.-18     	; 0x10ac <vfprintf+0x636>
    10be:	ca 94       	dec	r12
    10c0:	f3 01       	movw	r30, r6
    10c2:	ec 0d       	add	r30, r12
    10c4:	f1 1d       	adc	r31, r1
    10c6:	80 81       	ld	r24, Z
    10c8:	b7 01       	movw	r22, r14
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    10d0:	c1 10       	cpse	r12, r1
    10d2:	f5 cf       	rjmp	.-22     	; 0x10be <vfprintf+0x648>
    10d4:	15 c0       	rjmp	.+42     	; 0x1100 <vfprintf+0x68a>
    10d6:	f4 e0       	ldi	r31, 0x04	; 4
    10d8:	f5 15       	cp	r31, r5
    10da:	60 f5       	brcc	.+88     	; 0x1134 <vfprintf+0x6be>
    10dc:	84 e0       	ldi	r24, 0x04	; 4
    10de:	58 1a       	sub	r5, r24
    10e0:	93 fe       	sbrs	r9, 3
    10e2:	1f c0       	rjmp	.+62     	; 0x1122 <vfprintf+0x6ac>
    10e4:	01 11       	cpse	r16, r1
    10e6:	27 c0       	rjmp	.+78     	; 0x1136 <vfprintf+0x6c0>
    10e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    10ea:	23 ff       	sbrs	r18, 3
    10ec:	2a c0       	rjmp	.+84     	; 0x1142 <vfprintf+0x6cc>
    10ee:	0e ed       	ldi	r16, 0xDE	; 222
    10f0:	10 e0       	ldi	r17, 0x00	; 0
    10f2:	39 2d       	mov	r19, r9
    10f4:	30 71       	andi	r19, 0x10	; 16
    10f6:	93 2e       	mov	r9, r19
    10f8:	f8 01       	movw	r30, r16
    10fa:	84 91       	lpm	r24, Z
    10fc:	81 11       	cpse	r24, r1
    10fe:	24 c0       	rjmp	.+72     	; 0x1148 <vfprintf+0x6d2>
    1100:	55 20       	and	r5, r5
    1102:	09 f4       	brne	.+2      	; 0x1106 <vfprintf+0x690>
    1104:	e4 cc       	rjmp	.-1592   	; 0xace <vfprintf+0x58>
    1106:	b7 01       	movw	r22, r14
    1108:	80 e2       	ldi	r24, 0x20	; 32
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    1110:	5a 94       	dec	r5
    1112:	f6 cf       	rjmp	.-20     	; 0x1100 <vfprintf+0x68a>
    1114:	f7 01       	movw	r30, r14
    1116:	86 81       	ldd	r24, Z+6	; 0x06
    1118:	97 81       	ldd	r25, Z+7	; 0x07
    111a:	26 c0       	rjmp	.+76     	; 0x1168 <vfprintf+0x6f2>
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	9f ef       	ldi	r25, 0xFF	; 255
    1120:	23 c0       	rjmp	.+70     	; 0x1168 <vfprintf+0x6f2>
    1122:	b7 01       	movw	r22, r14
    1124:	80 e2       	ldi	r24, 0x20	; 32
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    112c:	5a 94       	dec	r5
    112e:	51 10       	cpse	r5, r1
    1130:	f8 cf       	rjmp	.-16     	; 0x1122 <vfprintf+0x6ac>
    1132:	d8 cf       	rjmp	.-80     	; 0x10e4 <vfprintf+0x66e>
    1134:	51 2c       	mov	r5, r1
    1136:	b7 01       	movw	r22, r14
    1138:	80 2f       	mov	r24, r16
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    1140:	d3 cf       	rjmp	.-90     	; 0x10e8 <vfprintf+0x672>
    1142:	02 ee       	ldi	r16, 0xE2	; 226
    1144:	10 e0       	ldi	r17, 0x00	; 0
    1146:	d5 cf       	rjmp	.-86     	; 0x10f2 <vfprintf+0x67c>
    1148:	91 10       	cpse	r9, r1
    114a:	80 52       	subi	r24, 0x20	; 32
    114c:	b7 01       	movw	r22, r14
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 4f 0a 	call	0x149e	; 0x149e <fputc>
    1154:	0f 5f       	subi	r16, 0xFF	; 255
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	cf cf       	rjmp	.-98     	; 0x10f8 <vfprintf+0x682>
    115a:	23 e0       	ldi	r18, 0x03	; 3
    115c:	25 15       	cp	r18, r5
    115e:	10 f4       	brcc	.+4      	; 0x1164 <vfprintf+0x6ee>
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	bd cf       	rjmp	.-134    	; 0x10de <vfprintf+0x668>
    1164:	51 2c       	mov	r5, r1
    1166:	c0 cf       	rjmp	.-128    	; 0x10e8 <vfprintf+0x672>
    1168:	60 96       	adiw	r28, 0x10	; 16
    116a:	e2 e1       	ldi	r30, 0x12	; 18
    116c:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__epilogue_restores__>

00001170 <__tablejump2__>:
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	05 90       	lpm	r0, Z+
    1176:	f4 91       	lpm	r31, Z
    1178:	e0 2d       	mov	r30, r0
    117a:	09 94       	ijmp

0000117c <__umulhisi3>:
    117c:	a2 9f       	mul	r26, r18
    117e:	b0 01       	movw	r22, r0
    1180:	b3 9f       	mul	r27, r19
    1182:	c0 01       	movw	r24, r0
    1184:	a3 9f       	mul	r26, r19
    1186:	70 0d       	add	r23, r0
    1188:	81 1d       	adc	r24, r1
    118a:	11 24       	eor	r1, r1
    118c:	91 1d       	adc	r25, r1
    118e:	b2 9f       	mul	r27, r18
    1190:	70 0d       	add	r23, r0
    1192:	81 1d       	adc	r24, r1
    1194:	11 24       	eor	r1, r1
    1196:	91 1d       	adc	r25, r1
    1198:	08 95       	ret

0000119a <__prologue_saves__>:
    119a:	2f 92       	push	r2
    119c:	3f 92       	push	r3
    119e:	4f 92       	push	r4
    11a0:	5f 92       	push	r5
    11a2:	6f 92       	push	r6
    11a4:	7f 92       	push	r7
    11a6:	8f 92       	push	r8
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	cf 92       	push	r12
    11b0:	df 92       	push	r13
    11b2:	ef 92       	push	r14
    11b4:	ff 92       	push	r15
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	ca 1b       	sub	r28, r26
    11c4:	db 0b       	sbc	r29, r27
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	09 94       	ijmp

000011d2 <__epilogue_restores__>:
    11d2:	2a 88       	ldd	r2, Y+18	; 0x12
    11d4:	39 88       	ldd	r3, Y+17	; 0x11
    11d6:	48 88       	ldd	r4, Y+16	; 0x10
    11d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    11da:	6e 84       	ldd	r6, Y+14	; 0x0e
    11dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    11de:	8c 84       	ldd	r8, Y+12	; 0x0c
    11e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    11e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    11e4:	b9 84       	ldd	r11, Y+9	; 0x09
    11e6:	c8 84       	ldd	r12, Y+8	; 0x08
    11e8:	df 80       	ldd	r13, Y+7	; 0x07
    11ea:	ee 80       	ldd	r14, Y+6	; 0x06
    11ec:	fd 80       	ldd	r15, Y+5	; 0x05
    11ee:	0c 81       	ldd	r16, Y+4	; 0x04
    11f0:	1b 81       	ldd	r17, Y+3	; 0x03
    11f2:	aa 81       	ldd	r26, Y+2	; 0x02
    11f4:	b9 81       	ldd	r27, Y+1	; 0x01
    11f6:	ce 0f       	add	r28, r30
    11f8:	d1 1d       	adc	r29, r1
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	ed 01       	movw	r28, r26
    1206:	08 95       	ret

00001208 <atoi>:
    1208:	fc 01       	movw	r30, r24
    120a:	88 27       	eor	r24, r24
    120c:	99 27       	eor	r25, r25
    120e:	e8 94       	clt
    1210:	21 91       	ld	r18, Z+
    1212:	20 32       	cpi	r18, 0x20	; 32
    1214:	e9 f3       	breq	.-6      	; 0x1210 <atoi+0x8>
    1216:	29 30       	cpi	r18, 0x09	; 9
    1218:	10 f0       	brcs	.+4      	; 0x121e <atoi+0x16>
    121a:	2e 30       	cpi	r18, 0x0E	; 14
    121c:	c8 f3       	brcs	.-14     	; 0x1210 <atoi+0x8>
    121e:	2b 32       	cpi	r18, 0x2B	; 43
    1220:	41 f0       	breq	.+16     	; 0x1232 <atoi+0x2a>
    1222:	2d 32       	cpi	r18, 0x2D	; 45
    1224:	39 f4       	brne	.+14     	; 0x1234 <atoi+0x2c>
    1226:	68 94       	set
    1228:	04 c0       	rjmp	.+8      	; 0x1232 <atoi+0x2a>
    122a:	0e 94 2d 0a 	call	0x145a	; 0x145a <__mulhi_const_10>
    122e:	82 0f       	add	r24, r18
    1230:	91 1d       	adc	r25, r1
    1232:	21 91       	ld	r18, Z+
    1234:	20 53       	subi	r18, 0x30	; 48
    1236:	2a 30       	cpi	r18, 0x0A	; 10
    1238:	c0 f3       	brcs	.-16     	; 0x122a <atoi+0x22>
    123a:	1e f4       	brtc	.+6      	; 0x1242 <atoi+0x3a>
    123c:	90 95       	com	r25
    123e:	81 95       	neg	r24
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	08 95       	ret

00001244 <__ftoa_engine>:
    1244:	28 30       	cpi	r18, 0x08	; 8
    1246:	08 f0       	brcs	.+2      	; 0x124a <__ftoa_engine+0x6>
    1248:	27 e0       	ldi	r18, 0x07	; 7
    124a:	33 27       	eor	r19, r19
    124c:	da 01       	movw	r26, r20
    124e:	99 0f       	add	r25, r25
    1250:	31 1d       	adc	r19, r1
    1252:	87 fd       	sbrc	r24, 7
    1254:	91 60       	ori	r25, 0x01	; 1
    1256:	00 96       	adiw	r24, 0x00	; 0
    1258:	61 05       	cpc	r22, r1
    125a:	71 05       	cpc	r23, r1
    125c:	39 f4       	brne	.+14     	; 0x126c <__ftoa_engine+0x28>
    125e:	32 60       	ori	r19, 0x02	; 2
    1260:	2e 5f       	subi	r18, 0xFE	; 254
    1262:	3d 93       	st	X+, r19
    1264:	30 e3       	ldi	r19, 0x30	; 48
    1266:	2a 95       	dec	r18
    1268:	e1 f7       	brne	.-8      	; 0x1262 <__ftoa_engine+0x1e>
    126a:	08 95       	ret
    126c:	9f 3f       	cpi	r25, 0xFF	; 255
    126e:	30 f0       	brcs	.+12     	; 0x127c <__ftoa_engine+0x38>
    1270:	80 38       	cpi	r24, 0x80	; 128
    1272:	71 05       	cpc	r23, r1
    1274:	61 05       	cpc	r22, r1
    1276:	09 f0       	breq	.+2      	; 0x127a <__ftoa_engine+0x36>
    1278:	3c 5f       	subi	r19, 0xFC	; 252
    127a:	3c 5f       	subi	r19, 0xFC	; 252
    127c:	3d 93       	st	X+, r19
    127e:	91 30       	cpi	r25, 0x01	; 1
    1280:	08 f0       	brcs	.+2      	; 0x1284 <__ftoa_engine+0x40>
    1282:	80 68       	ori	r24, 0x80	; 128
    1284:	91 1d       	adc	r25, r1
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	1f 93       	push	r17
    128c:	0f 93       	push	r16
    128e:	ff 92       	push	r15
    1290:	ef 92       	push	r14
    1292:	19 2f       	mov	r17, r25
    1294:	98 7f       	andi	r25, 0xF8	; 248
    1296:	96 95       	lsr	r25
    1298:	e9 2f       	mov	r30, r25
    129a:	96 95       	lsr	r25
    129c:	96 95       	lsr	r25
    129e:	e9 0f       	add	r30, r25
    12a0:	ff 27       	eor	r31, r31
    12a2:	e0 5c       	subi	r30, 0xC0	; 192
    12a4:	fe 4f       	sbci	r31, 0xFE	; 254
    12a6:	99 27       	eor	r25, r25
    12a8:	33 27       	eor	r19, r19
    12aa:	ee 24       	eor	r14, r14
    12ac:	ff 24       	eor	r15, r15
    12ae:	a7 01       	movw	r20, r14
    12b0:	e7 01       	movw	r28, r14
    12b2:	05 90       	lpm	r0, Z+
    12b4:	08 94       	sec
    12b6:	07 94       	ror	r0
    12b8:	28 f4       	brcc	.+10     	; 0x12c4 <__ftoa_engine+0x80>
    12ba:	36 0f       	add	r19, r22
    12bc:	e7 1e       	adc	r14, r23
    12be:	f8 1e       	adc	r15, r24
    12c0:	49 1f       	adc	r20, r25
    12c2:	51 1d       	adc	r21, r1
    12c4:	66 0f       	add	r22, r22
    12c6:	77 1f       	adc	r23, r23
    12c8:	88 1f       	adc	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	06 94       	lsr	r0
    12ce:	a1 f7       	brne	.-24     	; 0x12b8 <__ftoa_engine+0x74>
    12d0:	05 90       	lpm	r0, Z+
    12d2:	07 94       	ror	r0
    12d4:	28 f4       	brcc	.+10     	; 0x12e0 <__ftoa_engine+0x9c>
    12d6:	e7 0e       	add	r14, r23
    12d8:	f8 1e       	adc	r15, r24
    12da:	49 1f       	adc	r20, r25
    12dc:	56 1f       	adc	r21, r22
    12de:	c1 1d       	adc	r28, r1
    12e0:	77 0f       	add	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	66 1f       	adc	r22, r22
    12e8:	06 94       	lsr	r0
    12ea:	a1 f7       	brne	.-24     	; 0x12d4 <__ftoa_engine+0x90>
    12ec:	05 90       	lpm	r0, Z+
    12ee:	07 94       	ror	r0
    12f0:	28 f4       	brcc	.+10     	; 0x12fc <__ftoa_engine+0xb8>
    12f2:	f8 0e       	add	r15, r24
    12f4:	49 1f       	adc	r20, r25
    12f6:	56 1f       	adc	r21, r22
    12f8:	c7 1f       	adc	r28, r23
    12fa:	d1 1d       	adc	r29, r1
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	66 1f       	adc	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	06 94       	lsr	r0
    1306:	a1 f7       	brne	.-24     	; 0x12f0 <__ftoa_engine+0xac>
    1308:	05 90       	lpm	r0, Z+
    130a:	07 94       	ror	r0
    130c:	20 f4       	brcc	.+8      	; 0x1316 <__ftoa_engine+0xd2>
    130e:	49 0f       	add	r20, r25
    1310:	56 1f       	adc	r21, r22
    1312:	c7 1f       	adc	r28, r23
    1314:	d8 1f       	adc	r29, r24
    1316:	99 0f       	add	r25, r25
    1318:	66 1f       	adc	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	06 94       	lsr	r0
    1320:	a9 f7       	brne	.-22     	; 0x130c <__ftoa_engine+0xc8>
    1322:	84 91       	lpm	r24, Z
    1324:	10 95       	com	r17
    1326:	17 70       	andi	r17, 0x07	; 7
    1328:	41 f0       	breq	.+16     	; 0x133a <__ftoa_engine+0xf6>
    132a:	d6 95       	lsr	r29
    132c:	c7 95       	ror	r28
    132e:	57 95       	ror	r21
    1330:	47 95       	ror	r20
    1332:	f7 94       	ror	r15
    1334:	e7 94       	ror	r14
    1336:	1a 95       	dec	r17
    1338:	c1 f7       	brne	.-16     	; 0x132a <__ftoa_engine+0xe6>
    133a:	e6 ee       	ldi	r30, 0xE6	; 230
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	68 94       	set
    1340:	15 90       	lpm	r1, Z+
    1342:	15 91       	lpm	r17, Z+
    1344:	35 91       	lpm	r19, Z+
    1346:	65 91       	lpm	r22, Z+
    1348:	95 91       	lpm	r25, Z+
    134a:	05 90       	lpm	r0, Z+
    134c:	7f e2       	ldi	r23, 0x2F	; 47
    134e:	73 95       	inc	r23
    1350:	e1 18       	sub	r14, r1
    1352:	f1 0a       	sbc	r15, r17
    1354:	43 0b       	sbc	r20, r19
    1356:	56 0b       	sbc	r21, r22
    1358:	c9 0b       	sbc	r28, r25
    135a:	d0 09       	sbc	r29, r0
    135c:	c0 f7       	brcc	.-16     	; 0x134e <__ftoa_engine+0x10a>
    135e:	e1 0c       	add	r14, r1
    1360:	f1 1e       	adc	r15, r17
    1362:	43 1f       	adc	r20, r19
    1364:	56 1f       	adc	r21, r22
    1366:	c9 1f       	adc	r28, r25
    1368:	d0 1d       	adc	r29, r0
    136a:	7e f4       	brtc	.+30     	; 0x138a <__ftoa_engine+0x146>
    136c:	70 33       	cpi	r23, 0x30	; 48
    136e:	11 f4       	brne	.+4      	; 0x1374 <__ftoa_engine+0x130>
    1370:	8a 95       	dec	r24
    1372:	e6 cf       	rjmp	.-52     	; 0x1340 <__ftoa_engine+0xfc>
    1374:	e8 94       	clt
    1376:	01 50       	subi	r16, 0x01	; 1
    1378:	30 f0       	brcs	.+12     	; 0x1386 <__ftoa_engine+0x142>
    137a:	08 0f       	add	r16, r24
    137c:	0a f4       	brpl	.+2      	; 0x1380 <__ftoa_engine+0x13c>
    137e:	00 27       	eor	r16, r16
    1380:	02 17       	cp	r16, r18
    1382:	08 f4       	brcc	.+2      	; 0x1386 <__ftoa_engine+0x142>
    1384:	20 2f       	mov	r18, r16
    1386:	23 95       	inc	r18
    1388:	02 2f       	mov	r16, r18
    138a:	7a 33       	cpi	r23, 0x3A	; 58
    138c:	28 f0       	brcs	.+10     	; 0x1398 <__ftoa_engine+0x154>
    138e:	79 e3       	ldi	r23, 0x39	; 57
    1390:	7d 93       	st	X+, r23
    1392:	2a 95       	dec	r18
    1394:	e9 f7       	brne	.-6      	; 0x1390 <__ftoa_engine+0x14c>
    1396:	10 c0       	rjmp	.+32     	; 0x13b8 <__ftoa_engine+0x174>
    1398:	7d 93       	st	X+, r23
    139a:	2a 95       	dec	r18
    139c:	89 f6       	brne	.-94     	; 0x1340 <__ftoa_engine+0xfc>
    139e:	06 94       	lsr	r0
    13a0:	97 95       	ror	r25
    13a2:	67 95       	ror	r22
    13a4:	37 95       	ror	r19
    13a6:	17 95       	ror	r17
    13a8:	17 94       	ror	r1
    13aa:	e1 18       	sub	r14, r1
    13ac:	f1 0a       	sbc	r15, r17
    13ae:	43 0b       	sbc	r20, r19
    13b0:	56 0b       	sbc	r21, r22
    13b2:	c9 0b       	sbc	r28, r25
    13b4:	d0 09       	sbc	r29, r0
    13b6:	98 f0       	brcs	.+38     	; 0x13de <__ftoa_engine+0x19a>
    13b8:	23 95       	inc	r18
    13ba:	7e 91       	ld	r23, -X
    13bc:	73 95       	inc	r23
    13be:	7a 33       	cpi	r23, 0x3A	; 58
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <__ftoa_engine+0x180>
    13c2:	70 e3       	ldi	r23, 0x30	; 48
    13c4:	7c 93       	st	X, r23
    13c6:	20 13       	cpse	r18, r16
    13c8:	b8 f7       	brcc	.-18     	; 0x13b8 <__ftoa_engine+0x174>
    13ca:	7e 91       	ld	r23, -X
    13cc:	70 61       	ori	r23, 0x10	; 16
    13ce:	7d 93       	st	X+, r23
    13d0:	30 f0       	brcs	.+12     	; 0x13de <__ftoa_engine+0x19a>
    13d2:	83 95       	inc	r24
    13d4:	71 e3       	ldi	r23, 0x31	; 49
    13d6:	7d 93       	st	X+, r23
    13d8:	70 e3       	ldi	r23, 0x30	; 48
    13da:	2a 95       	dec	r18
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <__ftoa_engine+0x192>
    13de:	11 24       	eor	r1, r1
    13e0:	ef 90       	pop	r14
    13e2:	ff 90       	pop	r15
    13e4:	0f 91       	pop	r16
    13e6:	1f 91       	pop	r17
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	99 27       	eor	r25, r25
    13ee:	87 fd       	sbrc	r24, 7
    13f0:	90 95       	com	r25
    13f2:	08 95       	ret

000013f4 <strnlen_P>:
    13f4:	fc 01       	movw	r30, r24
    13f6:	05 90       	lpm	r0, Z+
    13f8:	61 50       	subi	r22, 0x01	; 1
    13fa:	70 40       	sbci	r23, 0x00	; 0
    13fc:	01 10       	cpse	r0, r1
    13fe:	d8 f7       	brcc	.-10     	; 0x13f6 <strnlen_P+0x2>
    1400:	80 95       	com	r24
    1402:	90 95       	com	r25
    1404:	8e 0f       	add	r24, r30
    1406:	9f 1f       	adc	r25, r31
    1408:	08 95       	ret

0000140a <strchr>:
    140a:	fc 01       	movw	r30, r24
    140c:	81 91       	ld	r24, Z+
    140e:	86 17       	cp	r24, r22
    1410:	21 f0       	breq	.+8      	; 0x141a <strchr+0x10>
    1412:	88 23       	and	r24, r24
    1414:	d9 f7       	brne	.-10     	; 0x140c <strchr+0x2>
    1416:	99 27       	eor	r25, r25
    1418:	08 95       	ret
    141a:	31 97       	sbiw	r30, 0x01	; 1
    141c:	cf 01       	movw	r24, r30
    141e:	08 95       	ret

00001420 <strcpy>:
    1420:	fb 01       	movw	r30, r22
    1422:	dc 01       	movw	r26, r24
    1424:	01 90       	ld	r0, Z+
    1426:	0d 92       	st	X+, r0
    1428:	00 20       	and	r0, r0
    142a:	e1 f7       	brne	.-8      	; 0x1424 <strcpy+0x4>
    142c:	08 95       	ret

0000142e <strnlen>:
    142e:	fc 01       	movw	r30, r24
    1430:	61 50       	subi	r22, 0x01	; 1
    1432:	70 40       	sbci	r23, 0x00	; 0
    1434:	01 90       	ld	r0, Z+
    1436:	01 10       	cpse	r0, r1
    1438:	d8 f7       	brcc	.-10     	; 0x1430 <strnlen+0x2>
    143a:	80 95       	com	r24
    143c:	90 95       	com	r25
    143e:	8e 0f       	add	r24, r30
    1440:	9f 1f       	adc	r25, r31
    1442:	08 95       	ret

00001444 <__itoa_ncheck>:
    1444:	bb 27       	eor	r27, r27
    1446:	4a 30       	cpi	r20, 0x0A	; 10
    1448:	31 f4       	brne	.+12     	; 0x1456 <__itoa_ncheck+0x12>
    144a:	99 23       	and	r25, r25
    144c:	22 f4       	brpl	.+8      	; 0x1456 <__itoa_ncheck+0x12>
    144e:	bd e2       	ldi	r27, 0x2D	; 45
    1450:	90 95       	com	r25
    1452:	81 95       	neg	r24
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__utoa_common>

0000145a <__mulhi_const_10>:
    145a:	7a e0       	ldi	r23, 0x0A	; 10
    145c:	97 9f       	mul	r25, r23
    145e:	90 2d       	mov	r25, r0
    1460:	87 9f       	mul	r24, r23
    1462:	80 2d       	mov	r24, r0
    1464:	91 0d       	add	r25, r1
    1466:	11 24       	eor	r1, r1
    1468:	08 95       	ret

0000146a <__utoa_ncheck>:
    146a:	bb 27       	eor	r27, r27

0000146c <__utoa_common>:
    146c:	fb 01       	movw	r30, r22
    146e:	55 27       	eor	r21, r21
    1470:	aa 27       	eor	r26, r26
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	aa 1f       	adc	r26, r26
    1478:	a4 17       	cp	r26, r20
    147a:	10 f0       	brcs	.+4      	; 0x1480 <__utoa_common+0x14>
    147c:	a4 1b       	sub	r26, r20
    147e:	83 95       	inc	r24
    1480:	50 51       	subi	r21, 0x10	; 16
    1482:	b9 f7       	brne	.-18     	; 0x1472 <__utoa_common+0x6>
    1484:	a0 5d       	subi	r26, 0xD0	; 208
    1486:	aa 33       	cpi	r26, 0x3A	; 58
    1488:	08 f0       	brcs	.+2      	; 0x148c <__utoa_common+0x20>
    148a:	a9 5d       	subi	r26, 0xD9	; 217
    148c:	a1 93       	st	Z+, r26
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	79 f7       	brne	.-34     	; 0x1470 <__utoa_common+0x4>
    1492:	b1 11       	cpse	r27, r1
    1494:	b1 93       	st	Z+, r27
    1496:	11 92       	st	Z+, r1
    1498:	cb 01       	movw	r24, r22
    149a:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <strrev>

0000149e <fputc>:
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	fb 01       	movw	r30, r22
    14a8:	23 81       	ldd	r18, Z+3	; 0x03
    14aa:	21 fd       	sbrc	r18, 1
    14ac:	03 c0       	rjmp	.+6      	; 0x14b4 <fputc+0x16>
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	9f ef       	ldi	r25, 0xFF	; 255
    14b2:	2c c0       	rjmp	.+88     	; 0x150c <fputc+0x6e>
    14b4:	22 ff       	sbrs	r18, 2
    14b6:	16 c0       	rjmp	.+44     	; 0x14e4 <fputc+0x46>
    14b8:	46 81       	ldd	r20, Z+6	; 0x06
    14ba:	57 81       	ldd	r21, Z+7	; 0x07
    14bc:	24 81       	ldd	r18, Z+4	; 0x04
    14be:	35 81       	ldd	r19, Z+5	; 0x05
    14c0:	42 17       	cp	r20, r18
    14c2:	53 07       	cpc	r21, r19
    14c4:	44 f4       	brge	.+16     	; 0x14d6 <fputc+0x38>
    14c6:	a0 81       	ld	r26, Z
    14c8:	b1 81       	ldd	r27, Z+1	; 0x01
    14ca:	9d 01       	movw	r18, r26
    14cc:	2f 5f       	subi	r18, 0xFF	; 255
    14ce:	3f 4f       	sbci	r19, 0xFF	; 255
    14d0:	31 83       	std	Z+1, r19	; 0x01
    14d2:	20 83       	st	Z, r18
    14d4:	8c 93       	st	X, r24
    14d6:	26 81       	ldd	r18, Z+6	; 0x06
    14d8:	37 81       	ldd	r19, Z+7	; 0x07
    14da:	2f 5f       	subi	r18, 0xFF	; 255
    14dc:	3f 4f       	sbci	r19, 0xFF	; 255
    14de:	37 83       	std	Z+7, r19	; 0x07
    14e0:	26 83       	std	Z+6, r18	; 0x06
    14e2:	14 c0       	rjmp	.+40     	; 0x150c <fputc+0x6e>
    14e4:	8b 01       	movw	r16, r22
    14e6:	ec 01       	movw	r28, r24
    14e8:	fb 01       	movw	r30, r22
    14ea:	00 84       	ldd	r0, Z+8	; 0x08
    14ec:	f1 85       	ldd	r31, Z+9	; 0x09
    14ee:	e0 2d       	mov	r30, r0
    14f0:	09 95       	icall
    14f2:	89 2b       	or	r24, r25
    14f4:	e1 f6       	brne	.-72     	; 0x14ae <fputc+0x10>
    14f6:	d8 01       	movw	r26, r16
    14f8:	16 96       	adiw	r26, 0x06	; 6
    14fa:	8d 91       	ld	r24, X+
    14fc:	9c 91       	ld	r25, X
    14fe:	17 97       	sbiw	r26, 0x07	; 7
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	17 96       	adiw	r26, 0x07	; 7
    1504:	9c 93       	st	X, r25
    1506:	8e 93       	st	-X, r24
    1508:	16 97       	sbiw	r26, 0x06	; 6
    150a:	ce 01       	movw	r24, r28
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <__ultoa_invert>:
    1516:	fa 01       	movw	r30, r20
    1518:	aa 27       	eor	r26, r26
    151a:	28 30       	cpi	r18, 0x08	; 8
    151c:	51 f1       	breq	.+84     	; 0x1572 <__ultoa_invert+0x5c>
    151e:	20 31       	cpi	r18, 0x10	; 16
    1520:	81 f1       	breq	.+96     	; 0x1582 <__ultoa_invert+0x6c>
    1522:	e8 94       	clt
    1524:	6f 93       	push	r22
    1526:	6e 7f       	andi	r22, 0xFE	; 254
    1528:	6e 5f       	subi	r22, 0xFE	; 254
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	8f 4f       	sbci	r24, 0xFF	; 255
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	af 4f       	sbci	r26, 0xFF	; 255
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	3e d0       	rcall	.+124    	; 0x15b2 <__ultoa_invert+0x9c>
    1536:	b4 e0       	ldi	r27, 0x04	; 4
    1538:	3c d0       	rcall	.+120    	; 0x15b2 <__ultoa_invert+0x9c>
    153a:	67 0f       	add	r22, r23
    153c:	78 1f       	adc	r23, r24
    153e:	89 1f       	adc	r24, r25
    1540:	9a 1f       	adc	r25, r26
    1542:	a1 1d       	adc	r26, r1
    1544:	68 0f       	add	r22, r24
    1546:	79 1f       	adc	r23, r25
    1548:	8a 1f       	adc	r24, r26
    154a:	91 1d       	adc	r25, r1
    154c:	a1 1d       	adc	r26, r1
    154e:	6a 0f       	add	r22, r26
    1550:	71 1d       	adc	r23, r1
    1552:	81 1d       	adc	r24, r1
    1554:	91 1d       	adc	r25, r1
    1556:	a1 1d       	adc	r26, r1
    1558:	20 d0       	rcall	.+64     	; 0x159a <__ultoa_invert+0x84>
    155a:	09 f4       	brne	.+2      	; 0x155e <__ultoa_invert+0x48>
    155c:	68 94       	set
    155e:	3f 91       	pop	r19
    1560:	2a e0       	ldi	r18, 0x0A	; 10
    1562:	26 9f       	mul	r18, r22
    1564:	11 24       	eor	r1, r1
    1566:	30 19       	sub	r19, r0
    1568:	30 5d       	subi	r19, 0xD0	; 208
    156a:	31 93       	st	Z+, r19
    156c:	de f6       	brtc	.-74     	; 0x1524 <__ultoa_invert+0xe>
    156e:	cf 01       	movw	r24, r30
    1570:	08 95       	ret
    1572:	46 2f       	mov	r20, r22
    1574:	47 70       	andi	r20, 0x07	; 7
    1576:	40 5d       	subi	r20, 0xD0	; 208
    1578:	41 93       	st	Z+, r20
    157a:	b3 e0       	ldi	r27, 0x03	; 3
    157c:	0f d0       	rcall	.+30     	; 0x159c <__ultoa_invert+0x86>
    157e:	c9 f7       	brne	.-14     	; 0x1572 <__ultoa_invert+0x5c>
    1580:	f6 cf       	rjmp	.-20     	; 0x156e <__ultoa_invert+0x58>
    1582:	46 2f       	mov	r20, r22
    1584:	4f 70       	andi	r20, 0x0F	; 15
    1586:	40 5d       	subi	r20, 0xD0	; 208
    1588:	4a 33       	cpi	r20, 0x3A	; 58
    158a:	18 f0       	brcs	.+6      	; 0x1592 <__ultoa_invert+0x7c>
    158c:	49 5d       	subi	r20, 0xD9	; 217
    158e:	31 fd       	sbrc	r19, 1
    1590:	40 52       	subi	r20, 0x20	; 32
    1592:	41 93       	st	Z+, r20
    1594:	02 d0       	rcall	.+4      	; 0x159a <__ultoa_invert+0x84>
    1596:	a9 f7       	brne	.-22     	; 0x1582 <__ultoa_invert+0x6c>
    1598:	ea cf       	rjmp	.-44     	; 0x156e <__ultoa_invert+0x58>
    159a:	b4 e0       	ldi	r27, 0x04	; 4
    159c:	a6 95       	lsr	r26
    159e:	97 95       	ror	r25
    15a0:	87 95       	ror	r24
    15a2:	77 95       	ror	r23
    15a4:	67 95       	ror	r22
    15a6:	ba 95       	dec	r27
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__ultoa_invert+0x86>
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 05       	cpc	r22, r1
    15ae:	71 05       	cpc	r23, r1
    15b0:	08 95       	ret
    15b2:	9b 01       	movw	r18, r22
    15b4:	ac 01       	movw	r20, r24
    15b6:	0a 2e       	mov	r0, r26
    15b8:	06 94       	lsr	r0
    15ba:	57 95       	ror	r21
    15bc:	47 95       	ror	r20
    15be:	37 95       	ror	r19
    15c0:	27 95       	ror	r18
    15c2:	ba 95       	dec	r27
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__ultoa_invert+0xa2>
    15c6:	62 0f       	add	r22, r18
    15c8:	73 1f       	adc	r23, r19
    15ca:	84 1f       	adc	r24, r20
    15cc:	95 1f       	adc	r25, r21
    15ce:	a0 1d       	adc	r26, r0
    15d0:	08 95       	ret

000015d2 <strrev>:
    15d2:	dc 01       	movw	r26, r24
    15d4:	fc 01       	movw	r30, r24
    15d6:	67 2f       	mov	r22, r23
    15d8:	71 91       	ld	r23, Z+
    15da:	77 23       	and	r23, r23
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <strrev+0x4>
    15de:	32 97       	sbiw	r30, 0x02	; 2
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <strrev+0x18>
    15e2:	7c 91       	ld	r23, X
    15e4:	6d 93       	st	X+, r22
    15e6:	70 83       	st	Z, r23
    15e8:	62 91       	ld	r22, -Z
    15ea:	ae 17       	cp	r26, r30
    15ec:	bf 07       	cpc	r27, r31
    15ee:	c8 f3       	brcs	.-14     	; 0x15e2 <strrev+0x10>
    15f0:	08 95       	ret

000015f2 <_exit>:
    15f2:	f8 94       	cli

000015f4 <__stop_program>:
    15f4:	ff cf       	rjmp	.-2      	; 0x15f4 <__stop_program>
