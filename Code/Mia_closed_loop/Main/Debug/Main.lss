
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00001590  00001624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001590  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a8  0080024c  0080024c  00001770  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c7f  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b71  00000000  00000000  000035bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c69  00000000  00000000  0000412c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00004d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000664  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b40  00000000  00000000  00005740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00006280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__ctors_end>
       4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
       8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
       c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      10:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      14:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      18:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      20:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      24:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      28:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      2c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_11>
      30:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      34:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      38:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      3c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      40:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      44:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      48:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__vector_18>
      4c:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_19>
      50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      54:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      58:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      5c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      60:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      68:	c5 01       	movw	r24, r10
      6a:	1b 02       	muls	r17, r27
      6c:	ea 01       	movw	r28, r20
      6e:	1b 02       	muls	r17, r27
      70:	1b 02       	muls	r17, r27
      72:	1b 02       	muls	r17, r27
      74:	1b 02       	muls	r17, r27
      76:	1b 02       	muls	r17, r27
      78:	1b 02       	muls	r17, r27
      7a:	1b 02       	muls	r17, r27
      7c:	1b 02       	muls	r17, r27
      7e:	1b 02       	muls	r17, r27
      80:	1b 02       	muls	r17, r27
      82:	1b 02       	muls	r17, r27
      84:	1b 02       	muls	r17, r27
      86:	1b 02       	muls	r17, r27
      88:	1b 02       	muls	r17, r27
      8a:	1b 02       	muls	r17, r27
      8c:	1b 02       	muls	r17, r27
      8e:	1b 02       	muls	r17, r27
      90:	1b 02       	muls	r17, r27
      92:	1b 02       	muls	r17, r27
      94:	1b 02       	muls	r17, r27
      96:	1b 02       	muls	r17, r27
      98:	1b 02       	muls	r17, r27
      9a:	1b 02       	muls	r17, r27
      9c:	1b 02       	muls	r17, r27
      9e:	1b 02       	muls	r17, r27
      a0:	1b 02       	muls	r17, r27
      a2:	1b 02       	muls	r17, r27
      a4:	1b 02       	muls	r17, r27
      a6:	1b 02       	muls	r17, r27
      a8:	1b 02       	muls	r17, r27
      aa:	1b 02       	muls	r17, r27
      ac:	1b 02       	muls	r17, r27
      ae:	1b 02       	muls	r17, r27
      b0:	1b 02       	muls	r17, r27
      b2:	a7 01       	movw	r20, r14
      b4:	1b 02       	muls	r17, r27
      b6:	0c 02       	muls	r16, r28
      b8:	14 02       	muls	r17, r20
      ba:	1b 02       	muls	r17, r27
      bc:	1b 02       	muls	r17, r27
      be:	71 01       	movw	r14, r2
      c0:	1b 02       	muls	r17, r27
      c2:	1b 02       	muls	r17, r27
      c4:	1b 02       	muls	r17, r27
      c6:	1b 02       	muls	r17, r27
      c8:	1b 02       	muls	r17, r27
      ca:	1b 02       	muls	r17, r27
      cc:	1b 02       	muls	r17, r27
      ce:	1b 02       	muls	r17, r27
      d0:	1b 02       	muls	r17, r27
      d2:	1b 02       	muls	r17, r27
      d4:	1b 02       	muls	r17, r27
      d6:	1b 02       	muls	r17, r27
      d8:	1b 02       	muls	r17, r27
      da:	1b 02       	muls	r17, r27
      dc:	90 01       	movw	r18, r0

000000de <__trampolines_end>:
      de:	6e 61       	ori	r22, 0x1E	; 30
      e0:	6e 00       	.word	0x006e	; ????

000000e2 <__c.2332>:
      e2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      f2:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     102:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     112:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     122:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     132:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     142:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     152:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     162:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     172:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     182:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     192:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1a2:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1b2:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1c2:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1d2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e0 <__ctors_end>:
     1e0:	11 24       	eor	r1, r1
     1e2:	1f be       	out	0x3f, r1	; 63
     1e4:	cf ef       	ldi	r28, 0xFF	; 255
     1e6:	d8 e0       	ldi	r29, 0x08	; 8
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	cd bf       	out	0x3d, r28	; 61

000001ec <__do_copy_data>:
     1ec:	12 e0       	ldi	r17, 0x02	; 2
     1ee:	a0 e0       	ldi	r26, 0x00	; 0
     1f0:	b1 e0       	ldi	r27, 0x01	; 1
     1f2:	e0 e9       	ldi	r30, 0x90	; 144
     1f4:	f5 e1       	ldi	r31, 0x15	; 21
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <__do_copy_data+0x10>
     1f8:	05 90       	lpm	r0, Z+
     1fa:	0d 92       	st	X+, r0
     1fc:	ac 34       	cpi	r26, 0x4C	; 76
     1fe:	b1 07       	cpc	r27, r17
     200:	d9 f7       	brne	.-10     	; 0x1f8 <__do_copy_data+0xc>

00000202 <__do_clear_bss>:
     202:	23 e0       	ldi	r18, 0x03	; 3
     204:	ac e4       	ldi	r26, 0x4C	; 76
     206:	b2 e0       	ldi	r27, 0x02	; 2
     208:	01 c0       	rjmp	.+2      	; 0x20c <.do_clear_bss_start>

0000020a <.do_clear_bss_loop>:
     20a:	1d 92       	st	X+, r1

0000020c <.do_clear_bss_start>:
     20c:	a4 3f       	cpi	r26, 0xF4	; 244
     20e:	b2 07       	cpc	r27, r18
     210:	e1 f7       	brne	.-8      	; 0x20a <.do_clear_bss_loop>
     212:	0e 94 20 04 	call	0x840	; 0x840 <main>
     216:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <_exit>

0000021a <__bad_interrupt>:
     21a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021e <print_int>:
	itoa(value, buffer, 10);
	uart_putc(id);
	uart_putc('=');
	uart_puts(buffer);
	uart_putc('\n');
}
     21e:	1f 93       	push	r17
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	28 97       	sbiw	r28, 0x08	; 8
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	f8 94       	cli
     22e:	de bf       	out	0x3e, r29	; 62
     230:	0f be       	out	0x3f, r0	; 63
     232:	cd bf       	out	0x3d, r28	; 61
     234:	16 2f       	mov	r17, r22
     236:	4a e0       	ldi	r20, 0x0A	; 10
     238:	be 01       	movw	r22, r28
     23a:	6f 5f       	subi	r22, 0xFF	; 255
     23c:	7f 4f       	sbci	r23, 0xFF	; 255
     23e:	0e 94 ef 09 	call	0x13de	; 0x13de <__itoa_ncheck>
     242:	ce 01       	movw	r24, r28
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     24a:	11 23       	and	r17, r17
     24c:	21 f0       	breq	.+8      	; 0x256 <print_int+0x38>
     24e:	8d eb       	ldi	r24, 0xBD	; 189
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     256:	28 96       	adiw	r28, 0x08	; 8
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	1f 91       	pop	r17
     268:	08 95       	ret

0000026a <read_int_value>:
		}
	}	
}

unsigned long read_int_value ()
{
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	60 97       	sbiw	r28, 0x10	; 16
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
	char *pch;
	char cmdValue[16];
	// Find the position the equals sign is
	// in the string, keep a pointer to it
	pch = strchr(command_in, '=');
     27e:	6d e3       	ldi	r22, 0x3D	; 61
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	8a eb       	ldi	r24, 0xBA	; 186
     284:	92 e0       	ldi	r25, 0x02	; 2
     286:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <strchr>
	// Copy everything after that point into
	// the buffer variable
	strcpy(cmdValue, pch+1);
     28a:	bc 01       	movw	r22, r24
     28c:	6f 5f       	subi	r22, 0xFF	; 255
     28e:	7f 4f       	sbci	r23, 0xFF	; 255
     290:	ce 01       	movw	r24, r28
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	0e 94 dd 09 	call	0x13ba	; 0x13ba <strcpy>
	// Now turn this value into an integer and
	// return it to the caller.
	return atoi(cmdValue);
     298:	ce 01       	movw	r24, r28
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <atoi>
     2a0:	bc 01       	movw	r22, r24
     2a2:	99 0f       	add	r25, r25
     2a4:	88 0b       	sbc	r24, r24
     2a6:	99 0b       	sbc	r25, r25
}
     2a8:	60 96       	adiw	r28, 0x10	; 16
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <process_command>:

void process_command()
{
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
	uint16_t val = 0;
	switch (command_in[0]) {
     2c6:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <command_in>
     2ca:	8e 2f       	mov	r24, r30
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	fc 01       	movw	r30, r24
     2d0:	bb 97       	sbiw	r30, 0x2b	; 43
     2d2:	eb 33       	cpi	r30, 0x3B	; 59
     2d4:	f1 05       	cpc	r31, r1
     2d6:	08 f0       	brcs	.+2      	; 0x2da <process_command+0x20>
     2d8:	ae c0       	rjmp	.+348    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     2da:	ec 5c       	subi	r30, 0xCC	; 204
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	0c 94 85 08 	jmp	0x110a	; 0x110a <__tablejump2__>
			
		case 'V':	/* duty cycle */
		if (command_in[1] == '=') {
     2e2:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <command_in+0x1>
     2e6:	8d 33       	cpi	r24, 0x3D	; 61
     2e8:	41 f4       	brne	.+16     	; 0x2fa <process_command+0x40>
			val = read_int_value();}
     2ea:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
     2ee:	eb 01       	movw	r28, r22

		if (val>=0 && val<=255)
     2f0:	6f 3f       	cpi	r22, 0xFF	; 255
     2f2:	71 05       	cpc	r23, r1
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <process_command+0x3e>
     2f6:	78 f4       	brcc	.+30     	; 0x316 <process_command+0x5c>
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <process_command+0x44>
	return atoi(cmdValue);
}

void process_command()
{
	uint16_t val = 0;
     2fa:	c0 e0       	ldi	r28, 0x00	; 0
     2fc:	d0 e0       	ldi	r29, 0x00	; 0
		if (command_in[1] == '=') {
			val = read_int_value();}

		if (val>=0 && val<=255)
		{
			set_motor_speed(val);
     2fe:	8c 2f       	mov	r24, r28
     300:	0e 94 80 03 	call	0x700	; 0x700 <set_motor_speed>
			uart_puts("Speed = ");
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
			print_int(val, TRUE);
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	ce 01       	movw	r24, r28
     310:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     314:	a6 c0       	rjmp	.+332    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		}
		else
		{
			uart_puts("Speed not in range of 0-255\n");
     316:	89 e0       	ldi	r24, 0x09	; 9
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     31e:	a1 c0       	rjmp	.+322    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		}
		break;	
		
		case 'e':	/* direction test */
		if (command_in[1] == '=') {
     320:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <command_in+0x1>
     324:	8d 33       	cpi	r24, 0x3D	; 61
     326:	41 f4       	brne	.+16     	; 0x338 <process_command+0x7e>
		val = read_int_value();}
     328:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
     32c:	eb 01       	movw	r28, r22

		if (val>=0 && val<=100)
     32e:	65 36       	cpi	r22, 0x65	; 101
     330:	71 05       	cpc	r23, r1
     332:	08 f0       	brcs	.+2      	; 0x336 <process_command+0x7c>
     334:	96 c0       	rjmp	.+300    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     336:	02 c0       	rjmp	.+4      	; 0x33c <process_command+0x82>
	return atoi(cmdValue);
}

void process_command()
{
	uint16_t val = 0;
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	d0 e0       	ldi	r29, 0x00	; 0
		if (command_in[1] == '=') {
		val = read_int_value();}

		if (val>=0 && val<=100)
		{
			uart_puts("e value = ");
     33c:	86 e2       	ldi	r24, 0x26	; 38
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
			print_int(val, TRUE);
     344:	61 e0       	ldi	r22, 0x01	; 1
     346:	ce 01       	movw	r24, r28
     348:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     34c:	8a c0       	rjmp	.+276    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		}
		break;
		
		case 'P':	/* Setpoint Angle */
		if (command_in[1] == '=') 
     34e:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <command_in+0x1>
     352:	8d 33       	cpi	r24, 0x3D	; 61
     354:	09 f0       	breq	.+2      	; 0x358 <process_command+0x9e>
     356:	85 c0       	rjmp	.+266    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		{
			val = read_int_value();
     358:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
     35c:	6b 01       	movw	r12, r22
     35e:	7c 01       	movw	r14, r24
			if (val>=0 && val<=255)
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	c8 16       	cp	r12, r24
     364:	d1 04       	cpc	r13, r1
     366:	09 f0       	breq	.+2      	; 0x36a <process_command+0xb0>
     368:	58 f4       	brcc	.+22     	; 0x380 <process_command+0xc6>
			{
				device.setpoint_angle = val;
     36a:	c0 92 e9 03 	sts	0x03E9, r12	; 0x8003e9 <device+0x2>
				uart_puts("Setpoint = ");
     36e:	81 e3       	ldi	r24, 0x31	; 49
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
				print_int(val, TRUE);
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	c6 01       	movw	r24, r12
     37a:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     37e:	71 c0       	rjmp	.+226    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			}
			else
			{
				uart_puts("Setpoint not in range 0-255\n");
     380:	8d e3       	ldi	r24, 0x3D	; 61
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     388:	6c c0       	rjmp	.+216    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		}

		break;
		
		case '+':	/* Setpoint Angle + */
			if (command_in[1] == '=')
     38a:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <command_in+0x1>
     38e:	8d 33       	cpi	r24, 0x3D	; 61
     390:	09 f0       	breq	.+2      	; 0x394 <process_command+0xda>
     392:	67 c0       	rjmp	.+206    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			{
				val = read_int_value();
     394:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
				if (val>0 && val<=MAX_DEGREES)
     398:	9b 01       	movw	r18, r22
     39a:	21 50       	subi	r18, 0x01	; 1
     39c:	31 09       	sbc	r19, r1
     39e:	29 36       	cpi	r18, 0x69	; 105
     3a0:	31 05       	cpc	r19, r1
     3a2:	98 f4       	brcc	.+38     	; 0x3ca <process_command+0x110>
				{
					device.setpoint_angle += val;
					device.setpoint_angle = (device.setpoint_angle >= MAX_DEGREES) ? MAX_DEGREES : device.setpoint_angle;
     3a4:	e7 ee       	ldi	r30, 0xE7	; 231
     3a6:	f3 e0       	ldi	r31, 0x03	; 3
     3a8:	22 81       	ldd	r18, Z+2	; 0x02
     3aa:	62 0f       	add	r22, r18
     3ac:	6a 36       	cpi	r22, 0x6A	; 106
     3ae:	08 f0       	brcs	.+2      	; 0x3b2 <process_command+0xf8>
     3b0:	69 e6       	ldi	r22, 0x69	; 105
     3b2:	62 83       	std	Z+2, r22	; 0x02
					uart_puts("Setpoint = ");
     3b4:	81 e3       	ldi	r24, 0x31	; 49
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
					print_int(device.setpoint_angle, TRUE);
     3bc:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <device+0x2>
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     3c8:	4c c0       	rjmp	.+152    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				}
				else
				{
					uart_puts("Setpoint not in range too big\n");
     3ca:	8a e5       	ldi	r24, 0x5A	; 90
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     3d2:	47 c0       	rjmp	.+142    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				}
			}
		break;
		
		case '-':	/* Setpoint Angle - */
			if (command_in[1] == '=')
     3d4:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <command_in+0x1>
     3d8:	8d 33       	cpi	r24, 0x3D	; 61
     3da:	09 f0       	breq	.+2      	; 0x3de <process_command+0x124>
     3dc:	42 c0       	rjmp	.+132    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
			{
				val = read_int_value();
     3de:	0e 94 35 01 	call	0x26a	; 0x26a <read_int_value>
				if (device.setpoint_angle >= val)
     3e2:	40 91 e9 03 	lds	r20, 0x03E9	; 0x8003e9 <device+0x2>
     3e6:	24 2f       	mov	r18, r20
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	26 17       	cp	r18, r22
     3ec:	37 07       	cpc	r19, r23
     3ee:	78 f0       	brcs	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				{
					device.setpoint_angle -= val;
     3f0:	c7 ee       	ldi	r28, 0xE7	; 231
     3f2:	d3 e0       	ldi	r29, 0x03	; 3
     3f4:	84 2f       	mov	r24, r20
     3f6:	86 1b       	sub	r24, r22
     3f8:	8a 83       	std	Y+2, r24	; 0x02
					uart_puts("Setpoint = ");
     3fa:	81 e3       	ldi	r24, 0x31	; 49
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
					print_int(device.setpoint_angle, TRUE);
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     40c:	2a c0       	rjmp	.+84     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				}
				else
				{
					uart_puts("Setpoint not in range, too small\n");
     40e:	89 e7       	ldi	r24, 0x79	; 121
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     416:	25 c0       	rjmp	.+74     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
				}
			}
		break;
		
		case 'R':	/* Reset */
			device.movementEnabled = TRUE;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <device+0xb>
			uart_puts("Reset");
     41e:	8b e9       	ldi	r24, 0x9B	; 155
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
		break;
     426:	1d c0       	rjmp	.+58     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		
		case 'S':	/* STOP */
			device.movementEnabled = FALSE;
     428:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <device+0xb>
			uart_puts("STOP!");
     42c:	81 ea       	ldi	r24, 0xA1	; 161
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
		break;
     434:	16 c0       	rjmp	.+44     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		
					
		default:
		uart_puts("No valid command:");
     436:	87 ea       	ldi	r24, 0xA7	; 167
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
		uart_putc(command_in[0]);
     43e:	ca eb       	ldi	r28, 0xBA	; 186
     440:	d2 e0       	ldi	r29, 0x02	; 2
     442:	88 81       	ld	r24, Y
     444:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <uart_putc>
		uart_puts(" (");
     448:	89 eb       	ldi	r24, 0xB9	; 185
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
		print_int(command_in[0], 0);
     450:	88 81       	ld	r24, Y
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
		uart_puts(")\n");
     45a:	8c eb       	ldi	r24, 0xBC	; 188
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
		break;
		
	}
	command_ready = FALSE;
     462:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <command_ready>
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	ff 90       	pop	r15
     46c:	ef 90       	pop	r14
     46e:	df 90       	pop	r13
     470:	cf 90       	pop	r12
     472:	08 95       	ret

00000474 <get_serial>:
	uart_puts(buffer);
	uart_putc('\n');
}

void get_serial(void)
{
     474:	cf 93       	push	r28
	unsigned int c = uart_getc();
     476:	0e 94 cb 04 	call	0x996	; 0x996 <uart_getc>
	if (!(c & UART_NO_DATA)	// If data is correct
	&&	!(c & UART_FRAME_ERROR)
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
     47a:	9c 01       	movw	r18, r24
     47c:	22 27       	eor	r18, r18
     47e:	3b 71       	andi	r19, 0x1B	; 27
     480:	23 2b       	or	r18, r19
     482:	09 f0       	breq	.+2      	; 0x486 <get_serial+0x12>
     484:	43 c0       	rjmp	.+134    	; 0x50c <get_serial+0x98>
	)
	{
		command_in[data_count] = c;
     486:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <data_count>
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	e6 54       	subi	r30, 0x46	; 70
     48e:	fd 4f       	sbci	r31, 0xFD	; 253
     490:	80 83       	st	Z, r24
		if ((command_in[data_count] == '\n') || (command_in[data_count] == '\r'))
     492:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <data_count>
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	e6 54       	subi	r30, 0x46	; 70
     49a:	fd 4f       	sbci	r31, 0xFD	; 253
     49c:	80 81       	ld	r24, Z
     49e:	8a 30       	cpi	r24, 0x0A	; 10
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <get_serial+0x3e>
     4a2:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <data_count>
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	e6 54       	subi	r30, 0x46	; 70
     4aa:	fd 4f       	sbci	r31, 0xFD	; 253
     4ac:	80 81       	ld	r24, Z
     4ae:	8d 30       	cpi	r24, 0x0D	; 13
     4b0:	41 f5       	brne	.+80     	; 0x502 <get_serial+0x8e>
		{
			uart_puts("Received =<");
     4b2:	8f eb       	ldi	r24, 0xBF	; 191
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
			for(uint8_t i=0; i<data_count; i++) {
     4ba:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <data_count>
     4be:	88 23       	and	r24, r24
     4c0:	69 f0       	breq	.+26     	; 0x4dc <get_serial+0x68>
     4c2:	c0 e0       	ldi	r28, 0x00	; 0
				uart_putc(command_in[i]);
     4c4:	ec 2f       	mov	r30, r28
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	e6 54       	subi	r30, 0x46	; 70
     4ca:	fd 4f       	sbci	r31, 0xFD	; 253
     4cc:	80 81       	ld	r24, Z
     4ce:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <uart_putc>
	{
		command_in[data_count] = c;
		if ((command_in[data_count] == '\n') || (command_in[data_count] == '\r'))
		{
			uart_puts("Received =<");
			for(uint8_t i=0; i<data_count; i++) {
     4d2:	cf 5f       	subi	r28, 0xFF	; 255
     4d4:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <data_count>
     4d8:	c8 17       	cp	r28, r24
     4da:	a0 f3       	brcs	.-24     	; 0x4c4 <get_serial+0x50>
				uart_putc(command_in[i]);
			}
			uart_puts(">\n");
     4dc:	8b ec       	ldi	r24, 0xCB	; 203
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
			
			command_ready = TRUE;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <command_ready>
			process_command();
     4ea:	0e 94 5d 01 	call	0x2ba	; 0x2ba <process_command>
			data_count = 0;	// reset
     4ee:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <data_count>
			memset(command_in, 0, sizeof(command_in));	// set command to 0
     4f2:	84 e6       	ldi	r24, 0x64	; 100
     4f4:	ea eb       	ldi	r30, 0xBA	; 186
     4f6:	f2 e0       	ldi	r31, 0x02	; 2
     4f8:	df 01       	movw	r26, r30
     4fa:	1d 92       	st	X+, r1
     4fc:	8a 95       	dec	r24
     4fe:	e9 f7       	brne	.-6      	; 0x4fa <get_serial+0x86>
     500:	05 c0       	rjmp	.+10     	; 0x50c <get_serial+0x98>
		}
		else
		{
			data_count++;
     502:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <data_count>
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <data_count>
		}
	}	
}
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <init_io>:
}

uint16_t calculate_error(void)
{
	return 0;
}
     510:	24 9a       	sbi	0x04, 4	; 4
     512:	53 9a       	sbi	0x0a, 3	; 10
     514:	21 9a       	sbi	0x04, 1	; 4
     516:	55 9a       	sbi	0x0a, 5	; 10
     518:	08 95       	ret

0000051a <init_int>:
     51a:	e0 eb       	ldi	r30, 0xB0	; 176
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	80 62       	ori	r24, 0x20	; 32
     522:	80 83       	st	Z, r24
     524:	80 81       	ld	r24, Z
     526:	83 60       	ori	r24, 0x03	; 3
     528:	80 83       	st	Z, r24
     52a:	e1 eb       	ldi	r30, 0xB1	; 177
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	82 60       	ori	r24, 0x02	; 2
     532:	80 83       	st	Z, r24
     534:	e1 e8       	ldi	r30, 0x81	; 129
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	88 60       	ori	r24, 0x08	; 8
     53c:	80 83       	st	Z, r24
     53e:	80 81       	ld	r24, Z
     540:	85 60       	ori	r24, 0x05	; 5
     542:	80 83       	st	Z, r24
     544:	ef e6       	ldi	r30, 0x6F	; 111
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	82 60       	ori	r24, 0x02	; 2
     54c:	80 83       	st	Z, r24
     54e:	8b e9       	ldi	r24, 0x9B	; 155
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     556:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     55a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     55e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     562:	78 94       	sei
     564:	08 95       	ret

00000566 <init_adc>:
     566:	ec e7       	ldi	r30, 0x7C	; 124
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	80 64       	ori	r24, 0x40	; 64
     56e:	80 83       	st	Z, r24
     570:	ea e7       	ldi	r30, 0x7A	; 122
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	87 60       	ori	r24, 0x07	; 7
     578:	80 83       	st	Z, r24
     57a:	80 81       	ld	r24, Z
     57c:	80 68       	ori	r24, 0x80	; 128
     57e:	80 83       	st	Z, r24
     580:	08 95       	ret

00000582 <read_adc>:
     582:	ec e7       	ldi	r30, 0x7C	; 124
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	90 81       	ld	r25, Z
     588:	90 7f       	andi	r25, 0xF0	; 240
     58a:	8f 70       	andi	r24, 0x0F	; 15
     58c:	89 2b       	or	r24, r25
     58e:	80 83       	st	Z, r24
     590:	ea e7       	ldi	r30, 0x7A	; 122
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	80 64       	ori	r24, 0x40	; 64
     598:	80 83       	st	Z, r24
     59a:	80 81       	ld	r24, Z
     59c:	86 fd       	sbrc	r24, 6
     59e:	fd cf       	rjmp	.-6      	; 0x59a <read_adc+0x18>
     5a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     5a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     5a8:	08 95       	ret

000005aa <__vector_11>:
     5aa:	1f 92       	push	r1
     5ac:	0f 92       	push	r0
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	0f 92       	push	r0
     5b2:	11 24       	eor	r1, r1
     5b4:	2f 93       	push	r18
     5b6:	3f 93       	push	r19
     5b8:	4f 93       	push	r20
     5ba:	5f 93       	push	r21
     5bc:	6f 93       	push	r22
     5be:	7f 93       	push	r23
     5c0:	8f 93       	push	r24
     5c2:	9f 93       	push	r25
     5c4:	af 93       	push	r26
     5c6:	bf 93       	push	r27
     5c8:	ef 93       	push	r30
     5ca:	ff 93       	push	r31
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	0e 94 c1 02 	call	0x582	; 0x582 <read_adc>
     5d2:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <device+0x8>
     5d6:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <device+0x7>
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	0e 94 c1 02 	call	0x582	; 0x582 <read_adc>
     5e0:	9c 01       	movw	r18, r24
     5e2:	2c 55       	subi	r18, 0x5C	; 92
     5e4:	31 40       	sbci	r19, 0x01	; 1
     5e6:	ab ea       	ldi	r26, 0xAB	; 171
     5e8:	ba ea       	ldi	r27, 0xAA	; 170
     5ea:	0e 94 8b 08 	call	0x1116	; 0x1116 <__umulhisi3>
     5ee:	96 95       	lsr	r25
     5f0:	87 95       	ror	r24
     5f2:	89 3c       	cpi	r24, 0xC9	; 201
     5f4:	91 05       	cpc	r25, r1
     5f6:	28 f0       	brcs	.+10     	; 0x602 <__vector_11+0x58>
     5f8:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <device+0x4>
     5fc:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <device+0x3>
     600:	0e c0       	rjmp	.+28     	; 0x61e <__vector_11+0x74>
     602:	8a 36       	cpi	r24, 0x6A	; 106
     604:	91 05       	cpc	r25, r1
     606:	28 f4       	brcc	.+10     	; 0x612 <__vector_11+0x68>
     608:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <device+0x4>
     60c:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <device+0x3>
     610:	06 c0       	rjmp	.+12     	; 0x61e <__vector_11+0x74>
     612:	89 e6       	ldi	r24, 0x69	; 105
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <device+0x4>
     61a:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <device+0x3>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <check_movement>
     624:	ff 91       	pop	r31
     626:	ef 91       	pop	r30
     628:	bf 91       	pop	r27
     62a:	af 91       	pop	r26
     62c:	9f 91       	pop	r25
     62e:	8f 91       	pop	r24
     630:	7f 91       	pop	r23
     632:	6f 91       	pop	r22
     634:	5f 91       	pop	r21
     636:	4f 91       	pop	r20
     638:	3f 91       	pop	r19
     63a:	2f 91       	pop	r18
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <print_HMI>:
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     652:	c7 ee       	ldi	r28, 0xE7	; 231
     654:	d3 e0       	ldi	r29, 0x03	; 3
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	8b 81       	ldd	r24, Y+3	; 0x03
     65a:	9c 81       	ldd	r25, Y+4	; 0x04
     65c:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     660:	8b e0       	ldi	r24, 0x0B	; 11
     662:	92 e0       	ldi	r25, 0x02	; 2
     664:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     668:	8f e0       	ldi	r24, 0x0F	; 15
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     670:	8a 81       	ldd	r24, Y+2	; 0x02
     672:	60 e0       	ldi	r22, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     67a:	8b e0       	ldi	r24, 0x0B	; 11
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     682:	8c 85       	ldd	r24, Y+12	; 0x0c
     684:	81 30       	cpi	r24, 0x01	; 1
     686:	49 f4       	brne	.+18     	; 0x69a <print_HMI+0x54>
     688:	87 e1       	ldi	r24, 0x17	; 23
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     690:	8b e0       	ldi	r24, 0x0B	; 11
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     698:	0a c0       	rjmp	.+20     	; 0x6ae <print_HMI+0x68>
     69a:	81 11       	cpse	r24, r1
     69c:	08 c0       	rjmp	.+16     	; 0x6ae <print_HMI+0x68>
     69e:	88 e2       	ldi	r24, 0x28	; 40
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     6a6:	8b e0       	ldi	r24, 0x0B	; 11
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     6ae:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <device+0xc>
     6b2:	82 30       	cpi	r24, 0x02	; 2
     6b4:	41 f4       	brne	.+16     	; 0x6c6 <print_HMI+0x80>
     6b6:	86 e3       	ldi	r24, 0x36	; 54
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     6be:	8b e0       	ldi	r24, 0x0B	; 11
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     6c6:	84 e4       	ldi	r24, 0x44	; 68
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <device+0x7>
     6d4:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <device+0x8>
     6d8:	0e 94 0f 01 	call	0x21e	; 0x21e <print_int>
     6dc:	8b e0       	ldi	r24, 0x0B	; 11
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <uart_puts>
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <set_motor_dir>:
     6ea:	81 11       	cpse	r24, r1
     6ec:	03 c0       	rjmp	.+6      	; 0x6f4 <set_motor_dir+0xa>
     6ee:	90 e1       	ldi	r25, 0x10	; 16
     6f0:	95 b9       	out	0x05, r25	; 5
     6f2:	03 c0       	rjmp	.+6      	; 0x6fa <set_motor_dir+0x10>
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	09 f4       	brne	.+2      	; 0x6fa <set_motor_dir+0x10>
     6f8:	2c 98       	cbi	0x05, 4	; 5
     6fa:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <device>
     6fe:	08 95       	ret

00000700 <set_motor_speed>:
     700:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     704:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <device+0x1>
     708:	08 95       	ret

0000070a <p_loop>:
	}
}
*/

void p_loop(void)
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
	uint16_t speed = 0;
	static uint16_t error_old = 0;
	static uint16_t timer = 0;
	static uint8_t init_move = FALSE;
	
	if (device.current>=device.current_limit)
     70e:	e7 ee       	ldi	r30, 0xE7	; 231
     710:	f3 e0       	ldi	r31, 0x03	; 3
     712:	27 81       	ldd	r18, Z+7	; 0x07
     714:	30 85       	ldd	r19, Z+8	; 0x08
     716:	81 85       	ldd	r24, Z+9	; 0x09
     718:	92 85       	ldd	r25, Z+10	; 0x0a
     71a:	28 17       	cp	r18, r24
     71c:	39 07       	cpc	r19, r25
     71e:	30 f0       	brcs	.+12     	; 0x72c <p_loop+0x22>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     720:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     724:	11 82       	std	Z+1, r1	; 0x01
	
	if (device.current>=device.current_limit)
	{
		set_motor_speed(0);	// Turn motor off
		// TODO set brake pin
		device.movementEnabled = FALSE;
     726:	13 86       	std	Z+11, r1	; 0x0b
		device.status = STOP;
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	84 87       	std	Z+12, r24	; 0x0c
	}
	
	if (device.movementEnabled == TRUE)
     72c:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <device+0xb>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	09 f0       	breq	.+2      	; 0x736 <p_loop+0x2c>
     734:	7b c0       	rjmp	.+246    	; 0x82c <p_loop+0x122>
	{
		if ((device.current_angle + MIN_ACT_ON_ERROR) <= device.setpoint_angle)	// setpoint is further, pull
     736:	e7 ee       	ldi	r30, 0xE7	; 231
     738:	f3 e0       	ldi	r31, 0x03	; 3
     73a:	23 81       	ldd	r18, Z+3	; 0x03
     73c:	34 81       	ldd	r19, Z+4	; 0x04
     73e:	82 81       	ldd	r24, Z+2	; 0x02
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	a9 01       	movw	r20, r18
     744:	4e 5f       	subi	r20, 0xFE	; 254
     746:	5f 4f       	sbci	r21, 0xFF	; 255
     748:	84 17       	cp	r24, r20
     74a:	95 07       	cpc	r25, r21
     74c:	78 f0       	brcs	.+30     	; 0x76c <p_loop+0x62>
		{
			device.error = (device.setpoint_angle - device.current_angle);	// Calc error
     74e:	ef 01       	movw	r28, r30
     750:	82 1b       	sub	r24, r18
     752:	93 0b       	sbc	r25, r19
     754:	96 83       	std	Z+6, r25	; 0x06
     756:	85 83       	std	Z+5, r24	; 0x05
			set_motor_dir(FORWARD);
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 75 03 	call	0x6ea	; 0x6ea <set_motor_dir>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     75e:	8f ef       	ldi	r24, 0xFF	; 255
     760:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     764:	89 83       	std	Y+1, r24	; 0x01
			set_motor_dir(FORWARD);
			speed = (P_GAIN * device.error);								// calculate output pwm value
			speed = (speed > 255) ? 255 : speed;							// limit output
			//set_motor_speed(speed);	// do output
			set_motor_speed(255);	// do output
			device.status = WORKING;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	8c 87       	std	Y+12, r24	; 0x0c
     76a:	67 c0       	rjmp	.+206    	; 0x83a <p_loop+0x130>
		}
		else if ((device.current_angle > MIN_ACT_ON_ERROR) && ((device.current_angle - MIN_ACT_ON_ERROR) >= device.setpoint_angle))  // past the setpoint, release
     76c:	23 30       	cpi	r18, 0x03	; 3
     76e:	31 05       	cpc	r19, r1
     770:	08 f4       	brcc	.+2      	; 0x774 <p_loop+0x6a>
     772:	52 c0       	rjmp	.+164    	; 0x818 <p_loop+0x10e>
     774:	a9 01       	movw	r20, r18
     776:	42 50       	subi	r20, 0x02	; 2
     778:	51 09       	sbc	r21, r1
     77a:	48 17       	cp	r20, r24
     77c:	59 07       	cpc	r21, r25
     77e:	08 f4       	brcc	.+2      	; 0x782 <p_loop+0x78>
     780:	4b c0       	rjmp	.+150    	; 0x818 <p_loop+0x10e>
		{
			device.error = (device.current_angle - device.setpoint_angle); // Calc error
     782:	28 1b       	sub	r18, r24
     784:	39 0b       	sbc	r19, r25
     786:	30 93 ed 03 	sts	0x03ED, r19	; 0x8003ed <device+0x6>
     78a:	20 93 ec 03 	sts	0x03EC, r18	; 0x8003ec <device+0x5>
			set_motor_dir(BACKWARD);
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	0e 94 75 03 	call	0x6ea	; 0x6ea <set_motor_dir>
			
			if (!init_move)	// do release a bit first
     794:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <init_move.2560>
     798:	81 11       	cpse	r24, r1
     79a:	09 c0       	rjmp	.+18     	; 0x7ae <p_loop+0xa4>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     7a2:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <device+0x1>
			set_motor_dir(BACKWARD);
			
			if (!init_move)	// do release a bit first
			{
				set_motor_speed(255);
				init_move = TRUE;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <init_move.2560>
     7ac:	46 c0       	rjmp	.+140    	; 0x83a <p_loop+0x130>
				//uart_puts("INITSPEED\n");
			}
			else
			{
				if (timer == (FUNCTION_TIMER_MS/INTERRUPT_MS))
     7ae:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <timer.2559>
     7b2:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <timer.2559+0x1>
     7b6:	82 30       	cpi	r24, 0x02	; 2
     7b8:	91 05       	cpc	r25, r1
     7ba:	41 f5       	brne	.+80     	; 0x80c <p_loop+0x102>
				{
					LED_TOGGLE;	// every 200ms?
     7bc:	9b b1       	in	r25, 0x0b	; 11
     7be:	80 e2       	ldi	r24, 0x20	; 32
     7c0:	89 27       	eor	r24, r25
     7c2:	8b b9       	out	0x0b, r24	; 11
					if (device.error < error_old)	// if moved a bit
     7c4:	20 91 ec 03 	lds	r18, 0x03EC	; 0x8003ec <device+0x5>
     7c8:	30 91 ed 03 	lds	r19, 0x03ED	; 0x8003ed <device+0x6>
     7cc:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__data_end>
     7d0:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <__data_end+0x1>
     7d4:	28 17       	cp	r18, r24
     7d6:	39 07       	cpc	r19, r25
     7d8:	30 f4       	brcc	.+12     	; 0x7e6 <p_loop+0xdc>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     7e0:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <device+0x1>
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <p_loop+0xe4>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     7e6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     7ea:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <device+0x1>
					{
						set_motor_speed(0);	// wait for the user to release a bit
						//uart_puts("OFF\n");
					}
					
					error_old = device.error;
     7ee:	e7 ee       	ldi	r30, 0xE7	; 231
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	85 81       	ldd	r24, Z+5	; 0x05
     7f4:	96 81       	ldd	r25, Z+6	; 0x06
     7f6:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <__data_end+0x1>
     7fa:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <__data_end>
					timer = 0;
     7fe:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <timer.2559+0x1>
     802:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <timer.2559>
					device.status = WORKING;
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	84 87       	std	Z+12, r24	; 0x0c
     80a:	17 c0       	rjmp	.+46     	; 0x83a <p_loop+0x130>
				}
				else
				{
					timer++;
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <timer.2559+0x1>
     812:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <timer.2559>
     816:	11 c0       	rjmp	.+34     	; 0x83a <p_loop+0x130>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     818:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     81c:	e7 ee       	ldi	r30, 0xE7	; 231
     81e:	f3 e0       	ldi	r31, 0x03	; 3
     820:	11 82       	std	Z+1, r1	; 0x01
			}
		}
		else
		{
			set_motor_speed(0);	// at position
			init_move = TRUE;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <init_move.2560>
			device.status = DONE;
     828:	14 86       	std	Z+12, r1	; 0x0c
     82a:	07 c0       	rjmp	.+14     	; 0x83a <p_loop+0x130>

void set_motor_speed(uint8_t speed)
{
	if (speed>=0 && speed<=255)
	{
		OCR2B = speed;	// set pwm duty cycle
     82c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		device.speed = speed;
     830:	e7 ee       	ldi	r30, 0xE7	; 231
     832:	f3 e0       	ldi	r31, 0x03	; 3
     834:	11 82       	std	Z+1, r1	; 0x01
		}
	}
	else
	{
		set_motor_speed(0);
		device.status = STOP;
     836:	82 e0       	ldi	r24, 0x02	; 2
     838:	84 87       	std	Z+12, r24	; 0x0c
	}	
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <main>:
	check_movement = TRUE;
}

int main(void)
{
	init_io();			/* Init IO*/
     840:	0e 94 88 02 	call	0x510	; 0x510 <init_io>
	init_int();			/* Init int for resfresh display every x ms	*/
     844:	0e 94 8d 02 	call	0x51a	; 0x51a <init_int>
	init_adc();			/* Init ADC */	
     848:	0e 94 b3 02 	call	0x566	; 0x566 <init_adc>
	
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );	/* Init Uart */
     84c:	87 e6       	ldi	r24, 0x67	; 103
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 b2 04 	call	0x964	; 0x964 <uart_init>
	sei();						/* Enable global interrupts for uart*/
     854:	78 94       	sei
	//uart_puts("\n\rInit Uart OK\n");
	
	device.current_limit = DEFAULT_CURRENT_LIMIT;	// set current limit
     856:	e7 ee       	ldi	r30, 0xE7	; 231
     858:	f3 e0       	ldi	r31, 0x03	; 3
     85a:	8c e2       	ldi	r24, 0x2C	; 44
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	92 87       	std	Z+10, r25	; 0x0a
     860:	81 87       	std	Z+9, r24	; 0x09
	device.movementEnabled = FALSE;
     862:	13 86       	std	Z+11, r1	; 0x0b
	//uart_puts("MoveItAll hand ready!");		/* Print version number	*/
	//print_float(VERSION,1);
	
	//set_motor_dir(FALSE);
	//set_motor_speed(127);//50%
	device.setpoint_angle = 50;
     864:	82 e3       	ldi	r24, 0x32	; 50
     866:	82 83       	std	Z+2, r24	; 0x02
	
	while(1)
	{	
		get_serial();
     868:	0e 94 3a 02 	call	0x474	; 0x474 <get_serial>
		if (command_ready) {process_command();}
     86c:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <command_ready>
     870:	81 11       	cpse	r24, r1
     872:	0e 94 5d 01 	call	0x2ba	; 0x2ba <process_command>
		
		if (check_movement)
     876:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <check_movement>
     87a:	88 23       	and	r24, r24
     87c:	21 f0       	breq	.+8      	; 0x886 <main+0x46>
		{
			p_loop();	// 	do p loop stuff
     87e:	0e 94 85 03 	call	0x70a	; 0x70a <p_loop>
			check_movement = FALSE;
     882:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <check_movement>
		}
		
		if (print_counter == REFRESH_LOOP_MS)
     886:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <print_counter>
     88a:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <print_counter+0x1>
     88e:	84 3f       	cpi	r24, 0xF4	; 244
     890:	91 40       	sbci	r25, 0x01	; 1
     892:	31 f4       	brne	.+12     	; 0x8a0 <main+0x60>
		{
			//print_values();
			print_HMI();
     894:	0e 94 23 03 	call	0x646	; 0x646 <print_HMI>
			print_counter = 0;
     898:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <print_counter+0x1>
     89c:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <print_counter>
		}
		print_counter++;	
     8a0:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <print_counter>
     8a4:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <print_counter+0x1>
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <print_counter+0x1>
     8ae:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <print_counter>
		
	}
     8b2:	da cf       	rjmp	.-76     	; 0x868 <main+0x28>

000008b4 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
     8b4:	1f 92       	push	r1
     8b6:	0f 92       	push	r0
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	0f 92       	push	r0
     8bc:	11 24       	eor	r1, r1
     8be:	2f 93       	push	r18
     8c0:	8f 93       	push	r24
     8c2:	9f 93       	push	r25
     8c4:	ef 93       	push	r30
     8c6:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
     8c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
     8cc:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
     8d0:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
     8d2:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <UART_RxHead>
     8d6:	ef 5f       	subi	r30, 0xFF	; 255
     8d8:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
     8da:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <UART_RxTail>
     8de:	e9 17       	cp	r30, r25
     8e0:	39 f0       	breq	.+14     	; 0x8f0 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
     8e2:	e0 93 56 02 	sts	0x0256, r30	; 0x800256 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	e7 5a       	subi	r30, 0xA7	; 167
     8ea:	fd 4f       	sbci	r31, 0xFD	; 253
     8ec:	20 83       	st	Z, r18
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
     8f0:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
     8f2:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <UART_LastRxError>
     8f6:	89 2b       	or	r24, r25
     8f8:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <UART_LastRxError>
}
     8fc:	ff 91       	pop	r31
     8fe:	ef 91       	pop	r30
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	2f 91       	pop	r18
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
     922:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <UART_TxHead>
     926:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <UART_TxTail>
     92a:	98 17       	cp	r25, r24
     92c:	69 f0       	breq	.+26     	; 0x948 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
     92e:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <UART_TxTail>
     932:	ef 5f       	subi	r30, 0xFF	; 255
     934:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
     936:	e0 93 57 02 	sts	0x0257, r30	; 0x800257 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	e7 56       	subi	r30, 0x67	; 103
     93e:	fd 4f       	sbci	r31, 0xFD	; 253
     940:	80 81       	ld	r24, Z
     942:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     946:	05 c0       	rjmp	.+10     	; 0x952 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
     948:	e1 ec       	ldi	r30, 0xC1	; 193
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	8f 7d       	andi	r24, 0xDF	; 223
     950:	80 83       	st	Z, r24
    }
}
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	9f 91       	pop	r25
     958:	8f 91       	pop	r24
     95a:	0f 90       	pop	r0
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	0f 90       	pop	r0
     960:	1f 90       	pop	r1
     962:	18 95       	reti

00000964 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
     964:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <UART_TxHead>
    UART_TxTail = 0;
     968:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <UART_TxTail>
    UART_RxHead = 0;
     96c:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <UART_RxHead>
    UART_RxTail = 0;
     970:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <UART_RxTail>
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
     974:	99 23       	and	r25, r25
     976:	24 f4       	brge	.+8      	; 0x980 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
     978:	22 e0       	ldi	r18, 0x02	; 2
     97a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   		baudrate &= ~0x8000;
     97e:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
     980:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRR0L = (unsigned char) baudrate;
     984:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     988:	88 e9       	ldi	r24, 0x98	; 152
     98a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
     98e:	86 e0       	ldi	r24, 0x06	; 6
     990:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     994:	08 95       	ret

00000996 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
     996:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <UART_RxHead>
     99a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <UART_RxTail>
     99e:	98 17       	cp	r25, r24
     9a0:	81 f0       	breq	.+32     	; 0x9c2 <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
     9a2:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <UART_RxTail>
     9a6:	ef 5f       	subi	r30, 0xFF	; 255
     9a8:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
     9aa:	e0 93 55 02 	sts	0x0255, r30	; 0x800255 <UART_RxTail>
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	e7 5a       	subi	r30, 0xA7	; 167
     9b2:	fd 4f       	sbci	r31, 0xFD	; 253
     9b4:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
     9b6:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <UART_LastRxError>
    UART_LastRxError = 0;
     9ba:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <UART_LastRxError>
    return data;
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
     9c6:	08 95       	ret

000009c8 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     9c8:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <UART_TxHead>
     9cc:	2f 5f       	subi	r18, 0xFF	; 255
     9ce:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
     9d0:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <UART_TxTail>
     9d4:	29 17       	cp	r18, r25
     9d6:	e1 f3       	breq	.-8      	; 0x9d0 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
     9d8:	e2 2f       	mov	r30, r18
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	e7 56       	subi	r30, 0x67	; 103
     9de:	fd 4f       	sbci	r31, 0xFD	; 253
     9e0:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
     9e2:	20 93 58 02 	sts	0x0258, r18	; 0x800258 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
     9e6:	e1 ec       	ldi	r30, 0xC1	; 193
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	80 62       	ori	r24, 0x20	; 32
     9ee:	80 83       	st	Z, r24
     9f0:	08 95       	ret

000009f2 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	ec 01       	movw	r28, r24
    while (*s) 
     9f8:	88 81       	ld	r24, Y
     9fa:	88 23       	and	r24, r24
     9fc:	31 f0       	breq	.+12     	; 0xa0a <uart_puts+0x18>
     9fe:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
     a00:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
     a04:	89 91       	ld	r24, Y+
     a06:	81 11       	cpse	r24, r1
     a08:	fb cf       	rjmp	.-10     	; 0xa00 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <vfprintf>:
     a10:	a0 e1       	ldi	r26, 0x10	; 16
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	ee e0       	ldi	r30, 0x0E	; 14
     a16:	f5 e0       	ldi	r31, 0x05	; 5
     a18:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__prologue_saves__>
     a1c:	7c 01       	movw	r14, r24
     a1e:	1b 01       	movw	r2, r22
     a20:	6a 01       	movw	r12, r20
     a22:	fc 01       	movw	r30, r24
     a24:	17 82       	std	Z+7, r1	; 0x07
     a26:	16 82       	std	Z+6, r1	; 0x06
     a28:	83 81       	ldd	r24, Z+3	; 0x03
     a2a:	81 ff       	sbrs	r24, 1
     a2c:	44 c3       	rjmp	.+1672   	; 0x10b6 <vfprintf+0x6a6>
     a2e:	9e 01       	movw	r18, r28
     a30:	2f 5f       	subi	r18, 0xFF	; 255
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	39 01       	movw	r6, r18
     a36:	f7 01       	movw	r30, r14
     a38:	93 81       	ldd	r25, Z+3	; 0x03
     a3a:	f1 01       	movw	r30, r2
     a3c:	93 fd       	sbrc	r25, 3
     a3e:	85 91       	lpm	r24, Z+
     a40:	93 ff       	sbrs	r25, 3
     a42:	81 91       	ld	r24, Z+
     a44:	1f 01       	movw	r2, r30
     a46:	88 23       	and	r24, r24
     a48:	09 f4       	brne	.+2      	; 0xa4c <vfprintf+0x3c>
     a4a:	31 c3       	rjmp	.+1634   	; 0x10ae <vfprintf+0x69e>
     a4c:	85 32       	cpi	r24, 0x25	; 37
     a4e:	39 f4       	brne	.+14     	; 0xa5e <vfprintf+0x4e>
     a50:	93 fd       	sbrc	r25, 3
     a52:	85 91       	lpm	r24, Z+
     a54:	93 ff       	sbrs	r25, 3
     a56:	81 91       	ld	r24, Z+
     a58:	1f 01       	movw	r2, r30
     a5a:	85 32       	cpi	r24, 0x25	; 37
     a5c:	39 f4       	brne	.+14     	; 0xa6c <vfprintf+0x5c>
     a5e:	b7 01       	movw	r22, r14
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     a66:	56 01       	movw	r10, r12
     a68:	65 01       	movw	r12, r10
     a6a:	e5 cf       	rjmp	.-54     	; 0xa36 <vfprintf+0x26>
     a6c:	10 e0       	ldi	r17, 0x00	; 0
     a6e:	51 2c       	mov	r5, r1
     a70:	91 2c       	mov	r9, r1
     a72:	ff e1       	ldi	r31, 0x1F	; 31
     a74:	f9 15       	cp	r31, r9
     a76:	d8 f0       	brcs	.+54     	; 0xaae <vfprintf+0x9e>
     a78:	8b 32       	cpi	r24, 0x2B	; 43
     a7a:	79 f0       	breq	.+30     	; 0xa9a <vfprintf+0x8a>
     a7c:	38 f4       	brcc	.+14     	; 0xa8c <vfprintf+0x7c>
     a7e:	80 32       	cpi	r24, 0x20	; 32
     a80:	79 f0       	breq	.+30     	; 0xaa0 <vfprintf+0x90>
     a82:	83 32       	cpi	r24, 0x23	; 35
     a84:	a1 f4       	brne	.+40     	; 0xaae <vfprintf+0x9e>
     a86:	f9 2d       	mov	r31, r9
     a88:	f0 61       	ori	r31, 0x10	; 16
     a8a:	2e c0       	rjmp	.+92     	; 0xae8 <vfprintf+0xd8>
     a8c:	8d 32       	cpi	r24, 0x2D	; 45
     a8e:	61 f0       	breq	.+24     	; 0xaa8 <vfprintf+0x98>
     a90:	80 33       	cpi	r24, 0x30	; 48
     a92:	69 f4       	brne	.+26     	; 0xaae <vfprintf+0x9e>
     a94:	29 2d       	mov	r18, r9
     a96:	21 60       	ori	r18, 0x01	; 1
     a98:	2d c0       	rjmp	.+90     	; 0xaf4 <vfprintf+0xe4>
     a9a:	39 2d       	mov	r19, r9
     a9c:	32 60       	ori	r19, 0x02	; 2
     a9e:	93 2e       	mov	r9, r19
     aa0:	89 2d       	mov	r24, r9
     aa2:	84 60       	ori	r24, 0x04	; 4
     aa4:	98 2e       	mov	r9, r24
     aa6:	2a c0       	rjmp	.+84     	; 0xafc <vfprintf+0xec>
     aa8:	e9 2d       	mov	r30, r9
     aaa:	e8 60       	ori	r30, 0x08	; 8
     aac:	15 c0       	rjmp	.+42     	; 0xad8 <vfprintf+0xc8>
     aae:	97 fc       	sbrc	r9, 7
     ab0:	2d c0       	rjmp	.+90     	; 0xb0c <vfprintf+0xfc>
     ab2:	20 ed       	ldi	r18, 0xD0	; 208
     ab4:	28 0f       	add	r18, r24
     ab6:	2a 30       	cpi	r18, 0x0A	; 10
     ab8:	88 f4       	brcc	.+34     	; 0xadc <vfprintf+0xcc>
     aba:	96 fe       	sbrs	r9, 6
     abc:	06 c0       	rjmp	.+12     	; 0xaca <vfprintf+0xba>
     abe:	3a e0       	ldi	r19, 0x0A	; 10
     ac0:	13 9f       	mul	r17, r19
     ac2:	20 0d       	add	r18, r0
     ac4:	11 24       	eor	r1, r1
     ac6:	12 2f       	mov	r17, r18
     ac8:	19 c0       	rjmp	.+50     	; 0xafc <vfprintf+0xec>
     aca:	8a e0       	ldi	r24, 0x0A	; 10
     acc:	58 9e       	mul	r5, r24
     ace:	20 0d       	add	r18, r0
     ad0:	11 24       	eor	r1, r1
     ad2:	52 2e       	mov	r5, r18
     ad4:	e9 2d       	mov	r30, r9
     ad6:	e0 62       	ori	r30, 0x20	; 32
     ad8:	9e 2e       	mov	r9, r30
     ada:	10 c0       	rjmp	.+32     	; 0xafc <vfprintf+0xec>
     adc:	8e 32       	cpi	r24, 0x2E	; 46
     ade:	31 f4       	brne	.+12     	; 0xaec <vfprintf+0xdc>
     ae0:	96 fc       	sbrc	r9, 6
     ae2:	e5 c2       	rjmp	.+1482   	; 0x10ae <vfprintf+0x69e>
     ae4:	f9 2d       	mov	r31, r9
     ae6:	f0 64       	ori	r31, 0x40	; 64
     ae8:	9f 2e       	mov	r9, r31
     aea:	08 c0       	rjmp	.+16     	; 0xafc <vfprintf+0xec>
     aec:	8c 36       	cpi	r24, 0x6C	; 108
     aee:	21 f4       	brne	.+8      	; 0xaf8 <vfprintf+0xe8>
     af0:	29 2d       	mov	r18, r9
     af2:	20 68       	ori	r18, 0x80	; 128
     af4:	92 2e       	mov	r9, r18
     af6:	02 c0       	rjmp	.+4      	; 0xafc <vfprintf+0xec>
     af8:	88 36       	cpi	r24, 0x68	; 104
     afa:	41 f4       	brne	.+16     	; 0xb0c <vfprintf+0xfc>
     afc:	f1 01       	movw	r30, r2
     afe:	93 fd       	sbrc	r25, 3
     b00:	85 91       	lpm	r24, Z+
     b02:	93 ff       	sbrs	r25, 3
     b04:	81 91       	ld	r24, Z+
     b06:	1f 01       	movw	r2, r30
     b08:	81 11       	cpse	r24, r1
     b0a:	b3 cf       	rjmp	.-154    	; 0xa72 <vfprintf+0x62>
     b0c:	9b eb       	ldi	r25, 0xBB	; 187
     b0e:	98 0f       	add	r25, r24
     b10:	93 30       	cpi	r25, 0x03	; 3
     b12:	20 f4       	brcc	.+8      	; 0xb1c <vfprintf+0x10c>
     b14:	99 2d       	mov	r25, r9
     b16:	90 61       	ori	r25, 0x10	; 16
     b18:	80 5e       	subi	r24, 0xE0	; 224
     b1a:	07 c0       	rjmp	.+14     	; 0xb2a <vfprintf+0x11a>
     b1c:	9b e9       	ldi	r25, 0x9B	; 155
     b1e:	98 0f       	add	r25, r24
     b20:	93 30       	cpi	r25, 0x03	; 3
     b22:	08 f0       	brcs	.+2      	; 0xb26 <vfprintf+0x116>
     b24:	66 c1       	rjmp	.+716    	; 0xdf2 <vfprintf+0x3e2>
     b26:	99 2d       	mov	r25, r9
     b28:	9f 7e       	andi	r25, 0xEF	; 239
     b2a:	96 ff       	sbrs	r25, 6
     b2c:	16 e0       	ldi	r17, 0x06	; 6
     b2e:	9f 73       	andi	r25, 0x3F	; 63
     b30:	99 2e       	mov	r9, r25
     b32:	85 36       	cpi	r24, 0x65	; 101
     b34:	19 f4       	brne	.+6      	; 0xb3c <vfprintf+0x12c>
     b36:	90 64       	ori	r25, 0x40	; 64
     b38:	99 2e       	mov	r9, r25
     b3a:	08 c0       	rjmp	.+16     	; 0xb4c <vfprintf+0x13c>
     b3c:	86 36       	cpi	r24, 0x66	; 102
     b3e:	21 f4       	brne	.+8      	; 0xb48 <vfprintf+0x138>
     b40:	39 2f       	mov	r19, r25
     b42:	30 68       	ori	r19, 0x80	; 128
     b44:	93 2e       	mov	r9, r19
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <vfprintf+0x13c>
     b48:	11 11       	cpse	r17, r1
     b4a:	11 50       	subi	r17, 0x01	; 1
     b4c:	97 fe       	sbrs	r9, 7
     b4e:	07 c0       	rjmp	.+14     	; 0xb5e <vfprintf+0x14e>
     b50:	1c 33       	cpi	r17, 0x3C	; 60
     b52:	50 f4       	brcc	.+20     	; 0xb68 <vfprintf+0x158>
     b54:	44 24       	eor	r4, r4
     b56:	43 94       	inc	r4
     b58:	41 0e       	add	r4, r17
     b5a:	27 e0       	ldi	r18, 0x07	; 7
     b5c:	0b c0       	rjmp	.+22     	; 0xb74 <vfprintf+0x164>
     b5e:	18 30       	cpi	r17, 0x08	; 8
     b60:	38 f0       	brcs	.+14     	; 0xb70 <vfprintf+0x160>
     b62:	27 e0       	ldi	r18, 0x07	; 7
     b64:	17 e0       	ldi	r17, 0x07	; 7
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <vfprintf+0x162>
     b68:	27 e0       	ldi	r18, 0x07	; 7
     b6a:	9c e3       	ldi	r25, 0x3C	; 60
     b6c:	49 2e       	mov	r4, r25
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <vfprintf+0x164>
     b70:	21 2f       	mov	r18, r17
     b72:	41 2c       	mov	r4, r1
     b74:	56 01       	movw	r10, r12
     b76:	84 e0       	ldi	r24, 0x04	; 4
     b78:	a8 0e       	add	r10, r24
     b7a:	b1 1c       	adc	r11, r1
     b7c:	f6 01       	movw	r30, r12
     b7e:	60 81       	ld	r22, Z
     b80:	71 81       	ldd	r23, Z+1	; 0x01
     b82:	82 81       	ldd	r24, Z+2	; 0x02
     b84:	93 81       	ldd	r25, Z+3	; 0x03
     b86:	04 2d       	mov	r16, r4
     b88:	a3 01       	movw	r20, r6
     b8a:	0e 94 ef 08 	call	0x11de	; 0x11de <__ftoa_engine>
     b8e:	6c 01       	movw	r12, r24
     b90:	f9 81       	ldd	r31, Y+1	; 0x01
     b92:	fc 87       	std	Y+12, r31	; 0x0c
     b94:	f0 ff       	sbrs	r31, 0
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <vfprintf+0x18c>
     b98:	f3 ff       	sbrs	r31, 3
     b9a:	06 c0       	rjmp	.+12     	; 0xba8 <vfprintf+0x198>
     b9c:	91 fc       	sbrc	r9, 1
     b9e:	06 c0       	rjmp	.+12     	; 0xbac <vfprintf+0x19c>
     ba0:	92 fe       	sbrs	r9, 2
     ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <vfprintf+0x1a0>
     ba4:	00 e2       	ldi	r16, 0x20	; 32
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <vfprintf+0x1a2>
     ba8:	0d e2       	ldi	r16, 0x2D	; 45
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <vfprintf+0x1a2>
     bac:	0b e2       	ldi	r16, 0x2B	; 43
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <vfprintf+0x1a2>
     bb0:	00 e0       	ldi	r16, 0x00	; 0
     bb2:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb4:	8c 70       	andi	r24, 0x0C	; 12
     bb6:	19 f0       	breq	.+6      	; 0xbbe <vfprintf+0x1ae>
     bb8:	01 11       	cpse	r16, r1
     bba:	5a c2       	rjmp	.+1204   	; 0x1070 <vfprintf+0x660>
     bbc:	9b c2       	rjmp	.+1334   	; 0x10f4 <vfprintf+0x6e4>
     bbe:	97 fe       	sbrs	r9, 7
     bc0:	10 c0       	rjmp	.+32     	; 0xbe2 <vfprintf+0x1d2>
     bc2:	4c 0c       	add	r4, r12
     bc4:	fc 85       	ldd	r31, Y+12	; 0x0c
     bc6:	f4 ff       	sbrs	r31, 4
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <vfprintf+0x1c2>
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	81 33       	cpi	r24, 0x31	; 49
     bce:	09 f4       	brne	.+2      	; 0xbd2 <vfprintf+0x1c2>
     bd0:	4a 94       	dec	r4
     bd2:	14 14       	cp	r1, r4
     bd4:	74 f5       	brge	.+92     	; 0xc32 <vfprintf+0x222>
     bd6:	28 e0       	ldi	r18, 0x08	; 8
     bd8:	24 15       	cp	r18, r4
     bda:	78 f5       	brcc	.+94     	; 0xc3a <vfprintf+0x22a>
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	48 2e       	mov	r4, r24
     be0:	2c c0       	rjmp	.+88     	; 0xc3a <vfprintf+0x22a>
     be2:	96 fc       	sbrc	r9, 6
     be4:	2a c0       	rjmp	.+84     	; 0xc3a <vfprintf+0x22a>
     be6:	81 2f       	mov	r24, r17
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	8c 15       	cp	r24, r12
     bec:	9d 05       	cpc	r25, r13
     bee:	9c f0       	brlt	.+38     	; 0xc16 <vfprintf+0x206>
     bf0:	3c ef       	ldi	r19, 0xFC	; 252
     bf2:	c3 16       	cp	r12, r19
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	d3 06       	cpc	r13, r19
     bf8:	74 f0       	brlt	.+28     	; 0xc16 <vfprintf+0x206>
     bfa:	89 2d       	mov	r24, r9
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	98 2e       	mov	r9, r24
     c00:	0a c0       	rjmp	.+20     	; 0xc16 <vfprintf+0x206>
     c02:	e2 e0       	ldi	r30, 0x02	; 2
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	ec 0f       	add	r30, r28
     c08:	fd 1f       	adc	r31, r29
     c0a:	e1 0f       	add	r30, r17
     c0c:	f1 1d       	adc	r31, r1
     c0e:	80 81       	ld	r24, Z
     c10:	80 33       	cpi	r24, 0x30	; 48
     c12:	19 f4       	brne	.+6      	; 0xc1a <vfprintf+0x20a>
     c14:	11 50       	subi	r17, 0x01	; 1
     c16:	11 11       	cpse	r17, r1
     c18:	f4 cf       	rjmp	.-24     	; 0xc02 <vfprintf+0x1f2>
     c1a:	97 fe       	sbrs	r9, 7
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <vfprintf+0x22a>
     c1e:	44 24       	eor	r4, r4
     c20:	43 94       	inc	r4
     c22:	41 0e       	add	r4, r17
     c24:	81 2f       	mov	r24, r17
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	c8 16       	cp	r12, r24
     c2a:	d9 06       	cpc	r13, r25
     c2c:	2c f4       	brge	.+10     	; 0xc38 <vfprintf+0x228>
     c2e:	1c 19       	sub	r17, r12
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <vfprintf+0x22a>
     c32:	44 24       	eor	r4, r4
     c34:	43 94       	inc	r4
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <vfprintf+0x22a>
     c38:	10 e0       	ldi	r17, 0x00	; 0
     c3a:	97 fe       	sbrs	r9, 7
     c3c:	06 c0       	rjmp	.+12     	; 0xc4a <vfprintf+0x23a>
     c3e:	1c 14       	cp	r1, r12
     c40:	1d 04       	cpc	r1, r13
     c42:	34 f4       	brge	.+12     	; 0xc50 <vfprintf+0x240>
     c44:	c6 01       	movw	r24, r12
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	05 c0       	rjmp	.+10     	; 0xc54 <vfprintf+0x244>
     c4a:	85 e0       	ldi	r24, 0x05	; 5
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x244>
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	01 11       	cpse	r16, r1
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	11 23       	and	r17, r17
     c5a:	31 f0       	breq	.+12     	; 0xc68 <vfprintf+0x258>
     c5c:	21 2f       	mov	r18, r17
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	2f 5f       	subi	r18, 0xFF	; 255
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	82 0f       	add	r24, r18
     c66:	93 1f       	adc	r25, r19
     c68:	25 2d       	mov	r18, r5
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	14 f4       	brge	.+4      	; 0xc76 <vfprintf+0x266>
     c72:	58 1a       	sub	r5, r24
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <vfprintf+0x268>
     c76:	51 2c       	mov	r5, r1
     c78:	89 2d       	mov	r24, r9
     c7a:	89 70       	andi	r24, 0x09	; 9
     c7c:	49 f4       	brne	.+18     	; 0xc90 <vfprintf+0x280>
     c7e:	55 20       	and	r5, r5
     c80:	39 f0       	breq	.+14     	; 0xc90 <vfprintf+0x280>
     c82:	b7 01       	movw	r22, r14
     c84:	80 e2       	ldi	r24, 0x20	; 32
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     c8c:	5a 94       	dec	r5
     c8e:	f7 cf       	rjmp	.-18     	; 0xc7e <vfprintf+0x26e>
     c90:	00 23       	and	r16, r16
     c92:	29 f0       	breq	.+10     	; 0xc9e <vfprintf+0x28e>
     c94:	b7 01       	movw	r22, r14
     c96:	80 2f       	mov	r24, r16
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     c9e:	93 fc       	sbrc	r9, 3
     ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <vfprintf+0x2a4>
     ca2:	55 20       	and	r5, r5
     ca4:	39 f0       	breq	.+14     	; 0xcb4 <vfprintf+0x2a4>
     ca6:	b7 01       	movw	r22, r14
     ca8:	80 e3       	ldi	r24, 0x30	; 48
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     cb0:	5a 94       	dec	r5
     cb2:	f7 cf       	rjmp	.-18     	; 0xca2 <vfprintf+0x292>
     cb4:	97 fe       	sbrs	r9, 7
     cb6:	4c c0       	rjmp	.+152    	; 0xd50 <vfprintf+0x340>
     cb8:	46 01       	movw	r8, r12
     cba:	d7 fe       	sbrs	r13, 7
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <vfprintf+0x2b2>
     cbe:	81 2c       	mov	r8, r1
     cc0:	91 2c       	mov	r9, r1
     cc2:	c6 01       	movw	r24, r12
     cc4:	88 19       	sub	r24, r8
     cc6:	99 09       	sbc	r25, r9
     cc8:	f3 01       	movw	r30, r6
     cca:	e8 0f       	add	r30, r24
     ccc:	f9 1f       	adc	r31, r25
     cce:	fe 87       	std	Y+14, r31	; 0x0e
     cd0:	ed 87       	std	Y+13, r30	; 0x0d
     cd2:	96 01       	movw	r18, r12
     cd4:	24 19       	sub	r18, r4
     cd6:	31 09       	sbc	r19, r1
     cd8:	38 8b       	std	Y+16, r19	; 0x10
     cda:	2f 87       	std	Y+15, r18	; 0x0f
     cdc:	01 2f       	mov	r16, r17
     cde:	10 e0       	ldi	r17, 0x00	; 0
     ce0:	11 95       	neg	r17
     ce2:	01 95       	neg	r16
     ce4:	11 09       	sbc	r17, r1
     ce6:	3f ef       	ldi	r19, 0xFF	; 255
     ce8:	83 16       	cp	r8, r19
     cea:	93 06       	cpc	r9, r19
     cec:	29 f4       	brne	.+10     	; 0xcf8 <vfprintf+0x2e8>
     cee:	b7 01       	movw	r22, r14
     cf0:	8e e2       	ldi	r24, 0x2E	; 46
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     cf8:	c8 14       	cp	r12, r8
     cfa:	d9 04       	cpc	r13, r9
     cfc:	4c f0       	brlt	.+18     	; 0xd10 <vfprintf+0x300>
     cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
     d00:	98 89       	ldd	r25, Y+16	; 0x10
     d02:	88 15       	cp	r24, r8
     d04:	99 05       	cpc	r25, r9
     d06:	24 f4       	brge	.+8      	; 0xd10 <vfprintf+0x300>
     d08:	ed 85       	ldd	r30, Y+13	; 0x0d
     d0a:	fe 85       	ldd	r31, Y+14	; 0x0e
     d0c:	81 81       	ldd	r24, Z+1	; 0x01
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <vfprintf+0x302>
     d10:	80 e3       	ldi	r24, 0x30	; 48
     d12:	f1 e0       	ldi	r31, 0x01	; 1
     d14:	8f 1a       	sub	r8, r31
     d16:	91 08       	sbc	r9, r1
     d18:	2d 85       	ldd	r18, Y+13	; 0x0d
     d1a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d1c:	2f 5f       	subi	r18, 0xFF	; 255
     d1e:	3f 4f       	sbci	r19, 0xFF	; 255
     d20:	3e 87       	std	Y+14, r19	; 0x0e
     d22:	2d 87       	std	Y+13, r18	; 0x0d
     d24:	80 16       	cp	r8, r16
     d26:	91 06       	cpc	r9, r17
     d28:	2c f0       	brlt	.+10     	; 0xd34 <vfprintf+0x324>
     d2a:	b7 01       	movw	r22, r14
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     d32:	d9 cf       	rjmp	.-78     	; 0xce6 <vfprintf+0x2d6>
     d34:	c8 14       	cp	r12, r8
     d36:	d9 04       	cpc	r13, r9
     d38:	41 f4       	brne	.+16     	; 0xd4a <vfprintf+0x33a>
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	96 33       	cpi	r25, 0x36	; 54
     d3e:	20 f4       	brcc	.+8      	; 0xd48 <vfprintf+0x338>
     d40:	95 33       	cpi	r25, 0x35	; 53
     d42:	19 f4       	brne	.+6      	; 0xd4a <vfprintf+0x33a>
     d44:	3c 85       	ldd	r19, Y+12	; 0x0c
     d46:	34 ff       	sbrs	r19, 4
     d48:	81 e3       	ldi	r24, 0x31	; 49
     d4a:	b7 01       	movw	r22, r14
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	4e c0       	rjmp	.+156    	; 0xdec <vfprintf+0x3dc>
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	81 33       	cpi	r24, 0x31	; 49
     d54:	19 f0       	breq	.+6      	; 0xd5c <vfprintf+0x34c>
     d56:	9c 85       	ldd	r25, Y+12	; 0x0c
     d58:	9f 7e       	andi	r25, 0xEF	; 239
     d5a:	9c 87       	std	Y+12, r25	; 0x0c
     d5c:	b7 01       	movw	r22, r14
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     d64:	11 11       	cpse	r17, r1
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <vfprintf+0x362>
     d68:	94 fc       	sbrc	r9, 4
     d6a:	18 c0       	rjmp	.+48     	; 0xd9c <vfprintf+0x38c>
     d6c:	85 e6       	ldi	r24, 0x65	; 101
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	17 c0       	rjmp	.+46     	; 0xda0 <vfprintf+0x390>
     d72:	b7 01       	movw	r22, r14
     d74:	8e e2       	ldi	r24, 0x2E	; 46
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     d7c:	1e 5f       	subi	r17, 0xFE	; 254
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	01 e0       	ldi	r16, 0x01	; 1
     d82:	08 0f       	add	r16, r24
     d84:	f3 01       	movw	r30, r6
     d86:	e8 0f       	add	r30, r24
     d88:	f1 1d       	adc	r31, r1
     d8a:	80 81       	ld	r24, Z
     d8c:	b7 01       	movw	r22, r14
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     d94:	80 2f       	mov	r24, r16
     d96:	01 13       	cpse	r16, r17
     d98:	f3 cf       	rjmp	.-26     	; 0xd80 <vfprintf+0x370>
     d9a:	e6 cf       	rjmp	.-52     	; 0xd68 <vfprintf+0x358>
     d9c:	85 e4       	ldi	r24, 0x45	; 69
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	b7 01       	movw	r22, r14
     da2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     da6:	d7 fc       	sbrc	r13, 7
     da8:	06 c0       	rjmp	.+12     	; 0xdb6 <vfprintf+0x3a6>
     daa:	c1 14       	cp	r12, r1
     dac:	d1 04       	cpc	r13, r1
     dae:	41 f4       	brne	.+16     	; 0xdc0 <vfprintf+0x3b0>
     db0:	ec 85       	ldd	r30, Y+12	; 0x0c
     db2:	e4 ff       	sbrs	r30, 4
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <vfprintf+0x3b0>
     db6:	d1 94       	neg	r13
     db8:	c1 94       	neg	r12
     dba:	d1 08       	sbc	r13, r1
     dbc:	8d e2       	ldi	r24, 0x2D	; 45
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <vfprintf+0x3b2>
     dc0:	8b e2       	ldi	r24, 0x2B	; 43
     dc2:	b7 01       	movw	r22, r14
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     dca:	80 e3       	ldi	r24, 0x30	; 48
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	c2 16       	cp	r12, r18
     dd0:	d1 04       	cpc	r13, r1
     dd2:	2c f0       	brlt	.+10     	; 0xdde <vfprintf+0x3ce>
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	fa e0       	ldi	r31, 0x0A	; 10
     dd8:	cf 1a       	sub	r12, r31
     dda:	d1 08       	sbc	r13, r1
     ddc:	f7 cf       	rjmp	.-18     	; 0xdcc <vfprintf+0x3bc>
     dde:	b7 01       	movw	r22, r14
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     de6:	b7 01       	movw	r22, r14
     de8:	c6 01       	movw	r24, r12
     dea:	c0 96       	adiw	r24, 0x30	; 48
     dec:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     df0:	54 c1       	rjmp	.+680    	; 0x109a <vfprintf+0x68a>
     df2:	83 36       	cpi	r24, 0x63	; 99
     df4:	31 f0       	breq	.+12     	; 0xe02 <vfprintf+0x3f2>
     df6:	83 37       	cpi	r24, 0x73	; 115
     df8:	79 f0       	breq	.+30     	; 0xe18 <vfprintf+0x408>
     dfa:	83 35       	cpi	r24, 0x53	; 83
     dfc:	09 f0       	breq	.+2      	; 0xe00 <vfprintf+0x3f0>
     dfe:	56 c0       	rjmp	.+172    	; 0xeac <vfprintf+0x49c>
     e00:	20 c0       	rjmp	.+64     	; 0xe42 <vfprintf+0x432>
     e02:	56 01       	movw	r10, r12
     e04:	32 e0       	ldi	r19, 0x02	; 2
     e06:	a3 0e       	add	r10, r19
     e08:	b1 1c       	adc	r11, r1
     e0a:	f6 01       	movw	r30, r12
     e0c:	80 81       	ld	r24, Z
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	01 e0       	ldi	r16, 0x01	; 1
     e12:	10 e0       	ldi	r17, 0x00	; 0
     e14:	63 01       	movw	r12, r6
     e16:	12 c0       	rjmp	.+36     	; 0xe3c <vfprintf+0x42c>
     e18:	56 01       	movw	r10, r12
     e1a:	f2 e0       	ldi	r31, 0x02	; 2
     e1c:	af 0e       	add	r10, r31
     e1e:	b1 1c       	adc	r11, r1
     e20:	f6 01       	movw	r30, r12
     e22:	c0 80       	ld	r12, Z
     e24:	d1 80       	ldd	r13, Z+1	; 0x01
     e26:	96 fe       	sbrs	r9, 6
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <vfprintf+0x420>
     e2a:	61 2f       	mov	r22, r17
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <vfprintf+0x424>
     e30:	6f ef       	ldi	r22, 0xFF	; 255
     e32:	7f ef       	ldi	r23, 0xFF	; 255
     e34:	c6 01       	movw	r24, r12
     e36:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <strnlen>
     e3a:	8c 01       	movw	r16, r24
     e3c:	f9 2d       	mov	r31, r9
     e3e:	ff 77       	andi	r31, 0x7F	; 127
     e40:	14 c0       	rjmp	.+40     	; 0xe6a <vfprintf+0x45a>
     e42:	56 01       	movw	r10, r12
     e44:	22 e0       	ldi	r18, 0x02	; 2
     e46:	a2 0e       	add	r10, r18
     e48:	b1 1c       	adc	r11, r1
     e4a:	f6 01       	movw	r30, r12
     e4c:	c0 80       	ld	r12, Z
     e4e:	d1 80       	ldd	r13, Z+1	; 0x01
     e50:	96 fe       	sbrs	r9, 6
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <vfprintf+0x44a>
     e54:	61 2f       	mov	r22, r17
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <vfprintf+0x44e>
     e5a:	6f ef       	ldi	r22, 0xFF	; 255
     e5c:	7f ef       	ldi	r23, 0xFF	; 255
     e5e:	c6 01       	movw	r24, r12
     e60:	0e 94 c7 09 	call	0x138e	; 0x138e <strnlen_P>
     e64:	8c 01       	movw	r16, r24
     e66:	f9 2d       	mov	r31, r9
     e68:	f0 68       	ori	r31, 0x80	; 128
     e6a:	9f 2e       	mov	r9, r31
     e6c:	f3 fd       	sbrc	r31, 3
     e6e:	1a c0       	rjmp	.+52     	; 0xea4 <vfprintf+0x494>
     e70:	85 2d       	mov	r24, r5
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	08 17       	cp	r16, r24
     e76:	19 07       	cpc	r17, r25
     e78:	a8 f4       	brcc	.+42     	; 0xea4 <vfprintf+0x494>
     e7a:	b7 01       	movw	r22, r14
     e7c:	80 e2       	ldi	r24, 0x20	; 32
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     e84:	5a 94       	dec	r5
     e86:	f4 cf       	rjmp	.-24     	; 0xe70 <vfprintf+0x460>
     e88:	f6 01       	movw	r30, r12
     e8a:	97 fc       	sbrc	r9, 7
     e8c:	85 91       	lpm	r24, Z+
     e8e:	97 fe       	sbrs	r9, 7
     e90:	81 91       	ld	r24, Z+
     e92:	6f 01       	movw	r12, r30
     e94:	b7 01       	movw	r22, r14
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     e9c:	51 10       	cpse	r5, r1
     e9e:	5a 94       	dec	r5
     ea0:	01 50       	subi	r16, 0x01	; 1
     ea2:	11 09       	sbc	r17, r1
     ea4:	01 15       	cp	r16, r1
     ea6:	11 05       	cpc	r17, r1
     ea8:	79 f7       	brne	.-34     	; 0xe88 <vfprintf+0x478>
     eaa:	f7 c0       	rjmp	.+494    	; 0x109a <vfprintf+0x68a>
     eac:	84 36       	cpi	r24, 0x64	; 100
     eae:	11 f0       	breq	.+4      	; 0xeb4 <vfprintf+0x4a4>
     eb0:	89 36       	cpi	r24, 0x69	; 105
     eb2:	61 f5       	brne	.+88     	; 0xf0c <vfprintf+0x4fc>
     eb4:	56 01       	movw	r10, r12
     eb6:	97 fe       	sbrs	r9, 7
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <vfprintf+0x4bc>
     eba:	24 e0       	ldi	r18, 0x04	; 4
     ebc:	a2 0e       	add	r10, r18
     ebe:	b1 1c       	adc	r11, r1
     ec0:	f6 01       	movw	r30, r12
     ec2:	60 81       	ld	r22, Z
     ec4:	71 81       	ldd	r23, Z+1	; 0x01
     ec6:	82 81       	ldd	r24, Z+2	; 0x02
     ec8:	93 81       	ldd	r25, Z+3	; 0x03
     eca:	0a c0       	rjmp	.+20     	; 0xee0 <vfprintf+0x4d0>
     ecc:	f2 e0       	ldi	r31, 0x02	; 2
     ece:	af 0e       	add	r10, r31
     ed0:	b1 1c       	adc	r11, r1
     ed2:	f6 01       	movw	r30, r12
     ed4:	60 81       	ld	r22, Z
     ed6:	71 81       	ldd	r23, Z+1	; 0x01
     ed8:	07 2e       	mov	r0, r23
     eda:	00 0c       	add	r0, r0
     edc:	88 0b       	sbc	r24, r24
     ede:	99 0b       	sbc	r25, r25
     ee0:	f9 2d       	mov	r31, r9
     ee2:	ff 76       	andi	r31, 0x6F	; 111
     ee4:	9f 2e       	mov	r9, r31
     ee6:	97 ff       	sbrs	r25, 7
     ee8:	09 c0       	rjmp	.+18     	; 0xefc <vfprintf+0x4ec>
     eea:	90 95       	com	r25
     eec:	80 95       	com	r24
     eee:	70 95       	com	r23
     ef0:	61 95       	neg	r22
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	8f 4f       	sbci	r24, 0xFF	; 255
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	f0 68       	ori	r31, 0x80	; 128
     efa:	9f 2e       	mov	r9, r31
     efc:	2a e0       	ldi	r18, 0x0A	; 10
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	a3 01       	movw	r20, r6
     f02:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__ultoa_invert>
     f06:	c8 2e       	mov	r12, r24
     f08:	c6 18       	sub	r12, r6
     f0a:	3f c0       	rjmp	.+126    	; 0xf8a <vfprintf+0x57a>
     f0c:	09 2d       	mov	r16, r9
     f0e:	85 37       	cpi	r24, 0x75	; 117
     f10:	21 f4       	brne	.+8      	; 0xf1a <vfprintf+0x50a>
     f12:	0f 7e       	andi	r16, 0xEF	; 239
     f14:	2a e0       	ldi	r18, 0x0A	; 10
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	1d c0       	rjmp	.+58     	; 0xf54 <vfprintf+0x544>
     f1a:	09 7f       	andi	r16, 0xF9	; 249
     f1c:	8f 36       	cpi	r24, 0x6F	; 111
     f1e:	91 f0       	breq	.+36     	; 0xf44 <vfprintf+0x534>
     f20:	18 f4       	brcc	.+6      	; 0xf28 <vfprintf+0x518>
     f22:	88 35       	cpi	r24, 0x58	; 88
     f24:	59 f0       	breq	.+22     	; 0xf3c <vfprintf+0x52c>
     f26:	c3 c0       	rjmp	.+390    	; 0x10ae <vfprintf+0x69e>
     f28:	80 37       	cpi	r24, 0x70	; 112
     f2a:	19 f0       	breq	.+6      	; 0xf32 <vfprintf+0x522>
     f2c:	88 37       	cpi	r24, 0x78	; 120
     f2e:	11 f0       	breq	.+4      	; 0xf34 <vfprintf+0x524>
     f30:	be c0       	rjmp	.+380    	; 0x10ae <vfprintf+0x69e>
     f32:	00 61       	ori	r16, 0x10	; 16
     f34:	04 ff       	sbrs	r16, 4
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <vfprintf+0x53a>
     f38:	04 60       	ori	r16, 0x04	; 4
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <vfprintf+0x53a>
     f3c:	94 fe       	sbrs	r9, 4
     f3e:	08 c0       	rjmp	.+16     	; 0xf50 <vfprintf+0x540>
     f40:	06 60       	ori	r16, 0x06	; 6
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <vfprintf+0x540>
     f44:	28 e0       	ldi	r18, 0x08	; 8
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <vfprintf+0x544>
     f4a:	20 e1       	ldi	r18, 0x10	; 16
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <vfprintf+0x544>
     f50:	20 e1       	ldi	r18, 0x10	; 16
     f52:	32 e0       	ldi	r19, 0x02	; 2
     f54:	56 01       	movw	r10, r12
     f56:	07 ff       	sbrs	r16, 7
     f58:	09 c0       	rjmp	.+18     	; 0xf6c <vfprintf+0x55c>
     f5a:	84 e0       	ldi	r24, 0x04	; 4
     f5c:	a8 0e       	add	r10, r24
     f5e:	b1 1c       	adc	r11, r1
     f60:	f6 01       	movw	r30, r12
     f62:	60 81       	ld	r22, Z
     f64:	71 81       	ldd	r23, Z+1	; 0x01
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	08 c0       	rjmp	.+16     	; 0xf7c <vfprintf+0x56c>
     f6c:	f2 e0       	ldi	r31, 0x02	; 2
     f6e:	af 0e       	add	r10, r31
     f70:	b1 1c       	adc	r11, r1
     f72:	f6 01       	movw	r30, r12
     f74:	60 81       	ld	r22, Z
     f76:	71 81       	ldd	r23, Z+1	; 0x01
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a3 01       	movw	r20, r6
     f7e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__ultoa_invert>
     f82:	c8 2e       	mov	r12, r24
     f84:	c6 18       	sub	r12, r6
     f86:	0f 77       	andi	r16, 0x7F	; 127
     f88:	90 2e       	mov	r9, r16
     f8a:	96 fe       	sbrs	r9, 6
     f8c:	0b c0       	rjmp	.+22     	; 0xfa4 <vfprintf+0x594>
     f8e:	09 2d       	mov	r16, r9
     f90:	0e 7f       	andi	r16, 0xFE	; 254
     f92:	c1 16       	cp	r12, r17
     f94:	50 f4       	brcc	.+20     	; 0xfaa <vfprintf+0x59a>
     f96:	94 fe       	sbrs	r9, 4
     f98:	0a c0       	rjmp	.+20     	; 0xfae <vfprintf+0x59e>
     f9a:	92 fc       	sbrc	r9, 2
     f9c:	08 c0       	rjmp	.+16     	; 0xfae <vfprintf+0x59e>
     f9e:	09 2d       	mov	r16, r9
     fa0:	0e 7e       	andi	r16, 0xEE	; 238
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <vfprintf+0x59e>
     fa4:	dc 2c       	mov	r13, r12
     fa6:	09 2d       	mov	r16, r9
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <vfprintf+0x5a0>
     faa:	dc 2c       	mov	r13, r12
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <vfprintf+0x5a0>
     fae:	d1 2e       	mov	r13, r17
     fb0:	04 ff       	sbrs	r16, 4
     fb2:	0d c0       	rjmp	.+26     	; 0xfce <vfprintf+0x5be>
     fb4:	fe 01       	movw	r30, r28
     fb6:	ec 0d       	add	r30, r12
     fb8:	f1 1d       	adc	r31, r1
     fba:	80 81       	ld	r24, Z
     fbc:	80 33       	cpi	r24, 0x30	; 48
     fbe:	11 f4       	brne	.+4      	; 0xfc4 <vfprintf+0x5b4>
     fc0:	09 7e       	andi	r16, 0xE9	; 233
     fc2:	09 c0       	rjmp	.+18     	; 0xfd6 <vfprintf+0x5c6>
     fc4:	02 ff       	sbrs	r16, 2
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <vfprintf+0x5c4>
     fc8:	d3 94       	inc	r13
     fca:	d3 94       	inc	r13
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <vfprintf+0x5c6>
     fce:	80 2f       	mov	r24, r16
     fd0:	86 78       	andi	r24, 0x86	; 134
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <vfprintf+0x5c6>
     fd4:	d3 94       	inc	r13
     fd6:	03 fd       	sbrc	r16, 3
     fd8:	11 c0       	rjmp	.+34     	; 0xffc <vfprintf+0x5ec>
     fda:	00 ff       	sbrs	r16, 0
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <vfprintf+0x5da>
     fde:	1c 2d       	mov	r17, r12
     fe0:	d5 14       	cp	r13, r5
     fe2:	80 f4       	brcc	.+32     	; 0x1004 <vfprintf+0x5f4>
     fe4:	15 0d       	add	r17, r5
     fe6:	1d 19       	sub	r17, r13
     fe8:	0d c0       	rjmp	.+26     	; 0x1004 <vfprintf+0x5f4>
     fea:	d5 14       	cp	r13, r5
     fec:	58 f4       	brcc	.+22     	; 0x1004 <vfprintf+0x5f4>
     fee:	b7 01       	movw	r22, r14
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
     ff8:	d3 94       	inc	r13
     ffa:	f7 cf       	rjmp	.-18     	; 0xfea <vfprintf+0x5da>
     ffc:	d5 14       	cp	r13, r5
     ffe:	10 f4       	brcc	.+4      	; 0x1004 <vfprintf+0x5f4>
    1000:	5d 18       	sub	r5, r13
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <vfprintf+0x5f6>
    1004:	51 2c       	mov	r5, r1
    1006:	04 ff       	sbrs	r16, 4
    1008:	10 c0       	rjmp	.+32     	; 0x102a <vfprintf+0x61a>
    100a:	b7 01       	movw	r22, r14
    100c:	80 e3       	ldi	r24, 0x30	; 48
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
    1014:	02 ff       	sbrs	r16, 2
    1016:	17 c0       	rjmp	.+46     	; 0x1046 <vfprintf+0x636>
    1018:	01 fd       	sbrc	r16, 1
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <vfprintf+0x612>
    101c:	88 e7       	ldi	r24, 0x78	; 120
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <vfprintf+0x616>
    1022:	88 e5       	ldi	r24, 0x58	; 88
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	b7 01       	movw	r22, r14
    1028:	0c c0       	rjmp	.+24     	; 0x1042 <vfprintf+0x632>
    102a:	80 2f       	mov	r24, r16
    102c:	86 78       	andi	r24, 0x86	; 134
    102e:	59 f0       	breq	.+22     	; 0x1046 <vfprintf+0x636>
    1030:	01 ff       	sbrs	r16, 1
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <vfprintf+0x628>
    1034:	8b e2       	ldi	r24, 0x2B	; 43
    1036:	01 c0       	rjmp	.+2      	; 0x103a <vfprintf+0x62a>
    1038:	80 e2       	ldi	r24, 0x20	; 32
    103a:	07 fd       	sbrc	r16, 7
    103c:	8d e2       	ldi	r24, 0x2D	; 45
    103e:	b7 01       	movw	r22, r14
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
    1046:	c1 16       	cp	r12, r17
    1048:	38 f4       	brcc	.+14     	; 0x1058 <vfprintf+0x648>
    104a:	b7 01       	movw	r22, r14
    104c:	80 e3       	ldi	r24, 0x30	; 48
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
    1054:	11 50       	subi	r17, 0x01	; 1
    1056:	f7 cf       	rjmp	.-18     	; 0x1046 <vfprintf+0x636>
    1058:	ca 94       	dec	r12
    105a:	f3 01       	movw	r30, r6
    105c:	ec 0d       	add	r30, r12
    105e:	f1 1d       	adc	r31, r1
    1060:	80 81       	ld	r24, Z
    1062:	b7 01       	movw	r22, r14
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
    106a:	c1 10       	cpse	r12, r1
    106c:	f5 cf       	rjmp	.-22     	; 0x1058 <vfprintf+0x648>
    106e:	15 c0       	rjmp	.+42     	; 0x109a <vfprintf+0x68a>
    1070:	f4 e0       	ldi	r31, 0x04	; 4
    1072:	f5 15       	cp	r31, r5
    1074:	60 f5       	brcc	.+88     	; 0x10ce <vfprintf+0x6be>
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	58 1a       	sub	r5, r24
    107a:	93 fe       	sbrs	r9, 3
    107c:	1f c0       	rjmp	.+62     	; 0x10bc <vfprintf+0x6ac>
    107e:	01 11       	cpse	r16, r1
    1080:	27 c0       	rjmp	.+78     	; 0x10d0 <vfprintf+0x6c0>
    1082:	2c 85       	ldd	r18, Y+12	; 0x0c
    1084:	23 ff       	sbrs	r18, 3
    1086:	2a c0       	rjmp	.+84     	; 0x10dc <vfprintf+0x6cc>
    1088:	0e ed       	ldi	r16, 0xDE	; 222
    108a:	10 e0       	ldi	r17, 0x00	; 0
    108c:	39 2d       	mov	r19, r9
    108e:	30 71       	andi	r19, 0x10	; 16
    1090:	93 2e       	mov	r9, r19
    1092:	f8 01       	movw	r30, r16
    1094:	84 91       	lpm	r24, Z
    1096:	81 11       	cpse	r24, r1
    1098:	24 c0       	rjmp	.+72     	; 0x10e2 <vfprintf+0x6d2>
    109a:	55 20       	and	r5, r5
    109c:	09 f4       	brne	.+2      	; 0x10a0 <vfprintf+0x690>
    109e:	e4 cc       	rjmp	.-1592   	; 0xa68 <vfprintf+0x58>
    10a0:	b7 01       	movw	r22, r14
    10a2:	80 e2       	ldi	r24, 0x20	; 32
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
    10aa:	5a 94       	dec	r5
    10ac:	f6 cf       	rjmp	.-20     	; 0x109a <vfprintf+0x68a>
    10ae:	f7 01       	movw	r30, r14
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	97 81       	ldd	r25, Z+7	; 0x07
    10b4:	26 c0       	rjmp	.+76     	; 0x1102 <vfprintf+0x6f2>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f ef       	ldi	r25, 0xFF	; 255
    10ba:	23 c0       	rjmp	.+70     	; 0x1102 <vfprintf+0x6f2>
    10bc:	b7 01       	movw	r22, r14
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
    10c6:	5a 94       	dec	r5
    10c8:	51 10       	cpse	r5, r1
    10ca:	f8 cf       	rjmp	.-16     	; 0x10bc <vfprintf+0x6ac>
    10cc:	d8 cf       	rjmp	.-80     	; 0x107e <vfprintf+0x66e>
    10ce:	51 2c       	mov	r5, r1
    10d0:	b7 01       	movw	r22, r14
    10d2:	80 2f       	mov	r24, r16
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
    10da:	d3 cf       	rjmp	.-90     	; 0x1082 <vfprintf+0x672>
    10dc:	02 ee       	ldi	r16, 0xE2	; 226
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	d5 cf       	rjmp	.-86     	; 0x108c <vfprintf+0x67c>
    10e2:	91 10       	cpse	r9, r1
    10e4:	80 52       	subi	r24, 0x20	; 32
    10e6:	b7 01       	movw	r22, r14
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 1c 0a 	call	0x1438	; 0x1438 <fputc>
    10ee:	0f 5f       	subi	r16, 0xFF	; 255
    10f0:	1f 4f       	sbci	r17, 0xFF	; 255
    10f2:	cf cf       	rjmp	.-98     	; 0x1092 <vfprintf+0x682>
    10f4:	23 e0       	ldi	r18, 0x03	; 3
    10f6:	25 15       	cp	r18, r5
    10f8:	10 f4       	brcc	.+4      	; 0x10fe <vfprintf+0x6ee>
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	bd cf       	rjmp	.-134    	; 0x1078 <vfprintf+0x668>
    10fe:	51 2c       	mov	r5, r1
    1100:	c0 cf       	rjmp	.-128    	; 0x1082 <vfprintf+0x672>
    1102:	60 96       	adiw	r28, 0x10	; 16
    1104:	e2 e1       	ldi	r30, 0x12	; 18
    1106:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__epilogue_restores__>

0000110a <__tablejump2__>:
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	05 90       	lpm	r0, Z+
    1110:	f4 91       	lpm	r31, Z
    1112:	e0 2d       	mov	r30, r0
    1114:	09 94       	ijmp

00001116 <__umulhisi3>:
    1116:	a2 9f       	mul	r26, r18
    1118:	b0 01       	movw	r22, r0
    111a:	b3 9f       	mul	r27, r19
    111c:	c0 01       	movw	r24, r0
    111e:	a3 9f       	mul	r26, r19
    1120:	70 0d       	add	r23, r0
    1122:	81 1d       	adc	r24, r1
    1124:	11 24       	eor	r1, r1
    1126:	91 1d       	adc	r25, r1
    1128:	b2 9f       	mul	r27, r18
    112a:	70 0d       	add	r23, r0
    112c:	81 1d       	adc	r24, r1
    112e:	11 24       	eor	r1, r1
    1130:	91 1d       	adc	r25, r1
    1132:	08 95       	ret

00001134 <__prologue_saves__>:
    1134:	2f 92       	push	r2
    1136:	3f 92       	push	r3
    1138:	4f 92       	push	r4
    113a:	5f 92       	push	r5
    113c:	6f 92       	push	r6
    113e:	7f 92       	push	r7
    1140:	8f 92       	push	r8
    1142:	9f 92       	push	r9
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	ca 1b       	sub	r28, r26
    115e:	db 0b       	sbc	r29, r27
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	09 94       	ijmp

0000116c <__epilogue_restores__>:
    116c:	2a 88       	ldd	r2, Y+18	; 0x12
    116e:	39 88       	ldd	r3, Y+17	; 0x11
    1170:	48 88       	ldd	r4, Y+16	; 0x10
    1172:	5f 84       	ldd	r5, Y+15	; 0x0f
    1174:	6e 84       	ldd	r6, Y+14	; 0x0e
    1176:	7d 84       	ldd	r7, Y+13	; 0x0d
    1178:	8c 84       	ldd	r8, Y+12	; 0x0c
    117a:	9b 84       	ldd	r9, Y+11	; 0x0b
    117c:	aa 84       	ldd	r10, Y+10	; 0x0a
    117e:	b9 84       	ldd	r11, Y+9	; 0x09
    1180:	c8 84       	ldd	r12, Y+8	; 0x08
    1182:	df 80       	ldd	r13, Y+7	; 0x07
    1184:	ee 80       	ldd	r14, Y+6	; 0x06
    1186:	fd 80       	ldd	r15, Y+5	; 0x05
    1188:	0c 81       	ldd	r16, Y+4	; 0x04
    118a:	1b 81       	ldd	r17, Y+3	; 0x03
    118c:	aa 81       	ldd	r26, Y+2	; 0x02
    118e:	b9 81       	ldd	r27, Y+1	; 0x01
    1190:	ce 0f       	add	r28, r30
    1192:	d1 1d       	adc	r29, r1
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	ed 01       	movw	r28, r26
    11a0:	08 95       	ret

000011a2 <atoi>:
    11a2:	fc 01       	movw	r30, r24
    11a4:	88 27       	eor	r24, r24
    11a6:	99 27       	eor	r25, r25
    11a8:	e8 94       	clt
    11aa:	21 91       	ld	r18, Z+
    11ac:	20 32       	cpi	r18, 0x20	; 32
    11ae:	e9 f3       	breq	.-6      	; 0x11aa <atoi+0x8>
    11b0:	29 30       	cpi	r18, 0x09	; 9
    11b2:	10 f0       	brcs	.+4      	; 0x11b8 <atoi+0x16>
    11b4:	2e 30       	cpi	r18, 0x0E	; 14
    11b6:	c8 f3       	brcs	.-14     	; 0x11aa <atoi+0x8>
    11b8:	2b 32       	cpi	r18, 0x2B	; 43
    11ba:	41 f0       	breq	.+16     	; 0x11cc <atoi+0x2a>
    11bc:	2d 32       	cpi	r18, 0x2D	; 45
    11be:	39 f4       	brne	.+14     	; 0x11ce <atoi+0x2c>
    11c0:	68 94       	set
    11c2:	04 c0       	rjmp	.+8      	; 0x11cc <atoi+0x2a>
    11c4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__mulhi_const_10>
    11c8:	82 0f       	add	r24, r18
    11ca:	91 1d       	adc	r25, r1
    11cc:	21 91       	ld	r18, Z+
    11ce:	20 53       	subi	r18, 0x30	; 48
    11d0:	2a 30       	cpi	r18, 0x0A	; 10
    11d2:	c0 f3       	brcs	.-16     	; 0x11c4 <atoi+0x22>
    11d4:	1e f4       	brtc	.+6      	; 0x11dc <atoi+0x3a>
    11d6:	90 95       	com	r25
    11d8:	81 95       	neg	r24
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	08 95       	ret

000011de <__ftoa_engine>:
    11de:	28 30       	cpi	r18, 0x08	; 8
    11e0:	08 f0       	brcs	.+2      	; 0x11e4 <__ftoa_engine+0x6>
    11e2:	27 e0       	ldi	r18, 0x07	; 7
    11e4:	33 27       	eor	r19, r19
    11e6:	da 01       	movw	r26, r20
    11e8:	99 0f       	add	r25, r25
    11ea:	31 1d       	adc	r19, r1
    11ec:	87 fd       	sbrc	r24, 7
    11ee:	91 60       	ori	r25, 0x01	; 1
    11f0:	00 96       	adiw	r24, 0x00	; 0
    11f2:	61 05       	cpc	r22, r1
    11f4:	71 05       	cpc	r23, r1
    11f6:	39 f4       	brne	.+14     	; 0x1206 <__ftoa_engine+0x28>
    11f8:	32 60       	ori	r19, 0x02	; 2
    11fa:	2e 5f       	subi	r18, 0xFE	; 254
    11fc:	3d 93       	st	X+, r19
    11fe:	30 e3       	ldi	r19, 0x30	; 48
    1200:	2a 95       	dec	r18
    1202:	e1 f7       	brne	.-8      	; 0x11fc <__ftoa_engine+0x1e>
    1204:	08 95       	ret
    1206:	9f 3f       	cpi	r25, 0xFF	; 255
    1208:	30 f0       	brcs	.+12     	; 0x1216 <__ftoa_engine+0x38>
    120a:	80 38       	cpi	r24, 0x80	; 128
    120c:	71 05       	cpc	r23, r1
    120e:	61 05       	cpc	r22, r1
    1210:	09 f0       	breq	.+2      	; 0x1214 <__ftoa_engine+0x36>
    1212:	3c 5f       	subi	r19, 0xFC	; 252
    1214:	3c 5f       	subi	r19, 0xFC	; 252
    1216:	3d 93       	st	X+, r19
    1218:	91 30       	cpi	r25, 0x01	; 1
    121a:	08 f0       	brcs	.+2      	; 0x121e <__ftoa_engine+0x40>
    121c:	80 68       	ori	r24, 0x80	; 128
    121e:	91 1d       	adc	r25, r1
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	1f 93       	push	r17
    1226:	0f 93       	push	r16
    1228:	ff 92       	push	r15
    122a:	ef 92       	push	r14
    122c:	19 2f       	mov	r17, r25
    122e:	98 7f       	andi	r25, 0xF8	; 248
    1230:	96 95       	lsr	r25
    1232:	e9 2f       	mov	r30, r25
    1234:	96 95       	lsr	r25
    1236:	96 95       	lsr	r25
    1238:	e9 0f       	add	r30, r25
    123a:	ff 27       	eor	r31, r31
    123c:	e0 5c       	subi	r30, 0xC0	; 192
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	99 27       	eor	r25, r25
    1242:	33 27       	eor	r19, r19
    1244:	ee 24       	eor	r14, r14
    1246:	ff 24       	eor	r15, r15
    1248:	a7 01       	movw	r20, r14
    124a:	e7 01       	movw	r28, r14
    124c:	05 90       	lpm	r0, Z+
    124e:	08 94       	sec
    1250:	07 94       	ror	r0
    1252:	28 f4       	brcc	.+10     	; 0x125e <__ftoa_engine+0x80>
    1254:	36 0f       	add	r19, r22
    1256:	e7 1e       	adc	r14, r23
    1258:	f8 1e       	adc	r15, r24
    125a:	49 1f       	adc	r20, r25
    125c:	51 1d       	adc	r21, r1
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	06 94       	lsr	r0
    1268:	a1 f7       	brne	.-24     	; 0x1252 <__ftoa_engine+0x74>
    126a:	05 90       	lpm	r0, Z+
    126c:	07 94       	ror	r0
    126e:	28 f4       	brcc	.+10     	; 0x127a <__ftoa_engine+0x9c>
    1270:	e7 0e       	add	r14, r23
    1272:	f8 1e       	adc	r15, r24
    1274:	49 1f       	adc	r20, r25
    1276:	56 1f       	adc	r21, r22
    1278:	c1 1d       	adc	r28, r1
    127a:	77 0f       	add	r23, r23
    127c:	88 1f       	adc	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	66 1f       	adc	r22, r22
    1282:	06 94       	lsr	r0
    1284:	a1 f7       	brne	.-24     	; 0x126e <__ftoa_engine+0x90>
    1286:	05 90       	lpm	r0, Z+
    1288:	07 94       	ror	r0
    128a:	28 f4       	brcc	.+10     	; 0x1296 <__ftoa_engine+0xb8>
    128c:	f8 0e       	add	r15, r24
    128e:	49 1f       	adc	r20, r25
    1290:	56 1f       	adc	r21, r22
    1292:	c7 1f       	adc	r28, r23
    1294:	d1 1d       	adc	r29, r1
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	66 1f       	adc	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	06 94       	lsr	r0
    12a0:	a1 f7       	brne	.-24     	; 0x128a <__ftoa_engine+0xac>
    12a2:	05 90       	lpm	r0, Z+
    12a4:	07 94       	ror	r0
    12a6:	20 f4       	brcc	.+8      	; 0x12b0 <__ftoa_engine+0xd2>
    12a8:	49 0f       	add	r20, r25
    12aa:	56 1f       	adc	r21, r22
    12ac:	c7 1f       	adc	r28, r23
    12ae:	d8 1f       	adc	r29, r24
    12b0:	99 0f       	add	r25, r25
    12b2:	66 1f       	adc	r22, r22
    12b4:	77 1f       	adc	r23, r23
    12b6:	88 1f       	adc	r24, r24
    12b8:	06 94       	lsr	r0
    12ba:	a9 f7       	brne	.-22     	; 0x12a6 <__ftoa_engine+0xc8>
    12bc:	84 91       	lpm	r24, Z
    12be:	10 95       	com	r17
    12c0:	17 70       	andi	r17, 0x07	; 7
    12c2:	41 f0       	breq	.+16     	; 0x12d4 <__ftoa_engine+0xf6>
    12c4:	d6 95       	lsr	r29
    12c6:	c7 95       	ror	r28
    12c8:	57 95       	ror	r21
    12ca:	47 95       	ror	r20
    12cc:	f7 94       	ror	r15
    12ce:	e7 94       	ror	r14
    12d0:	1a 95       	dec	r17
    12d2:	c1 f7       	brne	.-16     	; 0x12c4 <__ftoa_engine+0xe6>
    12d4:	e6 ee       	ldi	r30, 0xE6	; 230
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	68 94       	set
    12da:	15 90       	lpm	r1, Z+
    12dc:	15 91       	lpm	r17, Z+
    12de:	35 91       	lpm	r19, Z+
    12e0:	65 91       	lpm	r22, Z+
    12e2:	95 91       	lpm	r25, Z+
    12e4:	05 90       	lpm	r0, Z+
    12e6:	7f e2       	ldi	r23, 0x2F	; 47
    12e8:	73 95       	inc	r23
    12ea:	e1 18       	sub	r14, r1
    12ec:	f1 0a       	sbc	r15, r17
    12ee:	43 0b       	sbc	r20, r19
    12f0:	56 0b       	sbc	r21, r22
    12f2:	c9 0b       	sbc	r28, r25
    12f4:	d0 09       	sbc	r29, r0
    12f6:	c0 f7       	brcc	.-16     	; 0x12e8 <__ftoa_engine+0x10a>
    12f8:	e1 0c       	add	r14, r1
    12fa:	f1 1e       	adc	r15, r17
    12fc:	43 1f       	adc	r20, r19
    12fe:	56 1f       	adc	r21, r22
    1300:	c9 1f       	adc	r28, r25
    1302:	d0 1d       	adc	r29, r0
    1304:	7e f4       	brtc	.+30     	; 0x1324 <__ftoa_engine+0x146>
    1306:	70 33       	cpi	r23, 0x30	; 48
    1308:	11 f4       	brne	.+4      	; 0x130e <__ftoa_engine+0x130>
    130a:	8a 95       	dec	r24
    130c:	e6 cf       	rjmp	.-52     	; 0x12da <__ftoa_engine+0xfc>
    130e:	e8 94       	clt
    1310:	01 50       	subi	r16, 0x01	; 1
    1312:	30 f0       	brcs	.+12     	; 0x1320 <__ftoa_engine+0x142>
    1314:	08 0f       	add	r16, r24
    1316:	0a f4       	brpl	.+2      	; 0x131a <__ftoa_engine+0x13c>
    1318:	00 27       	eor	r16, r16
    131a:	02 17       	cp	r16, r18
    131c:	08 f4       	brcc	.+2      	; 0x1320 <__ftoa_engine+0x142>
    131e:	20 2f       	mov	r18, r16
    1320:	23 95       	inc	r18
    1322:	02 2f       	mov	r16, r18
    1324:	7a 33       	cpi	r23, 0x3A	; 58
    1326:	28 f0       	brcs	.+10     	; 0x1332 <__ftoa_engine+0x154>
    1328:	79 e3       	ldi	r23, 0x39	; 57
    132a:	7d 93       	st	X+, r23
    132c:	2a 95       	dec	r18
    132e:	e9 f7       	brne	.-6      	; 0x132a <__ftoa_engine+0x14c>
    1330:	10 c0       	rjmp	.+32     	; 0x1352 <__ftoa_engine+0x174>
    1332:	7d 93       	st	X+, r23
    1334:	2a 95       	dec	r18
    1336:	89 f6       	brne	.-94     	; 0x12da <__ftoa_engine+0xfc>
    1338:	06 94       	lsr	r0
    133a:	97 95       	ror	r25
    133c:	67 95       	ror	r22
    133e:	37 95       	ror	r19
    1340:	17 95       	ror	r17
    1342:	17 94       	ror	r1
    1344:	e1 18       	sub	r14, r1
    1346:	f1 0a       	sbc	r15, r17
    1348:	43 0b       	sbc	r20, r19
    134a:	56 0b       	sbc	r21, r22
    134c:	c9 0b       	sbc	r28, r25
    134e:	d0 09       	sbc	r29, r0
    1350:	98 f0       	brcs	.+38     	; 0x1378 <__ftoa_engine+0x19a>
    1352:	23 95       	inc	r18
    1354:	7e 91       	ld	r23, -X
    1356:	73 95       	inc	r23
    1358:	7a 33       	cpi	r23, 0x3A	; 58
    135a:	08 f0       	brcs	.+2      	; 0x135e <__ftoa_engine+0x180>
    135c:	70 e3       	ldi	r23, 0x30	; 48
    135e:	7c 93       	st	X, r23
    1360:	20 13       	cpse	r18, r16
    1362:	b8 f7       	brcc	.-18     	; 0x1352 <__ftoa_engine+0x174>
    1364:	7e 91       	ld	r23, -X
    1366:	70 61       	ori	r23, 0x10	; 16
    1368:	7d 93       	st	X+, r23
    136a:	30 f0       	brcs	.+12     	; 0x1378 <__ftoa_engine+0x19a>
    136c:	83 95       	inc	r24
    136e:	71 e3       	ldi	r23, 0x31	; 49
    1370:	7d 93       	st	X+, r23
    1372:	70 e3       	ldi	r23, 0x30	; 48
    1374:	2a 95       	dec	r18
    1376:	e1 f7       	brne	.-8      	; 0x1370 <__ftoa_engine+0x192>
    1378:	11 24       	eor	r1, r1
    137a:	ef 90       	pop	r14
    137c:	ff 90       	pop	r15
    137e:	0f 91       	pop	r16
    1380:	1f 91       	pop	r17
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	99 27       	eor	r25, r25
    1388:	87 fd       	sbrc	r24, 7
    138a:	90 95       	com	r25
    138c:	08 95       	ret

0000138e <strnlen_P>:
    138e:	fc 01       	movw	r30, r24
    1390:	05 90       	lpm	r0, Z+
    1392:	61 50       	subi	r22, 0x01	; 1
    1394:	70 40       	sbci	r23, 0x00	; 0
    1396:	01 10       	cpse	r0, r1
    1398:	d8 f7       	brcc	.-10     	; 0x1390 <strnlen_P+0x2>
    139a:	80 95       	com	r24
    139c:	90 95       	com	r25
    139e:	8e 0f       	add	r24, r30
    13a0:	9f 1f       	adc	r25, r31
    13a2:	08 95       	ret

000013a4 <strchr>:
    13a4:	fc 01       	movw	r30, r24
    13a6:	81 91       	ld	r24, Z+
    13a8:	86 17       	cp	r24, r22
    13aa:	21 f0       	breq	.+8      	; 0x13b4 <strchr+0x10>
    13ac:	88 23       	and	r24, r24
    13ae:	d9 f7       	brne	.-10     	; 0x13a6 <strchr+0x2>
    13b0:	99 27       	eor	r25, r25
    13b2:	08 95       	ret
    13b4:	31 97       	sbiw	r30, 0x01	; 1
    13b6:	cf 01       	movw	r24, r30
    13b8:	08 95       	ret

000013ba <strcpy>:
    13ba:	fb 01       	movw	r30, r22
    13bc:	dc 01       	movw	r26, r24
    13be:	01 90       	ld	r0, Z+
    13c0:	0d 92       	st	X+, r0
    13c2:	00 20       	and	r0, r0
    13c4:	e1 f7       	brne	.-8      	; 0x13be <strcpy+0x4>
    13c6:	08 95       	ret

000013c8 <strnlen>:
    13c8:	fc 01       	movw	r30, r24
    13ca:	61 50       	subi	r22, 0x01	; 1
    13cc:	70 40       	sbci	r23, 0x00	; 0
    13ce:	01 90       	ld	r0, Z+
    13d0:	01 10       	cpse	r0, r1
    13d2:	d8 f7       	brcc	.-10     	; 0x13ca <strnlen+0x2>
    13d4:	80 95       	com	r24
    13d6:	90 95       	com	r25
    13d8:	8e 0f       	add	r24, r30
    13da:	9f 1f       	adc	r25, r31
    13dc:	08 95       	ret

000013de <__itoa_ncheck>:
    13de:	bb 27       	eor	r27, r27
    13e0:	4a 30       	cpi	r20, 0x0A	; 10
    13e2:	31 f4       	brne	.+12     	; 0x13f0 <__itoa_ncheck+0x12>
    13e4:	99 23       	and	r25, r25
    13e6:	22 f4       	brpl	.+8      	; 0x13f0 <__itoa_ncheck+0x12>
    13e8:	bd e2       	ldi	r27, 0x2D	; 45
    13ea:	90 95       	com	r25
    13ec:	81 95       	neg	r24
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__utoa_common>

000013f4 <__mulhi_const_10>:
    13f4:	7a e0       	ldi	r23, 0x0A	; 10
    13f6:	97 9f       	mul	r25, r23
    13f8:	90 2d       	mov	r25, r0
    13fa:	87 9f       	mul	r24, r23
    13fc:	80 2d       	mov	r24, r0
    13fe:	91 0d       	add	r25, r1
    1400:	11 24       	eor	r1, r1
    1402:	08 95       	ret

00001404 <__utoa_ncheck>:
    1404:	bb 27       	eor	r27, r27

00001406 <__utoa_common>:
    1406:	fb 01       	movw	r30, r22
    1408:	55 27       	eor	r21, r21
    140a:	aa 27       	eor	r26, r26
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	aa 1f       	adc	r26, r26
    1412:	a4 17       	cp	r26, r20
    1414:	10 f0       	brcs	.+4      	; 0x141a <__utoa_common+0x14>
    1416:	a4 1b       	sub	r26, r20
    1418:	83 95       	inc	r24
    141a:	50 51       	subi	r21, 0x10	; 16
    141c:	b9 f7       	brne	.-18     	; 0x140c <__utoa_common+0x6>
    141e:	a0 5d       	subi	r26, 0xD0	; 208
    1420:	aa 33       	cpi	r26, 0x3A	; 58
    1422:	08 f0       	brcs	.+2      	; 0x1426 <__utoa_common+0x20>
    1424:	a9 5d       	subi	r26, 0xD9	; 217
    1426:	a1 93       	st	Z+, r26
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	79 f7       	brne	.-34     	; 0x140a <__utoa_common+0x4>
    142c:	b1 11       	cpse	r27, r1
    142e:	b1 93       	st	Z+, r27
    1430:	11 92       	st	Z+, r1
    1432:	cb 01       	movw	r24, r22
    1434:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <strrev>

00001438 <fputc>:
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	fb 01       	movw	r30, r22
    1442:	23 81       	ldd	r18, Z+3	; 0x03
    1444:	21 fd       	sbrc	r18, 1
    1446:	03 c0       	rjmp	.+6      	; 0x144e <fputc+0x16>
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	9f ef       	ldi	r25, 0xFF	; 255
    144c:	2c c0       	rjmp	.+88     	; 0x14a6 <fputc+0x6e>
    144e:	22 ff       	sbrs	r18, 2
    1450:	16 c0       	rjmp	.+44     	; 0x147e <fputc+0x46>
    1452:	46 81       	ldd	r20, Z+6	; 0x06
    1454:	57 81       	ldd	r21, Z+7	; 0x07
    1456:	24 81       	ldd	r18, Z+4	; 0x04
    1458:	35 81       	ldd	r19, Z+5	; 0x05
    145a:	42 17       	cp	r20, r18
    145c:	53 07       	cpc	r21, r19
    145e:	44 f4       	brge	.+16     	; 0x1470 <fputc+0x38>
    1460:	a0 81       	ld	r26, Z
    1462:	b1 81       	ldd	r27, Z+1	; 0x01
    1464:	9d 01       	movw	r18, r26
    1466:	2f 5f       	subi	r18, 0xFF	; 255
    1468:	3f 4f       	sbci	r19, 0xFF	; 255
    146a:	31 83       	std	Z+1, r19	; 0x01
    146c:	20 83       	st	Z, r18
    146e:	8c 93       	st	X, r24
    1470:	26 81       	ldd	r18, Z+6	; 0x06
    1472:	37 81       	ldd	r19, Z+7	; 0x07
    1474:	2f 5f       	subi	r18, 0xFF	; 255
    1476:	3f 4f       	sbci	r19, 0xFF	; 255
    1478:	37 83       	std	Z+7, r19	; 0x07
    147a:	26 83       	std	Z+6, r18	; 0x06
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <fputc+0x6e>
    147e:	8b 01       	movw	r16, r22
    1480:	ec 01       	movw	r28, r24
    1482:	fb 01       	movw	r30, r22
    1484:	00 84       	ldd	r0, Z+8	; 0x08
    1486:	f1 85       	ldd	r31, Z+9	; 0x09
    1488:	e0 2d       	mov	r30, r0
    148a:	09 95       	icall
    148c:	89 2b       	or	r24, r25
    148e:	e1 f6       	brne	.-72     	; 0x1448 <fputc+0x10>
    1490:	d8 01       	movw	r26, r16
    1492:	16 96       	adiw	r26, 0x06	; 6
    1494:	8d 91       	ld	r24, X+
    1496:	9c 91       	ld	r25, X
    1498:	17 97       	sbiw	r26, 0x07	; 7
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	17 96       	adiw	r26, 0x07	; 7
    149e:	9c 93       	st	X, r25
    14a0:	8e 93       	st	-X, r24
    14a2:	16 97       	sbiw	r26, 0x06	; 6
    14a4:	ce 01       	movw	r24, r28
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	1f 91       	pop	r17
    14ac:	0f 91       	pop	r16
    14ae:	08 95       	ret

000014b0 <__ultoa_invert>:
    14b0:	fa 01       	movw	r30, r20
    14b2:	aa 27       	eor	r26, r26
    14b4:	28 30       	cpi	r18, 0x08	; 8
    14b6:	51 f1       	breq	.+84     	; 0x150c <__ultoa_invert+0x5c>
    14b8:	20 31       	cpi	r18, 0x10	; 16
    14ba:	81 f1       	breq	.+96     	; 0x151c <__ultoa_invert+0x6c>
    14bc:	e8 94       	clt
    14be:	6f 93       	push	r22
    14c0:	6e 7f       	andi	r22, 0xFE	; 254
    14c2:	6e 5f       	subi	r22, 0xFE	; 254
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	8f 4f       	sbci	r24, 0xFF	; 255
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	af 4f       	sbci	r26, 0xFF	; 255
    14cc:	b1 e0       	ldi	r27, 0x01	; 1
    14ce:	3e d0       	rcall	.+124    	; 0x154c <__ultoa_invert+0x9c>
    14d0:	b4 e0       	ldi	r27, 0x04	; 4
    14d2:	3c d0       	rcall	.+120    	; 0x154c <__ultoa_invert+0x9c>
    14d4:	67 0f       	add	r22, r23
    14d6:	78 1f       	adc	r23, r24
    14d8:	89 1f       	adc	r24, r25
    14da:	9a 1f       	adc	r25, r26
    14dc:	a1 1d       	adc	r26, r1
    14de:	68 0f       	add	r22, r24
    14e0:	79 1f       	adc	r23, r25
    14e2:	8a 1f       	adc	r24, r26
    14e4:	91 1d       	adc	r25, r1
    14e6:	a1 1d       	adc	r26, r1
    14e8:	6a 0f       	add	r22, r26
    14ea:	71 1d       	adc	r23, r1
    14ec:	81 1d       	adc	r24, r1
    14ee:	91 1d       	adc	r25, r1
    14f0:	a1 1d       	adc	r26, r1
    14f2:	20 d0       	rcall	.+64     	; 0x1534 <__ultoa_invert+0x84>
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <__ultoa_invert+0x48>
    14f6:	68 94       	set
    14f8:	3f 91       	pop	r19
    14fa:	2a e0       	ldi	r18, 0x0A	; 10
    14fc:	26 9f       	mul	r18, r22
    14fe:	11 24       	eor	r1, r1
    1500:	30 19       	sub	r19, r0
    1502:	30 5d       	subi	r19, 0xD0	; 208
    1504:	31 93       	st	Z+, r19
    1506:	de f6       	brtc	.-74     	; 0x14be <__ultoa_invert+0xe>
    1508:	cf 01       	movw	r24, r30
    150a:	08 95       	ret
    150c:	46 2f       	mov	r20, r22
    150e:	47 70       	andi	r20, 0x07	; 7
    1510:	40 5d       	subi	r20, 0xD0	; 208
    1512:	41 93       	st	Z+, r20
    1514:	b3 e0       	ldi	r27, 0x03	; 3
    1516:	0f d0       	rcall	.+30     	; 0x1536 <__ultoa_invert+0x86>
    1518:	c9 f7       	brne	.-14     	; 0x150c <__ultoa_invert+0x5c>
    151a:	f6 cf       	rjmp	.-20     	; 0x1508 <__ultoa_invert+0x58>
    151c:	46 2f       	mov	r20, r22
    151e:	4f 70       	andi	r20, 0x0F	; 15
    1520:	40 5d       	subi	r20, 0xD0	; 208
    1522:	4a 33       	cpi	r20, 0x3A	; 58
    1524:	18 f0       	brcs	.+6      	; 0x152c <__ultoa_invert+0x7c>
    1526:	49 5d       	subi	r20, 0xD9	; 217
    1528:	31 fd       	sbrc	r19, 1
    152a:	40 52       	subi	r20, 0x20	; 32
    152c:	41 93       	st	Z+, r20
    152e:	02 d0       	rcall	.+4      	; 0x1534 <__ultoa_invert+0x84>
    1530:	a9 f7       	brne	.-22     	; 0x151c <__ultoa_invert+0x6c>
    1532:	ea cf       	rjmp	.-44     	; 0x1508 <__ultoa_invert+0x58>
    1534:	b4 e0       	ldi	r27, 0x04	; 4
    1536:	a6 95       	lsr	r26
    1538:	97 95       	ror	r25
    153a:	87 95       	ror	r24
    153c:	77 95       	ror	r23
    153e:	67 95       	ror	r22
    1540:	ba 95       	dec	r27
    1542:	c9 f7       	brne	.-14     	; 0x1536 <__ultoa_invert+0x86>
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	61 05       	cpc	r22, r1
    1548:	71 05       	cpc	r23, r1
    154a:	08 95       	ret
    154c:	9b 01       	movw	r18, r22
    154e:	ac 01       	movw	r20, r24
    1550:	0a 2e       	mov	r0, r26
    1552:	06 94       	lsr	r0
    1554:	57 95       	ror	r21
    1556:	47 95       	ror	r20
    1558:	37 95       	ror	r19
    155a:	27 95       	ror	r18
    155c:	ba 95       	dec	r27
    155e:	c9 f7       	brne	.-14     	; 0x1552 <__ultoa_invert+0xa2>
    1560:	62 0f       	add	r22, r18
    1562:	73 1f       	adc	r23, r19
    1564:	84 1f       	adc	r24, r20
    1566:	95 1f       	adc	r25, r21
    1568:	a0 1d       	adc	r26, r0
    156a:	08 95       	ret

0000156c <strrev>:
    156c:	dc 01       	movw	r26, r24
    156e:	fc 01       	movw	r30, r24
    1570:	67 2f       	mov	r22, r23
    1572:	71 91       	ld	r23, Z+
    1574:	77 23       	and	r23, r23
    1576:	e1 f7       	brne	.-8      	; 0x1570 <strrev+0x4>
    1578:	32 97       	sbiw	r30, 0x02	; 2
    157a:	04 c0       	rjmp	.+8      	; 0x1584 <strrev+0x18>
    157c:	7c 91       	ld	r23, X
    157e:	6d 93       	st	X+, r22
    1580:	70 83       	st	Z, r23
    1582:	62 91       	ld	r22, -Z
    1584:	ae 17       	cp	r26, r30
    1586:	bf 07       	cpc	r27, r31
    1588:	c8 f3       	brcs	.-14     	; 0x157c <strrev+0x10>
    158a:	08 95       	ret

0000158c <_exit>:
    158c:	f8 94       	cli

0000158e <__stop_program>:
    158e:	ff cf       	rjmp	.-2      	; 0x158e <__stop_program>
